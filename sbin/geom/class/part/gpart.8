.\" Copyright (c) 2007, 2008 Marcel Moolenaar
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd March 9, 2011
.Dt GPART 8
.Os
.Sh NAME
.Nm gpart
.Nd "control utility for the disk partitioning GEOM class"
.Sh SYNOPSIS
To add support for the disk partitioning GEOM class,
place one or more of the following
lines in your kernel configuration file:
.Bd -ragged -offset indent
.Cd "options GEOM_PART_APM"
.Cd "options GEOM_PART_BSD"
.Cd "options GEOM_PART_EBR"
.Cd "options GEOM_PART_GPT"
.Cd "options GEOM_PART_MBR"
.Cd "options GEOM_PART_PC98"
.Cd "options GEOM_PART_VTOC8"
.Ed
.Pp
The
.Dv GEOM_PART_APM
option adds support for the Apple Partition Map (APM)
found on Apple Macintosh computers.
The
.Dv GEOM_PART_BSD
option adds support for the traditional
.Bx
disklabel.
The
.Dv GEOM_PART_EBR
option adds support for the Extended Boot Record (EBR),
which is used to define a logical partition.
The
.Dv GEOM_PART_GPT
option adds support for the GUID Partition Table (GPT)
found on Intel Itanium computers and Intel-based Macintosh computers.
The
.Dv GEOM_PART_MBR
option adds support for the Master Boot Record (MBR)
found on PCs and used on many removable media.
The
.Dv GEOM_PART_PC98
option adds support for the MBR variant as used on
NEC PC-98 computers.
The
.Dv GEOM_PART_VTOC8
option adds support for Sun's SMI VTOC8 label as
found on computers based on
.Tn SPARC64
and
.Tn UltraSPARC.
.Pp
Usage of the
.Ns Nm
utility:
.Pp
.\" ==== ADD ====
.Nm
.Cm add
.Fl t Ar type
.Op Fl b Ar start
.Op Fl s Ar size
.Op Fl i Ar index
.Op Fl l Ar label
.Op Fl f Ar flags
.Ar geom
.\" ==== BACKUP ====
.Nm
.Cm backup
.Ar geom
.\" ==== BOOTCODE ====
.Nm
.Cm bootcode
.Op Fl b Ar bootcode
.Op Fl p Ar partcode Fl i Ar index
.Op Fl f Ar flags
.Ar geom
.\" ==== COMMIT ====
.Nm
.Cm commit
.Ar geom
.\" ==== CREATE ====
.Nm
.Cm create
.Fl s Ar scheme
.Op Fl n Ar entries
.Op Fl f Ar flags
.Ar provider
.\" ==== DELETE ====
.Nm
.Cm delete
.Fl i Ar index
.Op Fl f Ar flags
.Ar geom
.\" ==== DESTROY ====
.Nm
.Cm destroy
.Op Fl F
.Op Fl f Ar flags
.Ar geom
.\" ==== MODIFY ====
.Nm
.Cm modify
.Fl i Ar index
.Op Fl l Ar label
.Op Fl t Ar type
.Op Fl f Ar flags
.Ar geom
.\" ==== RECOVER ====
.Nm
.Cm recover
.Op Fl f Ar flags
.Ar geom
.\" ==== RESIZE ====
.Nm
.Cm resize
.Fl i Ar index
.Op Fl s Ar size
.Op Fl f Ar flags
.Ar geom
.\" ==== RESTORE ====
.Nm
.Cm restore
.Op Fl lF
.Op Fl f Ar flags
.Ar provider
.Op Ar ...
.\" ==== SET ====
.Nm
.Cm set
.Fl a Ar attrib
.Fl i Ar index
.Op Fl f Ar flags
.Ar geom
.\" ==== SHOW ====
.Nm
.Cm show
.Op Fl lrp
.Op Ar geom ...
.\" ==== UNDO ====
.Nm
.Cm undo
.Ar geom
.\" ==== UNSET ====
.Nm
.Cm unset
.Fl a Ar attrib
.Fl i Ar index
.Op Fl f Ar flags
.Ar geom
.\"
.Sh DESCRIPTION
The
.Nm
utility is used to partition GEOM providers, normally disks.
The first argument of which is the action to be taken:
.Bl -tag -width ".Cm bootcode"
.\" ==== ADD ====
.It Cm add
Add a new partition to the partitioning scheme given by
.Ar geom .
The partition begins on the logical block address given by the
.Fl b Ar start
option.
Its size is given by the
.Fl s Ar size
option. SI unit suffixes are allowed. One or both
.Fl b
and
.Fl s
options can be omitted. If so they are automatically calculated.
The type of the partition is given by the
.Fl t Ar type
option.
Partition types are discussed below in the section entitled
.Sx "PARTITION TYPES" .
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl i Ar index
The index in the partition table at which the new partition is to be
placed.
The index determines the name of the device special file used
to represent the partition.
.It Fl l Ar label
The label attached to the partition.
This option is only valid when used on partitioning schemes that support
partition labels.
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== BACKUP ====
.It Cm backup
Dump a partition table to standard output in special format used by
.Cm restore
action.
.\" ==== BOOTCODE ====
.It Cm bootcode
Embed bootstrap code into the partitioning scheme's metadata on the
.Ar geom
(using
.Fl b Ar bootcode )
or write bootstrap code into a partition (using
.Fl p Ar partcode
and
.Fl i Ar index ) .
Not all partitioning schemes have embedded bootstrap code, so the
.Fl b Ar bootcode
option is scheme-specific in nature.
For the GPT scheme, embedded bootstrap code is supported.
The bootstrap code is embedded in the protective MBR rather than the GPT.
The
.Fl b Ar bootcode
option specifies a file that contains the bootstrap code.
The contents and size of the file are determined by the partitioning
scheme.
For the MBR scheme, it is a 512 byte file of which the first 446 bytes
are installed as bootstrap code.
The
.Fl p Ar partcode
option specifies a file that contains the bootstrap code intended to be
written to a partition.
For the VTOC8 scheme, it is a 8192 byte file of which the last 7680 bytes
are installed as bootstrap code.
The partition is specified by the
.Fl i Ar index
option.
For the VTOC8 scheme, if the
.Fl i Ar index
option is omitted, the bootstrap code is written to all sufficiently large
partitions.
The size of the file must be smaller than the size of the partition.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== COMMIT ====
.It Cm commit
Commit any pending changes for geom
.Ar geom .
All actions are being committed by default and will not result in
pending changes.
Actions can be modified with the
.Fl f Ar flags
option so that they are not being committed by default.
As such, they become pending.
Pending changes are reflected by the geom and the
.Nm
utility, but they are not actually written to disk.
The
.Cm commit
action will write any and all pending changes to disk.
.\" ==== CREATE ====
.It Cm create
Create a new partitioning scheme on a provider given by
.Ar provider .
The
.Fl s Ar scheme
option determines the scheme to use.
The kernel needs to have support for a particular scheme before
that scheme can be used to partition a disk.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl n Ar entries
The number of entries in the partition table.
Every partitioning scheme has a minimum and a maximum number of entries
and this option allows tables to be created with the number of entries
that lies anywhere between the minimum and the maximum.
Some schemes have a maximum equal to the minimum and some schemes have
a maximum large enough to be considered unlimited.
By default, partition tables are created with the minimum number of
entries.
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== DELETE ====
.It Cm delete
Delete a partition from geom
.Ar geom
and further identified by the
.Fl i Ar index
option.
The partition cannot be actively used by the kernel.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== DESTROY ====
.It Cm destroy
Destroy the partitioning scheme as implemented by geom
.Ar geom .
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl F
Forced destroying of the partition table even if it is not empty.
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== MODIFY ====
.It Cm modify
Modify a partition from geom
.Ar geom
and further identified by the
.Fl i Ar index
option.
Only the the type and/or label of the partition can be modified.
To change the type of a partition, specify the new type with the
.Fl t Ar type
option.
To change the label of a partition, specify the new label with the
.Fl l Ar label
option.
Not all partitioning schemes support labels and it is invalid to
try to change a partition label in such cases.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== RECOVER ====
.It Cm recover
Recover corrupt partition's scheme metadata on the geom
.Ar geom .
See the section entitled
.Sx "RECOVERING"
below for the additional information.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== RESIZE ====
.It Cm resize
Resize a partition from geom
.Ar geom
and further identified by the
.Fl i Ar index
option.
New partition size is expressed in logical block
numbers and can be given by the
.Fl s Ar size
option.
If
.Fl s
option is omitted then new size is automatically calculated
to maximum available from given geom
.Ar geom .
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== RESTORE ====
.It Cm restore
Restore the partition table from backup previously created by
.Cm backup
action and given from standard input.
Only partition table may be restored.
This action does not affect content of partitions.
This mean that you should copy your data from backup after restoring
partition table and write bootcode again if it is needed. 
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl F
Destroy partition table on the given
.Ar provider
before doing restore.
.It Fl l
Restore partition labels for partitioning schemes that support them.
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== SET ====
.It Cm set
Set the named attribute on the partition entry.
See the section entitled
.Sx "ATTRIBUTES"
below for a list of available attributes.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.\" ==== SHOW ====
.It Cm show
Show the current partition information of the specified geoms
or all geoms if none are specified.
Additional options include:
.Bl -tag -width 10n
.It Fl l
For partition schemes that support partition labels print them
instead of partition type.
.It Fl p
Show provider names instead of partition indexes.
.It Fl r
Show raw partition type instead of symbolic name.
.El
.\" ==== UNDO ====
.It Cm undo
Revert any pending changes for geom
.Ar geom .
This action is the opposite of the
.Cm commit
action and can be used to undo any changes that have not been committed.
.\" ==== UNSET ====
.It Cm unset
Clear the named attribute on the partition entry.
See the section entitled
.Sx "ATTRIBUTES"
below for a list of available attributes.
.Pp
Additional options include:
.Bl -tag -width 10n
.It Fl f Ar flags
Additional operational flags.
See the section entitled
.Sx "OPERATIONAL FLAGS"
below for a discussion
about its use.
.El
.El
.\"
.Sh PARTITION TYPES
The
.Nm
utility uses symbolic names for common partition types to avoid that the
user needs to know what the partitioning scheme in question is and what
the actual number or identification needs to be used for a particular
type.
The
.Nm
utility also allows the user to specify scheme-specific partition types
for partition types that do not have symbol names.
The symbolic names currently understood are:
.Bl -tag -width ".Cm freebsd-vinum"
.It Cm bios-boot
The system partition dedicated to second stage of the boot loader program.
Usually it used by GRUB 2 loader when the partition table is GPT.
The scheme-specific type is
.Qq Li "!21686148-6449-6E6F-744E-656564454649" .
.It Cm efi
The system partition for computers that use the Extensible Firmware
Interface (EFI).
In such cases, the GPT partitioning scheme is being used and the
actual partition type for the system partition can also be specified as
.Qq Li "!c12a7328-f81f-11d2-ba4b-00a0c93ec93ab" .
.It Cm freebsd
A
.Fx
partition that uses the
.Bx
disklabel to sub-divide the
partition into file systems.
This is a legacy partition type and should not be used for the APM
or GPT schemes.
The scheme-specific types are
.Qq Li "!165"
for MBR,
.Qq Li "!FreeBSD"
for APM, and
.Qq Li "!516e7cb4-6ecf-11d6-8ff8-00022d09712b"
for GPT.
.It Cm freebsd-boot
A
.Fx
partition dedicated to bootstrap code.
The scheme-specific type is
.Qq Li "!83bd6b9d-7f41-11dc-be0b-001560b84f0f"
for GPT.
.It Cm freebsd-swap
A
.Fx
partition dedicated to swap space.
The scheme-specific types are
.Qq Li "!FreeBSD-swap"
for APM,
.Qq Li "!516e7cb5-6ecf-11d6-8ff8-00022d09712b"
for GPT, and tag 0x0901 for VTOC8.
.It Cm freebsd-ufs
A
.Fx
partition that contains a UFS or UFS2 file system.
The scheme-specific types are
.Qq Li "!FreeBSD-UFS"
for APM,
.Qq Li "!516e7cb6-6ecf-11d6-8ff8-00022d09712b"
for GPT, and tag 0x0902 for VTOC8.
.It Cm freebsd-vinum
A
.Fx
partition that contains a Vinum volume.
The scheme-specific types are
.Qq Li "!FreeBSD-Vinum"
for APM,
.Qq Li "!516e7cb8-6ecf-11d6-8ff8-00022d09712b"
for GPT, and tag 0x0903 for VTOC8.
.It Cm freebsd-zfs
A
.Fx
partition that contains a ZFS volume.
The scheme-specific types are
.Qq Li "!FreeBSD-ZFS"
for APM,
.Qq Li "!516e7cba-6ecf-11d6-8ff8-00022d09712b"
for GPT, and 0x0904 for VTOC8.
.It Cm mbr
A partition that is sub-partitioned by a master boot record (MBR).
This type is known as
.Qq Li "!024dee41-33e7-11d3-9d69-0008c781f39f"
by GPT.
.El
.Sh ATTRIBUTES
The scheme-specific attributes for EBR:
.Bl -tag -width ".Ar active"
.It Ar active
.El
.Pp
The scheme-specific attributes for GPT:
.Bl -tag -width ".Ar bootfailed"
.It Ar bootme
When set, the
.Nm gptboot
stage 1 boot loader will try to boot the system from this partition.
Multiple partitions might be marked with the
.Ar bootme
attribute.
In such scenario the
.Nm gptboot
will try all
.Ar bootme
partitions one by one, until the next boot stage is successfully entered.
.It Ar bootonce
Setting this attribute automatically sets the
.Ar bootme
attribute.
When set, the
.Nm gptboot
stage 1 boot loader will try to boot the system from this partition only once.
Partitions with both
.Ar bootonce
and
.Ar bootme
attributes are tried before partitions with only the
.Ar bootme
attribute.
Before
.Ar bootonce
partition is tried, the
.Nm gptboot
removes the
.Ar bootme
attribute and tries to execute the next boot stage.
If it fails, the
.Ar bootonce
attribute that is now alone is replaced with the
.Ar bootfailed
attribute.
If the execution of the next boot stage succeeds, but the system is not fully
booted, the
.Nm gptboot
will look for
.Ar bootonce
attributes alone (without the
.Ar bootme
attribute) on the next system boot and will replace those with the
.Ar bootfailed
attribute.
If the system is fully booted, the
.Pa /etc/rc.d/gptboot
start-up script will look for partition with the
.Ar bootonce
attribute alone, will remove the attribute and log that the system was
successfully booted from this partition.
There should be at most one
.Ar bootonce
partition when system is successfully booted.
Multiple partitions might be marked with the
.Ar bootonce
and
.Ar bootme
attribute pairs.
.It Ar bootfailed
This attribute should not be manually managed.
It is managed by the
.Nm gptboot
stage 1 boot loader and the
.Pa /etc/rc.d/gptboot
start-up script.
This attribute is used to mark partitions that had the
.Ar bootonce
attribute set, but we failed to boot from them.
Once we successfully boot, the
.Pa /etc/rc.d/gptboot
script will log all the partitions we failed to boot from and will remove the
.Ar bootfailed
attributes.
.El
.Pp
The scheme-specific attributes for MBR:
.Bl -tag -width ".Ar active"
.It Ar active
.El
.Pp
The scheme-specific attributes for PC98:
.Bl -tag -width ".Ar bootable"
.It Ar active
.It Ar bootable
.El
.Sh OPERATIONAL FLAGS
Actions other than the
.Cm commit
and
.Cm undo
actions take an optional
.Fl f Ar flags
option.
This option is used to specify action-specific operational flags.
By default, the
.Nm
utility defines the
.Ql C
flag so that the action is immediately
committed.
The user can specify
.Dq Fl f Cm x
to have the action result in a pending change that can later, with
other pending changes, be committed as a single compound change with
the
.Cm commit
action or reverted with the
.Cm undo
action.
.Sh RECOVERING
The GEOM class PART supports recovering of partition tables only for GPT.
The GUID partition table has a primary and secondary (backup) copy of
metadata for redundance.
They are stored in the begining and in the end of device respectively.
Therefore it is acceptable to have some corruptions in the metadata that
are not fatal to work with GPT.
When kernel detects corrupt metadata it marks this table as corrupt and
reports about corruption.
Any changes in corrupt table are prohibited except
.Cm destroy
and
.Cm recover . 
.Pp
In case when only first sector is corrupt kernel can not detect GPT even
if partition table is not corrupt.
You can write protective MBR with
.Xr dd 1
command to restore ability of GPT detection.
The copy of protective MBR is usually located in the
.Pa /boot/pmbr
file.
.Pp
In case when some of metadata is corrupt you will get to know about this
from kernel's messages like these:
.Bd -literal -offset indent
GEOM: provider: the primary GPT table is corrupt or invalid.
GEOM: provider: using the secondary instead -- recovery strongly advised.
.Ed
.Pp
or
.Bd -literal -offset indent
GEOM: provider: the secondary GPT table is corrupt or invalid.
GEOM: provider: using the primary only -- recovery suggested.
.Ed
.Pp
Also 
.Cm gpart 
commands like 
.Cm show ,
.Cm status
and
.Cm list
will report about corrupt table.
.Pp
In case when the size of device has changed (e.g. volume expansion) the 
secondary GPT header will become located not in the last sector.
This is not a metadata corruption, but it is dangerous because any
corruption of the primary GPT will lead to lost of partition table.
Kernel reports about this problem with message:
.Bd -literal -offset indent
GEOM: provider: the secondary GPT header is not in the last LBA.
.Ed
.Pp
A corrupt table can be recovered with 
.Cm gpart recover 
command.
This command does reconstruction of corrupt metadata using 
known valid metadata.
Also it can relocate secondary GPT to the end of device.
.Pp
.Pa NOTE :
The GEOM class PART can detect the same partition table on different GEOM 
providers and some of them will be marked as corrupt.
Be careful when choosing a provider for recovering.
If you choose incorrectly you can destroy the metadata of another GEOM class,
e.g. GEOM MIRROR or GEOM LABEL.
.Sh EXIT STATUS
Exit status is 0 on success, and 1 if the command fails.
.Sh EXAMPLES
Create GPT scheme on
.Pa ad0 .
.Bd -literal -offset indent
/sbin/gpart create -s GPT ad0
.Ed
.Pp
Embed GPT bootstrap code into protective MBR.
.Bd -literal -offset indent
/sbin/gpart bootcode -b /boot/pmbr ad0
.Ed
.Pp
Create a dedicated
.Cm freebsd-boot
partition that can boot
.Fx
from a
.Cm freebsd-ufs
partition, and install bootstrap code into it.
This partition must be larger than
.Pa /boot/gptboot ,
or the GPT boot you are planning to write, but smaller than 545 KB.
A size of 15 blocks (7680 bytes) would be sufficient for
booting from UFS but let's use 128 blocks (64 KB) here in
this example, in order to reserve some space for potential
future need (e.g.\& from a ZFS partition).
.Bd -literal -offset indent
/sbin/gpart add -b 34 -s 128 -t freebsd-boot ad0
/sbin/gpart bootcode -p /boot/gptboot -i 1 ad0
.Ed
.Pp
Create a 512MB-sized
.Cm freebsd-ufs
partition that would contain UFS where the system boots from.
.Bd -literal -offset indent
/sbin/gpart add -b 162 -s 1048576 -t freebsd-ufs ad0
.Ed
.Pp
Create VTOC8 scheme on
.Pa da0 .
.Bd -literal -offset indent
/sbin/gpart create -s VTOC8 da0
.Ed
.Pp
Create a 512MB-sized
.Cm freebsd-ufs
partition that would contain UFS where the system boots from.
.Bd -literal -offset indent
/sbin/gpart add -s 512M -t freebsd-ufs da0
.Ed
.Pp
After having created all required partitions, embed bootstrap code into them.
.Bd -literal -offset indent
/sbin/gpart bootcode -p /boot/boot1 da0
.Ed
.Pp
Create backup of partition table from
.Pa da0
.Bd -literal -offset indent
/sbin/gpart backup da0 > da0.backup
.Ed
.Pp
Restore partition table from backup to
.Pa da0
.Bd -literal -offset indent
/sbin/gpart restore -l da0 < /mnt/da0.backup
.Ed
.Pp
Clone partition table from 
.Pa ada0 
to 
.Pa ada1 
and 
.Pa ada2
.Bd -literal -offset indent
/sbin/gpart backup ada0 | /sbin/gpart restore -F ada1 ada2
.Ed
.Sh SEE ALSO
.Xr dd 1 ,
.Xr geom 4 ,
.Xr geom 8
.Sh HISTORY
The
.Nm
utility appeared in
.Fx 7.0 .
.Sh AUTHORS
.An Marcel Moolenaar Aq marcel@FreeBSD.org
