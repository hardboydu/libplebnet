.TH Cronyx-Sigma 1
.rm ES
.rm EE
.de ES
.PP
.nf
.in +0.5i
..
.de EE
.in -0.5i
.fi
..
.na
.SH NAME
.B cxconfig
\- channel options management utility for Cronyx-Sigma adapter
.SH DESCRIPTION
.PP
The \fBcxconfig\fP utility is used for configuring the channel options of
the Cronyx-Sigma adapter.
.PP
To change cha options the channel should be free: the corresponding
network interface in ``down'' state, the asynchronous terminal device /dev/tty*
closed.
Generally, the channel options are set up during the operating
system startup, for example from the \fI/etc/rc\fP file.
.PP
Note, that not all options have a sense for every particular
case, and an attempt to set some of them can hang up the channel or
the whole adapter.
.SH "Usage"
.IP "cxconfig"
The brief information about all channels.
.IP "cxconfig -a"
The full information about all channels.
.IP "cxconfig <channel>"
The brief information about the channel.
.IP "cxconfig -a <channel>"
The full information about the channel.
.IP "cxconfig <channel> <option>..."
Setting the channel options.
.SH "Channel options"
.IP ispeed=#
Set the receiver baud rate to the number given.
The maximal value is 256000 bits/sec.
In the synchronous mode the receiver baud rate is significant
only when DPLL mode is used.
.IP ospeed=#
Set the transmitter baud rate to the number given.
The maximal value is 256000 bits/sec.
In the synchronous mode the transmitter baud rate is significant
only in the case of the internal clock source.
If receiver and transmitter have equal data rate, then it could
be set by specifying only the numerical argument.
.IP async
Set the asynchronous channel mode.
.IP "hdlc, bisync, bsc, x.21, x21
Set the synchronous channel mode: HDLC, Bisync (BSC) or X.21.
.IP ppp
Set the link-level protocol: PPP/HDLC.  The built-in simplified synchronous PPP
implementation is used (see RFC-1548, RFC-1549).
.IP cisco
Set the link-level protocol: Cisco/HDLC (see RFC-1547).
This protocol is intended for compatibility with old models of Cisco routers,
and with early versions of BSD/386 drivers.
The extensive usage of this protocol is not recommended.
.IP ext
Use the external link-level protocol suite (for BSD/386 only).
.IP "+keepalive, -keepalive"
Enable the automatic line state control sub-protocol.
This setting is not significant when the external link-level protocol is used.
.IP "+autorts, -autorts"
Enable the automatic RTS signal control.
When enabled, the RTS signal goes up only when both halves of
the receiver ring buffer are free and ready for receive,
and goes down when one or both buffers are busy.
.IP "port=rs232, port=rs449, port=v35
Set the zero channel hardware interface type.
.SH "Common options"
.IP "nrz, nrzi, manchester
Set the data line signal encoding.
In the case of \fINRZ\fP encoding the zero bit is transmitted by the zero signal
level, the one bit - by the positive signal level.
In the case of \fINRZI\fP encoding the zero bit is transmitted by the change of
the signal level, the one bit - by the constant signal level.
In the case of \fIManchester\fP encoding the zero bit is encoded as 01 value,
the one bit - as 10 value.
.IP "+dpll, -dpll"
Enable the digital phase locked loop mode (DPLL).
When enabled, the receiver timing clock signal
is derived from the received data.
.IP "+lloop, -lloop"
Set the local loopback mode.
.IP "+extclock, -extclock"
Set the timing clock source of synchronous channels.  There are
two possible variants: \fIexternal clock\fP source or \fIinternal clock\fP
generation.
.br
\fIExternal clock\fP mode is the most common method for connecting
external modem hardware.  In this mode the external timing
signal is received on TXCIN pin of the connector, and it is
used as a synchronization clock for transmitting data (TXD).
.br
In the case of \fIinternal clock\fP mode the transmitted data (TXD)
are synchronized using the internal on-board timing generator,
the internally generated timing signal is driven on the TXCOUT
pin, and the signal on the TXCIN pin is ignored.  This mode
is used for direct terminal-to-terminal communication,
e.g. for connecting two computers together in a synchronous mode
via relatively short cable.  This method should also be used
for testing channels with an external loopback connector.
.IP fifo=#
FIFO threshold level setup for receiver and transmitter.
.IP rfifo=#
Hardware RTS/CTS flow control FIFO threshold setup.
.IP "+ctsup, -ctsup"
Enable/disable interrupts on CTS (Clear To Send) signal setup (0 to 1 transition).
.IP "+ctsdown, -ctsdown"
Enable/disable interrupts on CTS (Clear To Send) signal clear (1 to 0 transition).
.IP "+cdup, -cdup"
Enable/disable interrupts on CD (Carrier Detect) signal setup (0 to 1 transition).
.IP "+cddown, -cddown"
Enable/disable interrupts on CD (Carrier Detect) signal clear (1 to 0 transition).
.IP "+dsrup, -dsrup"
Enable/disable interrupts on DSR (Data Set Ready) signal setup (0 to 1 transition).
.IP "+dsrdown, -dsrdown"
Enable/disable interrupts on DSR (Data Set Ready) signal clear (1 to 0 transition).
.SH "Asynchronous mode options"
.IP cs#
Select character size: 5, 6, 7 or 8 bits.
.IP "parodd, pareven
Parity mode: odd or even.
.IP "+ignpar, -ignpar
Disable/enable parity detection.
.IP nopar
Disable parity bit generation.
.IP forcepar
Force parity: even - 0, odd - 1.
.IP "stopb1, stopb1.5, stopb2
Use 1 or 1.5 or 2 stop bits per character.
.IP "+dsr, -dsr"
Use the DSR input signal as receiver enable/disable.
.IP "+cts, -cts"
Use the CTS input signal as transmitter enable/disable.
.IP "+rts, -rts"
Drive the RTS output signal as transmitter ready.
.IP "+rloop, -rloop"
Set the remote loopback mode.
.IP "+etc, -etc"
Enable the embedded transmit commands mode.
.IP "+ixon, -ixon"
Enable the hardware XON/XOFF flow control support.
.IP "+ixany, -ixany"
Use the hardware IXANY mode support.
.IP "+sdt, -sdt"
Detect the spec. characters SCHR1 and SCHR2 in the receive data.
.IP "+flowct, -flowct"
Receive the flow control spec. characters as data.
.IP "+rdt, -rdt"
Detect the spec. characters in range SCRL..SCRH in the receive data.
.IP "+exdt, -exdt"
Detect the spec. characters SCHR3 and SCHR4 in the receive data.
.IP "parintr, parnull, parign, pardisc, parffnull
Action on parity errors:
.ES
  Mode       Action
 -----------------------------------------------------
  parintr    Generate the receiver error interrupt
  parnull    Input the NULL character
  parign     Ignore the error, receive as good data
  pardisc    Ignore the character
  parffnull  Input the sequence <0xFF, NULL, character>
.EE
.IP "brkintr, brknull, brkdisc
Line break state action:
.ES
  Mode     Action
 ---------------------------------------------------
  brkintr  Generate the receiver error interrupt
  brknull  Input the NULL character
  brkdisc  Ignore the line break state
.EE
.IP "+inlcr, -inlcr"
Translate received NL characters to CR.
.IP "+icrnl, -icrnl"
Translate received CR characters to NL.
.IP "+igncr, -igncr"
Ignore received CR characters.
.IP "+ocrnl, -ocrnl"
Translate transmitted CR characters to NL.
.IP "+onlcr, -onlcr"
Translate transmitted NL characters to CR.
.IP "+fcerr, -fcerr"
Process (don't process) the characters, received with errors,
for special character/flow control matching.
.IP "+lnext, -lnext"
Enable the LNEXT character option: the character following
the LNEXT character is not processed for special character/flow
control matching.
.IP "+istrip, -istrip"
Strip input characters to seven bits.
.IP schr1=#
The XON flow control character value.
.IP schr2=#
The XOFF flow control character value.
.IP schr3=#
The SCHR3 spec. character value.
.IP schr4=#
The SCHR4 spec. character value.
.IP "scrl=#, scrh=#
The spec. character range (inclusive).
.IP lnext=#
The LNEXT spec. character value.
.SH "HDLC mode options"
.IP if#
The minimum number of flags transmitted before a frame is started.
.IP noaddr
No frame address recognition.
.IP "addrlen1, addrlen2"
Address field length: 1 or 2 bytes.
.IP "addr1, addr2"
Addressing mode: 4x1 bytes or 2x2 bytes.
Registers RFAR1..RFAR4 should contain the address to be matched.
.IP "+clrdet, -clrdet"
Enable/disable clear detect for X.21 protocol support.
.IP "+dsr, -dsr"
Use the DSR input signal as receiver enable/disable.
.IP "+cts, -cts"
Use the CTS input signal as transmitter enable/disable.
.IP "+rts, -rts"
Drive the RTS output signal as transmitter ready.
.IP "+fcs, -fcs"
Enable/disable the frame checksum generation and checking.
.IP "crc-16, crc-v.41
Select the CRC polynomial: CRC-16 (x^16+x^15+x^2+1)
or CRC V.41 (x^16+x^12+x^5+1).
.IP "fcs-crc-16, fcs-v.41
Frame checksum preset: all zeros (CRC-16) or all ones (CRC V.41).
.IP "+crcinv, -crcinv"
Invert (ie. CRC V.41) or don't invert (ie. CRC-16) the transmitted frame checksum.
.IP "+fcsapd, -fcsapd"
Pass the received CRC to the host at the end of receiver data buffer.
.IP "idlemark, idleflag
Idle mode: idle in mark (transmit all ones) or idle in flag (transmit flag).
.IP "+syn, -syn"
Enable/disable sending pad characters before sending flag when coming out
of the idle mode.
.IP pad#
The number of synchronous characters sent (0..4).
.IP "syn=0xaa, syn=0x00
Send sync pattern.
.IP "rfar1=#, rfar2=#, rfar3=#, rfar4=#
Frame address registers for address recognition.
.SH EXAMPLES
.PP
Set up the channel 7 of the adapter Sigma-400 under FreeBSD.
Physical 4-wire leased line with Zelax+ M115 short-range modems.
Synchronous mode, 128000 bits/sec, interface RS-232,
protocol PPP/HDLC without keepalive support, NRZI encoding,
DPLL mode, no flow control:
.ES
cxconfig cx7 128000 hdlc ppp -keepalive nrzi -cts +dpll -extclock
ifconfig cx7 158.250.244.2 158.250.244.1 up
.EE
.PP
Set up the channel 0 of the adapter Sigma-100 under FreeBSD.
Attachment to the near computer by short cable, internal clock source.
Synchronous mode, 256000 bits/sec, interface RS-232,
protocol Cisco/HDLC with keepalive support:
.ES
cxconfig cx0 hdlc 256000 cisco +keepalive -extclock
ifconfig cx0 200.1.1.1 200.1.1.2 up
.EE
.PP
Set up the channel 1 of the adapter Sigma-840 under BSD/386.
Synchronous 64 kbit/sec leased line, external clock source.
Synchronous mode, interface V.35, external protocol suite:
.ES
cxconfig cx1 hdlc ext
ifconfig cx1 193.124.254.50 193.124.254.49 multicast up
.EE
.PP
Set up the channel 0 of the adapter Sigma-840 under FreeBSD.
Attachment to the Cisco-4000 router by null-modem cable, internal clock source.
Synchronous mode, 64000 bits/sec, interface RS-232,
protocol PPP/HDLC with keepalive support and flow control,
LCP and IPCP protocols (see RFC-1548 and RFC-1332) debug tracing enabled:
.ES
cxconfig cx0 hdlc 64000 port=rs232 ppp +keepalive -extclock +cts
ifconfig cx0 100.0.0.2 100.0.0.1 debug up
.EE
.SH FILES
.IP /dev/cronyx
The special device file for adapter options management.
.SH SEE ALSO
.PP
cx(4)
