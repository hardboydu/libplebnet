#!/stand/sh
#
# bininst - perform the last stage of installation by somehow getting
# a bindist onto the user's disk and unpacking it.  The name bininst
# is actually something of a misnomer, since this utility will install
# more than just the bindist set.
#
# Written:  November 11th, 1994
# Copyright (C) 1994 by Jordan K. Hubbard
#
# Permission to copy or use this software for any purpose is granted
# provided that this message stay intact, and at this location (e.g. no putting
# your name on top after doing something trivial like reindenting it, just
# to make it look like you wrote it!).
#
# $Id$

# Some useful constants.
PATH=/usr/bin:/usr/sbin:/bin:/sbin:/stand
export PATH
TAR=tar
TAR_FLAGS=xvf
TMP=/tmp
IFCONFIG=ifconfig
ROUTE=route
ROUTE_FLAGS="add default"
HOME=/
export HOME

# Set the initial state of the system.
set_defaults() {
	media_type="" ;
	media_device="" ;
	ipaddr="" ;
	hostname="" ;
	ether_intr="" ;
	domain="" ;
	netmask="0xffffff00" ;
	ifconfig_flags="" ;
	remote_hostip="" ;
	tmp_dir="/usr/tmp" ;
	ftp_path="ftp://ftp.freebsd.org/pub/FreeBSD/2.0-ALPHA/bindist" ;
	nfs_path="" ;
	cdrom_path="" ;
	serial_interface="/dev/tty00" ;
	serial_speed="38400" ;
	installing=1 ;
	mkdir -p ${TMP}
	cp /stand/etc/* /etc
}

# Handle the return value from a dialog, doing some pre-processing
# so that each client doesn't have to.
handle_rval() {
	case $1 in
	0)
		return 0
	;;
	255)
		PS1="subshell# " /stand/sh
	;;
	*)
		return 1
	;;
	esac
}

# A simple user-confirmation dialog.
confirm() {
	dialog --title "Please Confirm" --msgbox "$*" 6 72
}

# A simple message box dialog.
message() {
	dialog --title "Progress" --infobox "$*" 5 72
}

# A simple error dialog.
error() {
	dialog --title "Error!" --msgbox "$*" 10 72
}

# Something isn't supported yet! :-(
not_supported() {
	dialog --title "Sorry!" \
	--msgbox "This feature is not supported in the current version of the \
installation tools.  Barring some sort of fatal accident, we do \
expect it to be in the release.  Please press RETURN to go on." 10 60
}

# Print welcome banner.
welcome() {
	dialog --title "Welcome to FreeBSD" --clear \
--msgbox " We're now ready to install one or more packed distribution
sets onto your machine.  At the minimum, you need a bindist
distribution, though a secrdist is also useful if you want your
system to use the same DES and/or Kerberos security model used
by other commercial systems (the FreeBSD model is md5 based,
and not bad in and of itself though).  The secrdist is also a
bit of a special case since it cannot be legally obtained from
the U.S. due to export restrictions, but non-U.S. versions are
also available.  See the release notes for more information on
obtaining a secrdist for your part of the world.  If you're
interested in doing FreeBSD development, a srcdist is also
highly recommended!" 18 72
	if ! handle_rval $?; then return 1; fi
}

# Get values into $media_type and $media_device.  Call network initialization
# if necessary.
choose_media() {
	while [ "$media_device" = "" ]; do

	dialog --clear --title "Installation From" \
--menu "Before installing a distribution, you need to chose \n\
and/or configure your method of installation.  Please pick from \n\
one of the following options.  If none of the listed options works \n\
for you then your best bet may be to simply hit ESC twice to get \n\
a subshell and proceed manually on your own.  If you are already \n\
finished with installation, select cancel to go on.\n\n\
	Please choose one of the following:" 20 72 5 \
	"Tape" "Load distribution from SCSI or QIC tape" \
	"CDROM" "Load distribution from SCSI or Mitsumi CDROM" \
        "DOS" "Load from DOS floppies or a DOS hard disk partition" \
        "FTP" "Load distribution using FTP" \
        "NFS" "Load the distribution over NFS" 2> ${TMP}/menu.tmp.$$

	retval=$?
	choice=`cat ${TMP}/menu.tmp.$$`
	rm -f ${TMP}/menu.tmp.$$
	if ! handle_rval $retval; then return 1; fi

	case $choice in
	Tape)
		dialog --clear --title "Chose Tape Type" \
--menu "Which type of tape drive do you have attached to your \n\
system?  FreeBSD supports the following types:\n\n\
		Choose one of the following:" 20 72 2 \
		"SCSI" "SCSI tape drive attached to supported SCSI controller" \
		"QIC" "QIC tape drive (Colorado Jumbo, etc)" \
			2> ${TMP}/menu.tmp.$$
		retval=$?
		choice=`cat ${TMP}/menu.tmp.$$`
		rm -f ${TMP}/menu.tmp.$$
		if ! handle_rval $retval; then continue; fi
		media_type=tape;
		case $choice in
			SCSI)
				media_device=/dev/rst0
			;;
			QIC)
				media_device=/dev/rwt0
			;;
		esac
	;;
	CDROM)
		dialog --clear --title "Chose CDROM Type" \
--menu "Which type of CDROM drive do you have attached to your \n\
system?  FreeBSD supports the following types:\n\n\
		Choose one of the following:" 15 72 2 \
		"SCSI" "SCSI CDROM drive attached to supported SCSI controller" \
		"Mitsumi" "Mitsumi CDROM drive" \
			2> ${TMP}/menu.tmp.$$
		retval=$?
		choice=`cat ${TMP}/menu.tmp.$$`
		rm -f ${TMP}/menu.tmp.$$
		if ! handle_rval $retval; then continue; fi
		media_type=cdrom;
		case $choice in
			SCSI)
				media_device=/dev/cd0d
			;;
			Mitsumi)
				media_device=/dev/mcd0d
			;;
		esac
	;;
	DOS)
		not_supported
	;;
	FTP)
		if ! setup_network; then continue; fi
		dialog --title "FTP Installation Information" --clear \
--inputbox "Please specify the machine and directory location of the
distribution you wish to load.  This should be either a \"URL style\"
specification (e.g. ftp://ftp.freeBSD.org/pub/FreeBSD/...) or simply
the name of a host to connect to.  If only a host name is specified,
the installation assumes that you will properly connect and \"mget\"
the files yourself.\n\n" \ 16 72 "$ftp_path" 2> ${TMP}/inputbox.tmp.$$
		if ! handle_rval $?; then continue; fi
		media_type=ftp
		media_device=`cat ${TMP}/inputbox.tmp.$$`
		ftp_path=$media_device
		rm -f ${TMP}/inputbox.tmp.$$
	;;
	NFS)
		if ! setup_network; then continue; fi
		dialog --title "NFS Installation Information" --clear \
--inputbox "Please specify the machine and directory location of the
distribution you wish to load.  This must be in machine:dir
format (e.g. zooey:/a/FreeBSD/bindist).  The remote directory
must be be exported to your machine (or globally) for this to
work!\n\n" \ 14 72 "$nfs_path" 2> ${TMP}/inputbox.tmp.$$
		if ! handle_rval $?; then continue; fi
		media_type=nfs
		nfs_path=`cat ${TMP}/inputbox.tmp.$$`
		if ! mount_nfs $nfs_path /mnt > /dev/ttyv1 2>&1; then
			error "Unable to mount $nfs_path"
		else
			media_device=$nfs_path
			message "$nfs_path mounted successfully"
		fi
	;;
	esac
	done
}

# Set the location of our temporary unpacking directory.
set_tmpdir()
{
	dialog --title "Chose temporary directory" --clear \
--inputbox "Please specify the name of a directory containing enough
free space to hold the temporary files for this distribution.
At minimum, a binary distribution will require around 21MB of
temporary space.  At maximum, a srcdist may take 40MB or more.
If the directory you specify does not exist, it will be created
for you.  If you do not have enough free space to hold both the
packed and unpacked distribution files, consider using the NFS
or CDROM installation methods as they require no temporary
storage.\n\n" \ 18 72 "/usr/tmp" 2> ${TMP}/inputbox.tmp.$$
	if ! handle_rval $?; then return 1; fi
	tmp_dir=`cat ${TMP}/inputbox.tmp.$$`
	rm -f ${TMP}/inputbox.tmp.$$
	mkdir -p $tmp_dir
	return 0
}

cd_tmpdir()
{
	if ! cd $tmp_dir; then
		error "No such file or directory for ${tmp_dir}, sorry!  Please fix this and try again."
		return 1
	fi
}

rm_tmpdir()
{
	if dialog --title "Delete contents?" --clear \
        --yesno "Do you wish to delete the contents of ${tmp_dir}?" 5 72; then
		rm -rf $tmp_dir/*
	fi
}

setup_network_ether()
{
	dialog --clear --title "Ethernet Interface Name" \
	--menu "Please select the type of ethernet interface you have:\n\n" \
	 20 76 6 \
	"ed0" "WD80x3, SMC, Novell NE[21]000 or 3C503 generic NIC at 0x280/5" \
	"ed1" "Same as above, but at address 0x300 and IRQ 5" \
	"ed2" "Same as above, but at address 0x300 and IRQ 10" \
	"ie0" "AT&T StarLan and EN100 family at 0x360 and IRQ 7" \
	"is0" "Isolan 4141-0 or Isolink 4110 at 0x280 and IRQ 7" \
	"ze0" "PCMCIA IBM or National card at 0x300 and IRQ 5" \
	  2> ${TMP}/menu.tmp.$$

	retval=$?
	interface=`cat ${TMP}/menu.tmp.$$`
	rm -f ${TMP}/menu.tmp.$$
	if ! handle_rval $retval; then return 1; fi
}

setup_network_slip()
{
	default_value=""
	if ! network_dialog "What is the IP number for the remote host"; then return 1; fi
	remote_hostip=$answer
	interface=sl0

	default_value=$serial_interface
	if ! network_dialog "What is the name of the serial interface"; then return 1; fi
	serial_interface=$answer

	default_value=$serial_speed
	if ! network_dialog "What speed is the serial interface"; then return 1; fi
	serial_speed=$answer
}

setup_network_plip()
{
	default_value=""
	if ! network_dialog "What is the IP number for the remote host"; then return 1; fi
	remote_hostip=$answer
	interface=lp0
}

network_dialog()
{
	dialog --title "Network Information" --clear \
	--inputbox "$*" 10 60 "$default_value" 2> ${TMP}/inputbox.tmp.$$
	if ! handle_rval $?; then return 1; fi
	answer=`cat ${TMP}/inputbox.tmp.$$`
	rm -f ${TMP}/inputbox.tmp.$$
}

setup_network()
{
	done=0
	while [ "$interface" = "" ]; do
		dialog --clear --title "Set up network interface" \
		--menu "Please select the type of network connection you have:\n\n" \
		20 72 3 \
		"ether" "A supported ethernet card" \
		"SLIP" "A point-to-point SLIP (Serial Line IP) connection" \
		"PLIP" "A Parallel-Line IP setup (sort of like lap-link)" \
		2> ${TMP}/menu.tmp.$$

		retval=$?
		choice=`cat ${TMP}/menu.tmp.$$`
		rm -f ${TMP}/menu.tmp.$$
		if ! handle_rval $retval; then return 1; fi
		case $choice in
		ether)
		if ! setup_network_ether; then continue; fi
	;;

	SLIP)
		if ! setup_network_slip; then continue; fi
	;;

	PLIP)
		if ! setup_network_plip; then continue; fi
	;;
	esac	
	if [ "$interface" = "" ]; then	continue; fi

	default_value=""
	if ! network_dialog "What is the fully qualified name of this host"; then return 1; fi
	hostname=$answer
	echo $hostname > /etc/myname
	hostname $hostname

	default_value=`echo $hostname | sed -e 's/[^.]*\.//'`
	if network_dialog "What is the domain name of this host (Internet, not YP/NIS)"; then
		domain=$answer
	fi

	default_value=""
	if ! network_dialog "What is the IP address of this host"; then return 1; fi
	ipaddr=$answer

        echo "$ipaddr    $hostname `echo $hostname | sed -e s/\.$domain//`" \
             >> /etc/hosts

	default_value="$netmask"
	if network_dialog "Please specify the netmask"; then
		if [ "$answer" != "" ]; then
			netmask=$answer
		fi
	fi

	default_value=""
	if network_dialog "Any extra flags to ifconfig?" ; then
		ifconfig_flags=$answer
	fi
	echo "Progress <$IFCONFIG $interface $ipaddr $remote_hostip netmask $netmask $ifconfig_flags>" >/dev/ttyv1
	if ! $IFCONFIG $interface $ipaddr $remote_hostip netmask $netmask $ifconfig_flags > /dev/ttyv1 2>&1 ; then
		error "Unable to configure interface $interface"
		ipaddr=""; interface=""
		continue
	fi
	if [ "$interface" = "sl0" ]; then
		slattach -a -s $serial_speed $serial_interface
	fi
	rm -f ${TMP}/inputbox.tmp.$$
	echo "$ipaddr $remote_hostip netmask $netmask $ifconfig_flags" > /etc/hostname.$interface
	default_value=""
	if network_dialog "If you have a default gateway, enter its IP address (otherwise cancel)"; then
		if [ "$answer" != "" ]; then
			gateway=$answer
			echo "Progress <$ROUTE $ROUTE_FLAGS $gateway>" > /dev/ttyv1 2>&1
			$ROUTE $ROUTE_FLAGS $gateway > /dev/ttyv1 2>&1
		fi
	fi

	default_value=""
	if network_dialog "If you have a name server, enter its IP address (otherwise cancel)"; then
		if [ "$answer" != "" ]; then
			nameserver=$answer
			echo "nameserver $nameserver" > /etc/resolv.conf
		fi
	fi
	done
}

extract_dist()
{
	if [ -f extract.sh ]; then
		message "Extracting distribution..  Please wait!"
		sh ./extract.sh > /dev/ttyv1 2>&1
	else    
		error "Improper distribution.  No installation script found."  
	fi
}

install_set()
{
	case $media_type in
	tape)
		if ! set_tmpdir; then return; fi
		if ! cd_tmpdir; then return; fi
		confirm "Please mount tape for ${media_device}."
		dialog --title "Results of tape extract" --clear \
			--prgbox "$TAR $TAR_FLAGS $media_device" 10 72
		extract_dist
		rm_tmpdir
	;;

	cdrom)
		if ! mount $media_device /mnt > /dev/ttyv1 2>&1; then
			error "Unable to mount $media_device on /mnt"
		else
			dialog --title "CDROM Information" --clear \
			--inputbox "Directory on CD containing distribution" \
			10 60 "$cdrom_path" 2> ${TMP}/inputbox.tmp.$$
			if ! handle_rval $?; then return; fi
			cdrom_path=`cat ${TMP}/inputbox.tmp.$$`
			rm -f ${TMP}/inputbox.tmp.$$
			cd /mnt/$cdrom_path
			extract_dist
		fi
		return
	;;

	dos)
		if ! set_tmpdir; then return; fi
		if ! cd_tmpdir; then return; fi
		not_supported
		return
	;;
	ftp)
		if ! set_tmpdir; then return; fi
		if ! cd_tmpdir; then return; fi
		if ! echo $media_device | grep -v 'ftp://'; then
			message "Fetching distribution using ncftp.  Use ALT-F2 to see output."
			if ! ncftp $media_device/* > /dev/ttyv1 2>&1; then
				error "Couldn't fetch distribution from ${media_device}!"
			else
				extract_dist
			fi
		else
			dialog --clear
			ftp $media_device
			dialog --clear
			extract_dist
		fi
		rm_tmpdir
		return
	;;

	nfs)
		message "Extracting from NFS directory"
		cd /mnt
		extract_dist
		cd /
		umount /mnt > /dev/tty1 2>&1
		return
	;;
	esac
}

do_last_config()
{
	dialog --title "Auf Wiedersehen!" \
--msgbox "We now come to the end of the installation.  At this point in
time, there's nothing fancy here, but for the release we plan to
ask some additional questions about time zone setup, what sort of
mail client this host is, etc.  We just ran out of time for ALPHA!
At the very least, you may wish to check out the 'tzsetup' command;
it will at least handle the first checklist item for you. \n
The login name \"root\" has no password.  If you're new to UN*X, log
in as root when prompted for a user name and run vipw to add a new
user for yourself.\nAny install-related comments to jkh, phk or paul (@freebsd.org)." 18 72
}

welcome
set_defaults

while [ $installing -eq 1 ]; do
	if choose_media; then
		install_set
		media_device=""; media_type=""
	else
		do_last_config
		installing=0
	fi
done
echo; echo "Spawning shell.  Exit shell to continue with new bindist."
echo "Progress <installation completed>" > /dev/ttyv1
/stand/sh
exit 20
