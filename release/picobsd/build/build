#!/bin/sh -

#
#	$Id: build,v 1.12.2.1 1999/02/22 21:25:15 abial Exp $
#
# You can set the SRC variable which points to your source tree. It's
# /usr/src by default (most people shouldn't change it).
SRC=/usr/src

# --------- YOU SHOULD NOT NEED TO CHANGE ANYTHING BELOW -----------
# The "build" script will ask you for parameters. Just run it... :-)
# --------- YOU SHOULD NOT NEED TO CHANGE ANYTHING BELOW -----------

# EDITOR is the editor you use
EDITOR=${EDITOR:-vi}
# LANGUAGE     language to be used (en or pl)
LANGUAGE=en
# TYPE         PicoBSD type (isp, router, net, custom)
TYPE=${1:-dial}
# SITE         site-specific files
SITE=

# FLOPPY_SIZE  floppy size in KB (default to 1440)
FLOPPY_SIZE=1440

# DEVFS is currently broken. Always set this.
#
NO_DEVFS=yes

# RISU is where dialog replies go.
RISU=.build.reply

# abort in case of error...
set -e

# Build kernel with previously set parameters.

# assign default values to variables.

set_defaults() {

    while read name suff sz init mfs_in floppy_in ; do
	if [ "$name" != "#" -a $name != "" ] ; then
	    eval ${name}_suffix=$suff
	    eval ${name}_DFLT_SIZE=$sz
	    eval ${name}_INIT=$init
	    eval ${name}_MFS_INODES=$mfs_in
	    eval ${name}_FLOPPY_INODES=$floppy_in
	fi
    done <<__eof__
# build	MFS		- Byte/inode -
# name		suffix	DFLT_SZ	init	MFS	FLOPPY
dial		-D	1600	init	4096	32768
router		-R	820	oinit	3072	32768
net		-N	2200	init	4096	32768
isp		-I	2400	init	4096	32768
custom		-C	2400	init	8192	32768
__eof__
}

set_msgs() {
    MSG1="Type: ${TYPE}"
    if [ "X${TYPE}" = "Xcustom" ] ; then
	MSG1="${MSG1} (from ${CUST_DIR})"
    fi

    MSG="PicoBSD build -- Current parameters:\n\n\t1.  ${MSG1}\n\
\t2.  MFS size: ${SIZE} kB\n\t3.  Language: ${LANGUAGE}\n\
\t4.  Site-info: ${SITE}\n"
}


# Main build procedure. It calls another scripts (stage1)
main() {

    export suffix

    clear
    set_msgs
    printf "${MSG}"
    echo "-> We'll use the sources living in ${SRC}"
    echo ""
    echo "-> I hope you have checked the ../${TYPE}/PICOBSD config file..."
    echo ""
    echo ""
    sleep 2

    export SIZE LANGUAGE TYPE SRC NO_DEVFS INIT
    export SITE MFS_INODES FLOPPY_INODES FLOPPY_SIZE

    # Build the kernel, if necessary
    echo ""
    echo "-> Checking if we have to build the PICOBSD kernel..."
    (cd ../${TYPE}; make -f ../build/Makefile.conf )
    echo ""

    ./stage1
    if [ "X$?" != "X0" ] ; then
	echo ""
	echo "-> ERROR in \"${i}\" script. Aborting the build process."
	echo -n "-> Cleaning temporary files... "
	umount -f /mnt
	vnconfig -u /dev/rvn0
	./clean ${TYPE}
	echo "Done."
	exit 10
    fi
    echo "==================== ${i} completed ====================="
}

# check for existing custom config directory and ask user if they want to use it

check_for_old_custom() {
   KEEP_CUSTOM=no
   if [ ! -d ../custom ] ; then
       return
   fi
   clear
   echo "                   Custom directory setup"
   echo ""
   echo "There is an existing custom configuration linked to"
   ls -l ../custom | awk -F\> '{ print $2 }' | awk '{ print $1 }'
   echo ""
   read -p "Do you wish to use the existing custom directory? (yes/no): " KEEP_CUSTOM
}

# Ask for, and set the custom config directory

set_custom() {
    dialog --title "Custom directory setup" --inputbox \
    "Please enter the full path to the directory containing your \
    custom setup. \
    This directory tree must be laid out exactly like the standard \
    ones. (E.g. you can type in /home/abial/work/custom, which \
    should contain crunch1/, floppy.tree/, lang/ )." \
    10 70 2> ${RISU}
    CUST_DIR=`cat ${RISU}`
}

# Set type of floppy interactively. Also set the various defaults
# associated to each type. We can override them manually afterwards.

set_type() {

    eval SIZE=$"${TYPE}_DFLT_SIZE"
    eval INIT=$"${TYPE}_INIT"
    eval MFS_INODES=$"${TYPE}_MFS_INODES"
    eval FLOPPY_INODES=$"${TYPE}_FLOPPY_INODES"
    eval suffix=$"${TYPE}_suffix"

    case ${TYPE} in
    custom)
	check_for_old_custom
	if [ "X${KEEP_CUSTOM}" != "Xyes" ] ; then
	    [ -r ../custom ] && rm -f ../custom
	    set_custom
	    (cd ..; ln -sf ${CUST_DIR} custom)
        fi
	;;
    esac
	
}

#-------------------------------------------------------------------
# Main entry of the script

set_defaults
set_type

# If $1="package", it creates a neat set of floppies

if [ X"$1" = X"package" ] ; then
    shift
    touch build.status
    echo "##############################################" >>build.status
    echo "## `date` ">>build.status
    echo "##############################################" >>build.status
    ./clean dial
    for y in en pl ; do
	for z in dial router net isp ; do
	    TYPE=${z}
	    LANGUAGE=${y}
	    set_type
	    echo "---------------------------------------------">>build.status
	    echo "Building TYPE=${z}, LANGUAGE=${y}, SIZE=${SIZE}" >>build.status
	    main
	    if [ "X$?" != "X0" ] ; then
		echo "	** FAILED! **">>build.status
	    else
		echo "	(ok)">>build.status
	    fi
	    mv picobsd.bin pb_${y}${suffix}.bin
	    echo "Calling ./clean for ${TYPE}, ${LANGUAGE}, ${SIZE}">>build.status
	    ./clean ${TYPE}
	done
    done
    exit 0
fi

# Set build parameters interactively

while [ "X${ans}" != "Xn" ] ; do
    set_msgs
    dialog --menu "PicoBSD build menu -- ver 0.44 (20aug1999)" 19 70 12 \
	1 "${MSG1}" \
	a "init type: ${INIT}" \
	e "edit kernel config file for ${TYPE}" \
	c "edit crunch.conf file for ${TYPE}" \
	2 "MFS size: ${SIZE}kB" \
	3 "Language: ${LANGUAGE}" \
	4 "Site-info: ${SITE}" \
	5 "Floppy size: ${FLOPPY_SIZE}kB" \
	6 "MFS bytes per inode: ${MFS_INODES}" \
	7 "UFS bytes per inode: ${FLOPPY_INODES}" \
	n "no change, build it" q "quit" 2> ${RISU}
    ans=`cat ${RISU}`
    case ${ans} in
    1)
	dialog --menu "Setup the type of configuration" 12 70 5 \
	    dial "dialin (ppp etc.)" \
	    router "router/bridge/mrouter" \
	    net "net admin tool" \
	    isp "isp (ppp and terminal server)" \
	    custom "custom config (need pathname)" 2> ${RISU}
	if [ $? = 0 ]; then
	    TYPE=`cat ${RISU}`
	    set_type
	fi
	;;
    a)
	dialog --menu "Choose your init(8) program" \
	10 70 2 init "Standard init (requires getty)" \
	oinit "small init from TinyWare" 2> ${RISU}
	if [ "$?" = "0" ]; then
	    INIT=`cat ${RISU}`
	fi
	;;

    e) ${EDITOR} ../${TYPE}/PICOBSD ;;
    c) ${EDITOR} ../${TYPE}/crunch1/crunch.conf ;;
    2) dialog --title "MFS Size setup" --inputbox \
"MFS size depends on what you need to put on the MFS image. Typically \
ranges between 800kB (for very small bridge/router images) to \
as much as 2500kB kB for a densely packed image. \
Keep in mind that this memory is \
totally lost to other programs. Usually you want to keep \
this as small as possible. " 10 70 2> ${RISU}
	SIZE=`cat ${RISU}`
	if [ "X${SIZE}" = "X" ] ; then
	    eval SIZE=${TYPE}_DFLT_SIZE
	fi
	;;
    3)      dialog --menu "Please choose language" \
	10 40 2 en English pl Polish 2> ${RISU}
	LANGUAGE=`cat ${RISU}`
	;;
    4) dialog --title "Site info setup" --inputbox \
	"Please enter the full path to the directory \
	containing site-specific setup. \
	This directory tree must contain files that replace \
	standard ones in floppy.tree/ and mfs.tree/ . " \
	10 70 2> ${RISU}
	SITE=`cat ${RISU}`
	;;
    5) dialog --menu "Set floppy size" 15 70 4 \
		1440 "1.44MB" 1720 "1.72MB" \
		2880 "2.88MB" 4096 "4MB" 2> ${RISU}
	FLOPPY_SIZE=`cat ${RISU}`
	;;
    6) dialog --title "MFS bytes per inode:" --inputbox \
	"Enter MFS bytes per inode (typically 4096..65536). \
	A larger value means fewer inodes but more space on MFS" \
	10 70 2> ${RISU}
	MFS_INODES=`cat ${RISU}`
	;;
    7) dialog --title "Floppy bytes per inode:" --inputbox \
	"Enter floppy bytes per inode (typically 3072..65536). \
	A larger value means fewer inodes but more space on the floppy." \
	10 70 2> ${RISU}
	FLOPPY_INODES=`cat ${RISU}`
	;;
    n) ;;
    q) exit 0 ;;
    *) echo "Unknown option \"${ans}\". Try again."
	sleep 2
	clear
	;;
    esac
done

# Call the build procedure
main
# Install if it's ok.
echo ""
if [ "X$?" = "X0" ] ; then
FILENAME=picobsd.bin
    echo "The build process was completed successfuly."
    echo ""
    echo "Now we are going to install the image on the floppy."
    echo "Please insert a blank floppy in /dev/fd0."
    echo "WARNING: the contents of the floppy will be permanently erased!"
    echo "Your options:"
    echo "	* ^C to abort,"
    echo "	* Enter to install \"${FILENAME}\","
    echo "	* name of other file to install."
    echo ""
    read -p "Your choice: " junk
    if [ "X${junk}" != "X" ] ; then
	FILENAME=${junk}
    fi
    echo "Writing ${FILENAME}..."
    dd if=${FILENAME} of=/dev/rfd0
    echo "Done."
fi
exit 0
