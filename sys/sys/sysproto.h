/*
 * System call prototypes.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	syscalls.master,v 1.16 1995/09/19 13:30:51 bde Exp
 */

#ifndef _SYS_SYSPROTO_H_
#define	_SYS_SYSPROTO_H_

#include <sys/types.h>

struct proc;

struct	nosys_args;
int	nosys __P((struct proc *, struct nosys_args *, int []));
struct	rexit_args;
__dead void	exit __P((struct proc *, struct rexit_args *, int []));
struct	fork_args;
int	fork __P((struct proc *, struct fork_args *, int []));
struct	read_args;
int	read __P((struct proc *, struct read_args *, int []));
struct	write_args;
int	write __P((struct proc *, struct write_args *, int []));
struct	open_args;
int	open __P((struct proc *, struct open_args *, int []));
struct	close_args;
int	close __P((struct proc *, struct close_args *, int []));
struct	wait_args;
int	wait4 __P((struct proc *, struct wait_args *, int []));
struct	link_args;
int	link __P((struct proc *, struct link_args *, int []));
struct	unlink_args;
int	unlink __P((struct proc *, struct unlink_args *, int []));
struct	chdir_args;
int	chdir __P((struct proc *, struct chdir_args *, int []));
struct	fchdir_args;
int	fchdir __P((struct proc *, struct fchdir_args *, int []));
struct	mknod_args;
int	mknod __P((struct proc *, struct mknod_args *, int []));
struct	chmod_args;
int	chmod __P((struct proc *, struct chmod_args *, int []));
struct	chown_args;
int	chown __P((struct proc *, struct chown_args *, int []));
struct	obreak_args;
int	obreak __P((struct proc *, struct obreak_args *, int []));
struct	getfsstat_args;
int	getfsstat __P((struct proc *, struct getfsstat_args *, int []));
struct	args;
int	getpid __P((struct proc *, struct args *, int []));
struct	mount_args;
int	mount __P((struct proc *, struct mount_args *, int []));
struct	unmount_args;
int	unmount __P((struct proc *, struct unmount_args *, int []));
struct	setuid_args;
int	setuid __P((struct proc *, struct setuid_args *, int []));
struct	args;
int	getuid __P((struct proc *, struct args *, int []));
struct	args;
int	geteuid __P((struct proc *, struct args *, int []));
struct	ptrace_args;
int	ptrace __P((struct proc *, struct ptrace_args *, int []));
struct	recvmsg_args;
int	recvmsg __P((struct proc *, struct recvmsg_args *, int []));
struct	sendmsg_args;
int	sendmsg __P((struct proc *, struct sendmsg_args *, int []));
struct	recvfrom_args;
int	recvfrom __P((struct proc *, struct recvfrom_args *, int []));
struct	accept_args;
int	accept __P((struct proc *, struct accept_args *, int []));
struct	getpeername_args;
int	getpeername __P((struct proc *, struct getpeername_args *, int []));
struct	getsockname_args;
int	getsockname __P((struct proc *, struct getsockname_args *, int []));
struct	access_args;
int	access __P((struct proc *, struct access_args *, int []));
struct	chflags_args;
int	chflags __P((struct proc *, struct chflags_args *, int []));
struct	fchflags_args;
int	fchflags __P((struct proc *, struct fchflags_args *, int []));
struct	sync_args;
int	sync __P((struct proc *, struct sync_args *, int []));
struct	kill_args;
int	kill __P((struct proc *, struct kill_args *, int []));
struct	args;
int	getppid __P((struct proc *, struct args *, int []));
struct	dup_args;
int	dup __P((struct proc *, struct dup_args *, int []));
struct	pipe_args;
int	pipe __P((struct proc *, struct pipe_args *, int []));
struct	args;
int	getegid __P((struct proc *, struct args *, int []));
struct	profil_args;
int	profil __P((struct proc *, struct profil_args *, int []));
#ifdef KTRACE
struct	ktrace_args;
int	ktrace __P((struct proc *, struct ktrace_args *, int []));
#else
#endif
struct	sigaction_args;
int	sigaction __P((struct proc *, struct sigaction_args *, int []));
struct	args;
int	getgid __P((struct proc *, struct args *, int []));
struct	sigprocmask_args;
int	sigprocmask __P((struct proc *, struct sigprocmask_args *, int []));
struct	getlogin_args;
int	getlogin __P((struct proc *, struct getlogin_args *, int []));
struct	setlogin_args;
int	setlogin __P((struct proc *, struct setlogin_args *, int []));
struct	acct_args;
int	acct __P((struct proc *, struct acct_args *, int []));
struct	sigpending_args;
int	sigpending __P((struct proc *, struct sigpending_args *, int []));
struct	sigaltstack_args;
int	sigaltstack __P((struct proc *, struct sigaltstack_args *, int []));
struct	ioctl_args;
int	ioctl __P((struct proc *, struct ioctl_args *, int []));
struct	reboot_args;
int	reboot __P((struct proc *, struct reboot_args *, int []));
struct	revoke_args;
int	revoke __P((struct proc *, struct revoke_args *, int []));
struct	symlink_args;
int	symlink __P((struct proc *, struct symlink_args *, int []));
struct	readlink_args;
int	readlink __P((struct proc *, struct readlink_args *, int []));
struct	execve_args;
int	execve __P((struct proc *, struct execve_args *, int []));
struct	umask_args;
mode_t	umask __P((struct proc *, struct umask_args *, int []));
struct	chroot_args;
int	chroot __P((struct proc *, struct chroot_args *, int []));
struct	msync_args;
int	msync __P((struct proc *, struct msync_args *, int []));
struct	fork_args;
int	vfork __P((struct proc *, struct fork_args *, int []));
struct	sbrk_args;
int	sbrk __P((struct proc *, struct sbrk_args *, int []));
struct	sstk_args;
int	sstk __P((struct proc *, struct sstk_args *, int []));
struct	ovadvise_args;
int	ovadvise __P((struct proc *, struct ovadvise_args *, int []));
struct	munmap_args;
int	munmap __P((struct proc *, struct munmap_args *, int []));
struct	mprotect_args;
int	mprotect __P((struct proc *, struct mprotect_args *, int []));
struct	madvise_args;
int	madvise __P((struct proc *, struct madvise_args *, int []));
struct	mincore_args;
int	mincore __P((struct proc *, struct mincore_args *, int []));
struct	getgroups_args;
int	getgroups __P((struct proc *, struct getgroups_args *, int []));
struct	setgroups_args;
int	setgroups __P((struct proc *, struct setgroups_args *, int []));
struct	args;
int	getpgrp __P((struct proc *, struct args *, int []));
struct	setpgid_args;
int	setpgid __P((struct proc *, struct setpgid_args *, int []));
struct	setitimer_args;
int	setitimer __P((struct proc *, struct setitimer_args *, int []));
struct	swapon_args;
int	swapon __P((struct proc *, struct swapon_args *, int []));
struct	getitimer_args;
int	getitimer __P((struct proc *, struct getitimer_args *, int []));
struct	getdtablesize_args;
int	getdtablesize __P((struct proc *, struct getdtablesize_args *, int []));
struct	dup2_args;
int	dup2 __P((struct proc *, struct dup2_args *, int []));
struct	fcntl_args;
int	fcntl __P((struct proc *, struct fcntl_args *, int []));
struct	select_args;
int	select __P((struct proc *, struct select_args *, int []));
struct	fsync_args;
int	fsync __P((struct proc *, struct fsync_args *, int []));
struct	setpriority_args;
int	setpriority __P((struct proc *, struct setpriority_args *, int []));
struct	socket_args;
int	socket __P((struct proc *, struct socket_args *, int []));
struct	connect_args;
int	connect __P((struct proc *, struct connect_args *, int []));
struct	getpriority_args;
int	getpriority __P((struct proc *, struct getpriority_args *, int []));
struct	sigreturn_args;
int	sigreturn __P((struct proc *, struct sigreturn_args *, int []));
struct	bind_args;
int	bind __P((struct proc *, struct bind_args *, int []));
struct	setsockopt_args;
int	setsockopt __P((struct proc *, struct setsockopt_args *, int []));
struct	listen_args;
int	listen __P((struct proc *, struct listen_args *, int []));
struct	sigsuspend_args;
int	sigsuspend __P((struct proc *, struct sigsuspend_args *, int []));
struct	gettimeofday_args;
int	gettimeofday __P((struct proc *, struct gettimeofday_args *, int []));
struct	getrusage_args;
int	getrusage __P((struct proc *, struct getrusage_args *, int []));
struct	getsockopt_args;
int	getsockopt __P((struct proc *, struct getsockopt_args *, int []));
#ifdef vax
struct	resuba_args;
int	resuba __P((struct proc *, struct resuba_args *, int []));
#else
#endif
struct	readv_args;
int	readv __P((struct proc *, struct readv_args *, int []));
struct	writev_args;
int	writev __P((struct proc *, struct writev_args *, int []));
struct	settimeofday_args;
int	settimeofday __P((struct proc *, struct settimeofday_args *, int []));
struct	fchown_args;
int	fchown __P((struct proc *, struct fchown_args *, int []));
struct	fchmod_args;
int	fchmod __P((struct proc *, struct fchmod_args *, int []));
struct	setreuid_args;
int	setreuid __P((struct proc *, struct setreuid_args *, int []));
struct	setregid_args;
int	setregid __P((struct proc *, struct setregid_args *, int []));
struct	rename_args;
int	rename __P((struct proc *, struct rename_args *, int []));
struct	flock_args;
int	flock __P((struct proc *, struct flock_args *, int []));
struct	mkfifo_args;
int	mkfifo __P((struct proc *, struct mkfifo_args *, int []));
struct	sendto_args;
int	sendto __P((struct proc *, struct sendto_args *, int []));
struct	shutdown_args;
int	shutdown __P((struct proc *, struct shutdown_args *, int []));
struct	socketpair_args;
int	socketpair __P((struct proc *, struct socketpair_args *, int []));
struct	mkdir_args;
int	mkdir __P((struct proc *, struct mkdir_args *, int []));
struct	rmdir_args;
int	rmdir __P((struct proc *, struct rmdir_args *, int []));
struct	utimes_args;
int	utimes __P((struct proc *, struct utimes_args *, int []));
struct	adjtime_args;
int	adjtime __P((struct proc *, struct adjtime_args *, int []));
struct	args;
int	setsid __P((struct proc *, struct args *, int []));
struct	quotactl_args;
int	quotactl __P((struct proc *, struct quotactl_args *, int []));
#ifdef NFS
struct	nfssvc_args;
int	nfssvc __P((struct proc *, struct nfssvc_args *, int []));
#else
#endif
struct	statfs_args;
int	statfs __P((struct proc *, struct statfs_args *, int []));
struct	fstatfs_args;
int	fstatfs __P((struct proc *, struct fstatfs_args *, int []));
#ifdef NFS
struct	getfh_args;
int	getfh __P((struct proc *, struct getfh_args *, int []));
#else
#endif
struct	getdomainname_args;
int	getdomainname __P((struct proc *, struct getdomainname_args *, int []));
struct	setdomainname_args;
int	setdomainname __P((struct proc *, struct setdomainname_args *, int []));
struct	uname_args;
int	uname __P((struct proc *, struct uname_args *, int []));
struct	sysarch_args;
int	sysarch __P((struct proc *, struct sysarch_args *, int []));
struct	rtprio_args;
int	rtprio __P((struct proc *, struct rtprio_args *, int []));
#ifdef SYSVSEM
struct	semsys_args;
int	semsys __P((struct proc *, struct semsys_args *, int []));
#else
#endif
#ifdef SYSVMSG
struct	msgsys_args;
int	msgsys __P((struct proc *, struct msgsys_args *, int []));
#else
#endif
#ifdef SYSVSHM
struct	shmsys_args;
int	shmsys __P((struct proc *, struct shmsys_args *, int []));
#else
#endif
struct	ntp_adjtime_args;
int	ntp_adjtime __P((struct proc *, struct ntp_adjtime_args *, int []));
struct	setgid_args;
int	setgid __P((struct proc *, struct setgid_args *, int []));
struct	setegid_args;
int	setegid __P((struct proc *, struct setegid_args *, int []));
struct	seteuid_args;
int	seteuid __P((struct proc *, struct seteuid_args *, int []));
#ifdef LFS
struct	lfs_bmapv_args;
int	lfs_bmapv __P((struct proc *, struct lfs_bmapv_args *, int []));
struct	lfs_markv_args;
int	lfs_markv __P((struct proc *, struct lfs_markv_args *, int []));
struct	lfs_segclean_args;
int	lfs_segclean __P((struct proc *, struct lfs_segclean_args *, int []));
struct	lfs_segwait_args;
int	lfs_segwait __P((struct proc *, struct lfs_segwait_args *, int []));
#else
#endif
struct	stat_args;
int	stat __P((struct proc *, struct stat_args *, int []));
struct	fstat_args;
int	fstat __P((struct proc *, struct fstat_args *, int []));
struct	lstat_args;
int	lstat __P((struct proc *, struct lstat_args *, int []));
struct	pathconf_args;
int	pathconf __P((struct proc *, struct pathconf_args *, int []));
struct	fpathconf_args;
int	fpathconf __P((struct proc *, struct fpathconf_args *, int []));
struct	__getrlimit_args;
int	getrlimit __P((struct proc *, struct __getrlimit_args *, int []));
struct	__setrlimit_args;
int	setrlimit __P((struct proc *, struct __setrlimit_args *, int []));
struct	getdirentries_args;
int	getdirentries __P((struct proc *, struct getdirentries_args *, int []));
struct	mmap_args;
int	mmap __P((struct proc *, struct mmap_args *, int []));
struct	lseek_args;
int	lseek __P((struct proc *, struct lseek_args *, int []));
struct	truncate_args;
int	truncate __P((struct proc *, struct truncate_args *, int []));
struct	ftruncate_args;
int	ftruncate __P((struct proc *, struct ftruncate_args *, int []));
struct	sysctl_args;
int	__sysctl __P((struct proc *, struct sysctl_args *, int []));
struct	mlock_args;
int	mlock __P((struct proc *, struct mlock_args *, int []));
struct	munlock_args;
int	munlock __P((struct proc *, struct munlock_args *, int []));
struct	nosys_args;
int	lkmnosys __P((struct proc *, struct nosys_args *, int []));

#ifdef COMPAT_43

struct	ocreat_args;
int	ocreat __P((struct proc *, struct ocreat_args *, int []));
struct	olseek_args;
int	olseek __P((struct proc *, struct olseek_args *, int []));
struct	ostat_args;
int	ostat __P((struct proc *, struct ostat_args *, int []));
struct	olstat_args;
int	olstat __P((struct proc *, struct olstat_args *, int []));
#ifdef KTRACE
#else
#endif
struct	ofstat_args;
int	ofstat __P((struct proc *, struct ofstat_args *, int []));
struct	getkerninfo_args;
int	ogetkerninfo __P((struct proc *, struct getkerninfo_args *, int []));
struct	getpagesize_args;
int	ogetpagesize __P((struct proc *, struct getpagesize_args *, int []));
struct	ommap_args;
int	ommap __P((struct proc *, struct ommap_args *, int []));
struct	wait_args;
int	owait __P((struct proc *, struct wait_args *, int []));
struct	gethostname_args;
int	ogethostname __P((struct proc *, struct gethostname_args *, int []));
struct	sethostname_args;
int	osethostname __P((struct proc *, struct sethostname_args *, int []));
struct	accept_args;
int	oaccept __P((struct proc *, struct accept_args *, int []));
struct	osend_args;
int	osend __P((struct proc *, struct osend_args *, int []));
struct	orecv_args;
int	orecv __P((struct proc *, struct orecv_args *, int []));
struct	osigvec_args;
int	osigvec __P((struct proc *, struct osigvec_args *, int []));
struct	osigblock_args;
int	osigblock __P((struct proc *, struct osigblock_args *, int []));
struct	osigsetmask_args;
int	osigsetmask __P((struct proc *, struct osigsetmask_args *, int []));
struct	osigstack_args;
int	osigstack __P((struct proc *, struct osigstack_args *, int []));
struct	orecvmsg_args;
int	orecvmsg __P((struct proc *, struct orecvmsg_args *, int []));
struct	osendmsg_args;
int	osendmsg __P((struct proc *, struct osendmsg_args *, int []));
#ifdef vax
#else
#endif
struct	recvfrom_args;
int	orecvfrom __P((struct proc *, struct recvfrom_args *, int []));
struct	otruncate_args;
int	otruncate __P((struct proc *, struct otruncate_args *, int []));
struct	oftruncate_args;
int	oftruncate __P((struct proc *, struct oftruncate_args *, int []));
struct	getpeername_args;
int	ogetpeername __P((struct proc *, struct getpeername_args *, int []));
struct	gethostid_args;
int	ogethostid __P((struct proc *, struct gethostid_args *, int []));
struct	sethostid_args;
int	osethostid __P((struct proc *, struct sethostid_args *, int []));
struct	getrlimit_args;
int	ogetrlimit __P((struct proc *, struct getrlimit_args *, int []));
struct	setrlimit_args;
int	osetrlimit __P((struct proc *, struct setrlimit_args *, int []));
struct	okillpg_args;
int	okillpg __P((struct proc *, struct okillpg_args *, int []));
struct	quota_args;
int	oquota __P((struct proc *, struct quota_args *, int []));
struct	getsockname_args;
int	ogetsockname __P((struct proc *, struct getsockname_args *, int []));
#ifdef NFS
#else
#endif
struct	ogetdirentries_args;
int	ogetdirentries __P((struct proc *, struct ogetdirentries_args *, int []));
#ifdef NFS
#else
#endif
#ifdef SYSVSEM
#else
#endif
#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif
#ifdef LFS
#else
#endif

#endif /* COMPAT_43 */

#endif /* !_SYS_SYSPROTO_H_ */
