# Makefile.alpha -- with config changes.
# Copyright 1990 W. Jolitz
#	from: @(#)Makefile.alpha	7.1 5/10/91
# $FreeBSD$
#
# Makefile for FreeBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/alpha/conf/``machineid''
# after which you should do
#	 config machineid
# Generic makefile changes should be made in
#	/sys/alpha/conf/Makefile.alpha
# after which config should be rerun for all machines.
#

# Which version of config(8) is required.
%VERSREQ=	500006

# Can be overridden by makeoptions or /etc/make.conf
KERNEL_KO?=	kernel
KERNEL?=	kernel
KODIR?=		/boot/${KERNEL}
STD8X16FONT?=	iso

.if !defined(S)
.if exists(./@/.)
S=	./@
.else
S=	../../..
.endif
.endif
M=	${MACHINE_ARCH}

SIZE?=		size
OBJCOPY?=	objcopy

COPTFLAGS?=-O -pipe
.if !defined(NO_CPU_COPTFLAGS)
COPTFLAGS+= ${_CPUCFLAGS}
.endif
INCLUDES= -nostdinc -I- ${INCLMAGIC} -I. -I$S -I$S/dev

# This hack lets us use the ipfilter code without spamming a new
# include path into 100+ source files.
INCLUDES+= -I$S/contrib/ipfilter

# This hack is to allow kernel compiles to succeed on machines w/out srcdist
.if exists($S/../include)
INCLUDES+= -I$S/../include
.else
INCLUDES+= -I/usr/include
.endif

COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -include opt_global.h
CFLAGS=	${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS}

# XXX LOCORE means "don't declare C stuff" not "for locore.s".
ASM_CFLAGS= -x assembler-with-cpp -DLOCORE ${CFLAGS}

# Select the correct set of tools. Can't set OBJFORMAT here because it
# doesn't get exported into the environment, and if it were exported
# then it might break building of utilities.
FMT=		-elf
CFLAGS+=	${FMT}

DEFINED_PROF=	${PROF}
.if defined(PROF)
CFLAGS+=	-malign-functions=4
.if ${PROFLEVEL} >= 2
IDENT+=	-DGPROF4 -DGUPROF
PROF+=	-mprofiler-epilogue
.endif
.endif

# Put configuration-specific C flags last (except for ${PROF}) so that they
# can override the others.
CFLAGS+=	${CONF_CFLAGS}

NORMAL_C= ${CC} -c ${CFLAGS} ${PROF} ${.IMPSRC}
NORMAL_C_C= ${CC} -c ${CFLAGS} ${PROF} ${.IMPSRC}
NORMAL_S= ${CC} -c ${ASM_CFLAGS} ${.IMPSRC}
PROFILE_C= ${CC} -c ${CFLAGS} ${.IMPSRC}

NORMAL_M= perl5 $S/kern/makeobjops.pl -c $<; \
	  ${CC} -c ${CFLAGS} ${PROF} ${.PREFIX}.c

GEN_CFILES= $S/$M/$M/genassym.c
SYSTEM_CFILES= param.c vnode_if.c hints.c config.c
SYSTEM_SFILES= $S/$M/$M/locore.s
SYSTEM_DEP= Makefile ${SYSTEM_OBJS}
SYSTEM_OBJS= locore.o vnode_if.o ${OBJS} param.o hints.o config.o hack.So
SYSTEM_LD= @${LD} ${FMT} -Bdynamic -T $S/conf/ldscript.$M \
	-e locorestart \
	-export-dynamic -dynamic-linker /red/herring \
	-o ${.TARGET} -X ${SYSTEM_OBJS} vers.o
SYSTEM_LD_TAIL= @${OBJCOPY} --strip-symbol gcc2_compiled. ${.TARGET} ; \
	${SIZE} ${FMT} ${.TARGET} ; chmod 755 ${.TARGET}
SYSTEM_DEP+= $S/conf/ldscript.$M

%BEFORE_DEPEND

%OBJS

%FILES.c

%FILES.s

%FILES.m

%CLEAN

.PHONY:	all modules
all: ${KERNEL_KO}

depend: kernel-depend
clean:  kernel-clean
cleandepend:  kernel-cleandepend
clobber: kernel-clobber
tags:  kernel-tags
install: kernel-install
install.debug: kernel-install.debug
reinstall: kernel-reinstall
reinstall.debug: kernel-reinstall.debug

.if !defined(DEBUG)
FULLKERNEL=	${KERNEL_KO}
.else
FULLKERNEL=	${KERNEL_KO}.debug
${KERNEL_KO}: ${FULLKERNEL}
	${OBJCOPY} --strip-debug ${FULLKERNEL} ${KERNEL_KO}
.endif

${FULLKERNEL}: ${SYSTEM_DEP} vers.o
	@rm -f ${.TARGET}
	@echo linking ${.TARGET}
	${SYSTEM_LD}
	${SYSTEM_LD_TAIL}

.if !exists(.depend)
${SYSTEM_OBJS}: vnode_if.h ${BEFORE_DEPEND:M*.h} ${MFILES:T:S/.m$/.h/}
.endif

.for mfile in ${MFILES}
${mfile:T:S/.m$/.h/}: ${mfile}
	perl5 $S/kern/makeobjops.pl -h ${mfile}
.endfor

kernel-clean:
	rm -f *.o *.so *.So *.ko *.s eddep errs \
	      ${FULLKERNEL} ${KERNEL_KO} linterrs makelinks param.c \
	      setdef[01].c setdefs.h tags \
	      vers.c vnode_if.c vnode_if.h \
	      ${MFILES:T:S/.m$/.c/} ${MFILES:T:S/.m$/.h/} \
	      ${CLEAN}

kernel-clobber:
	find . -type f ! -name version -delete

#lint: /tmp param.c
#	@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} \
#	  $S/$M/$M/Locore.c ${CFILES} param.c | \
#	    grep -v 'struct/union .* never defined' | \
#	    grep -v 'possible pointer alignment problem'

locore.o: $S/$M/$M/locore.s assym.s
	${NORMAL_S}

# This is a hack.  BFD "optimizes" away dynamic mode if there are no
# dynamic references.  We could probably do a '-Bforcedynamic' mode like
# in the a.out ld.  For now, this works.
hack.So: Makefile
	touch hack.c
	${CC} ${FMT} -shared -nostdlib hack.c -o hack.So
	rm -f hack.c

# this rule stops ./assym.s in .depend from causing problems
./assym.s: assym.s

assym.s: $S/kern/genassym.sh genassym.o
	OBJFORMAT=elf sh $S/kern/genassym.sh genassym.o > ${.TARGET}

genassym.o: $S/$M/$M/genassym.c
	${CC} -c ${CFLAGS} -elf $S/$M/$M/genassym.c

SYSTEM_OBJS+=	__divqu.o __divq.o __divlu.o __divl.o
SYSTEM_OBJS+=	__remqu.o __remq.o __remlu.o __reml.o
CLEAN+=	__divqu.S __divq.S __divlu.S __divl.S
CLEAN+=	__remqu.S __remq.S __remlu.S __reml.S

__divqu.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divqu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divq.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divq')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divlu.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divlu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divl.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divl')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remqu.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remqu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remq.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remq')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remlu.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remlu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__reml.S: $S/$M/$M/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__reml')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

${SYSTEM_OBJS} genassym.o vers.o: opt_global.h

kernel-depend:
	rm -f .olddep
	if [ -f .depend ]; then mv .depend .olddep; fi
	${MAKE} _kernel-depend

_kernel-depend: assym.s param.c vnode_if.h ${BEFORE_DEPEND} \
	    ${CFILES} ${SYSTEM_CFILES} ${GEN_CFILES} ${SFILES} \
	    ${SYSTEM_SFILES} ${MFILES:T:S/.m$/.h/}
	if [ -f .olddep ]; then mv .olddep .depend; fi
	rm -f .newdep
	mkdep -a -f .newdep ${CFLAGS} ${CFILES} ${SYSTEM_CFILES} ${GEN_CFILES}
	env MKDEP_CPP="${CC} -E" \
	    mkdep -a -f .newdep ${ASM_CFLAGS} ${SFILES} ${SYSTEM_SFILES}
	rm -f .depend
	mv .newdep .depend

kernel-cleandepend:
	rm -f .depend

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks; rm -f dontlink

kernel-tags:
	@[ -f .depend ] || { echo "you must make depend first"; exit 1; }
	sh $S/conf/systags.sh
	rm -f tags1
	sed -e 's,      ../,    ,' tags > tags1

kernel-install kernel-install.debug:
.if exists(${DESTDIR}/boot)
	@if [ ! -f ${DESTDIR}/boot/device.hints ] ; then \
		echo "You must set up a ${DESTDIR}/boot/device.hints file first." ; \
		exit 1 ; \
	fi
	@if [ x"`grep device.hints ${DESTDIR}/boot/defaults/loader.conf ${DESTDIR}/boot/loader.conf`" = "x" ]; then \
		echo "You must activate /boot/device.hints in loader.conf." ; \
		exit 1 ; \
	fi
.endif
	@if [ ! -f ${KERNEL_KO}${.TARGET:S/kernel-install//} ] ; then \
		echo "You must build a kernel first." ; \
		exit 1 ; \
	fi
.if exists(${DESTDIR}${KODIR})
.if exists(${DESTDIR}${KODIR}.old)
	@-chflags -R noschg ${DESTDIR}${KODIR}.old
	-rm -rf ${DESTDIR}${KODIR}.old
.endif
	mv ${DESTDIR}${KODIR} ${DESTDIR}${KODIR}.old
.endif
	mkdir -p ${DESTDIR}${KODIR}
	install -c -m 555 -o root -g wheel \
		${KERNEL_KO}${.TARGET:S/kernel-install//} ${DESTDIR}${KODIR}

kernel-reinstall kernel-reinstall.debug:
	@-chflags -R noschg ${DESTDIR}${KODIR}
	install -c -m 555 -o root -g wheel \
		${KERNEL_KO}${.TARGET:S/kernel-reinstall//} ${DESTDIR}${KODIR}

.if !defined(MODULES_WITH_WORLD) && !defined(NO_MODULES) && exists($S/modules)
all:	modules
depend: modules-depend
clean:  modules-clean
cleandepend:  modules-cleandepend
cleandir:  modules-cleandir
clobber:  modules-clobber
tags:  modules-tags
install: modules-install
install.debug: modules-install.debug
reinstall: modules-reinstall
reinstall.debug: modules-reinstall.debug
.endif

MKMODULESENV=	MAKEOBJDIRPREFIX=${.OBJDIR}/modules KMODDIR=${KODIR}
.if defined(MODULES_OVERRIDE)
MKMODULESENV+=	MODULES_OVERRIDE="${MODULES_OVERRIDE}"
.endif

modules:
	@mkdir -p ${.OBJDIR}/modules
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} obj ; \
	    env ${MKMODULESENV} ${MAKE} all

modules-depend:
	@mkdir -p ${.OBJDIR}/modules
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} obj ; \
	    env ${MKMODULESENV} ${MAKE} depend

modules-clean:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} clean

modules-cleandepend:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} cleandepend

modules-clobber:	modules-clean
	rm -rf ${MKMODULESENV}

modules-cleandir:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} cleandir

modules-tags:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} tags

modules-install modules-install.debug:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} install

modules-reinstall modules-reinstall.debug:
	cd $S/modules ; env ${MKMODULESENV} ${MAKE} install

config.o:
	${NORMAL_C}

param.c: $S/conf/param.c
	-rm -f param.c
	cp $S/conf/param.c .

param.o:
	${NORMAL_C}

vers.c: $S/conf/newvers.sh $S/sys/param.h ${SYSTEM_DEP}
	sh $S/conf/newvers.sh ${KERN_IDENT} ${IDENT}

# XXX strictly, everything depends on Makefile because changes to ${PROF}
# only appear there, but we don't handle that.
vers.o:
	${NORMAL_C}

hints.o:	hints.c
	${NORMAL_C}

vnode_if.c: $S/kern/vnode_if.pl $S/kern/vnode_if.src
	perl5 $S/kern/vnode_if.pl -c $S/kern/vnode_if.src

vnode_if.h: $S/kern/vnode_if.pl $S/kern/vnode_if.src
	perl5 $S/kern/vnode_if.pl -h $S/kern/vnode_if.src

vnode_if.o:
	${NORMAL_C}

.if exists($S/../share/mk)
.include "$S/../share/mk/bsd.kern.mk"
.else
.include <bsd.kern.mk>
.endif

%RULES

# DO NOT DELETE THIS LINE -- make depend uses it
