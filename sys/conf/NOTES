#
# LINT -- config file for checking all the sources, tries to pull in
#	as much of the source tree as it can.
#
#	$Id: LINT,v 1.132 1995/01/27 07:48:59 phk Exp $
#
# NB: You probably don't want to try running a kernel built from this
# file.  Instead, you should start from GENERIC, and add options from
# this file as required.
#

#
# This directive is mandatory; it defines the architecture to be
# configured for; in this case, the 386 family.  You must also specify
# at least one CPU (the one you intend to run on); deleting the
# specification for CPUs you don't need to use may make parts of the
# system run faster
#
machine		"i386"
cpu		"I386_CPU"
cpu		"I486_CPU"
cpu		"I586_CPU"		# a/k/a Pentium(tm)

# 
# This is the ``identification'' of the kernel.  Usually this should
# be the same as the name of your kernel.
#
ident		LINT

#
# The `maxusers' parameter controls the static sizing of a number of
# internal system tables by a complicated formula defined in param.c.
#
maxusers	10

#
# Under some circumstances it is necessary to make the default max
# number of proccesses per user and open files per user more than the
# defaults on bootup.  (an example is a large news server in which
# the uid, news, can sometimes need > 100 simultaneous processes running)
options		"CHILD_MAX=128"
options		"OPEN_MAX=128"

#
# A math emulator is mandatory if you wish to run on hardware which
# does not have a floating-point processor.  Pick either the original,
# bogus (but freely-distributable) math emulator, or a much more
# fully-featured but GPL-licensed emulator taken from Linux.
#
options		MATH_EMULATE		#Support for x87 emulation
#options        GPL_MATH_EMULATE        #Support for x87 emualtion via
                                        #new math emulator 

#
# This directive defines a number of things:
#  - The compiled kernel is to be called `kernel'
#  - The root filesystem might be on partition wd0a
#  - The kernel can swap on wd0b and sd0b, defaulting to the former
#  - Crash dumps will be written to wd0b, if possible
#
config		kernel	root on wd0 swap on wd0 and sd0 dumps on wd0


#####################################################################
# COMPATIBILITY OPTIONS                                             

#
# Implement system calls compatible with 4.3BSD and older versions of
# FreeBSD.
#
options		"COMPAT_43"

#
# Allow user-mode programs to manipulat their local descriptor tables.
# This option is required for the WINE Windows(tm) emulator, and is
# not used by anything else (that we know of).
#
options		USER_LDT		#allow user-level control of i386 ldt

#
# These three options provide support for System V Interface
# Definition-style interprocess communication, in the form of shared
# memory, semaphores, and message queues, respectively.
#
options		SYSVSHM
options		SYSVSEM
options		SYSVMSG


#####################################################################
# DEBUGGING OPTIONS

#
# Enable the kernel debugger.
#
options		DDB

#
# Enable dumping of the kernel image to swap for panics.  This is not
# the default because writing to misconfigured swap may wipe out file
# systems.
#
options		DODUMP

# 
# KTRACE enables the system-call tracing facility ktrace(2).
#
options		KTRACE			#kernel tracing

#
# The DIAGNOSTIC option is used in a number of source files to enable
# extra sanity checking of internal structures.  This support is not
# enabled by default because of the extra time it would take to check
# for these conditions, which can only occur as a result of
# programming errors.
#
options		DIAGNOSTIC

#
# Allow ordinary users to take the console - this is useful for X.
options		UCONSOLE


#####################################################################
# NETWORKING OPTIONS

#
# Protocol families:
#  Only the INET (Internet) family is officially supported in FreeBSD.
#  Source code for the NS (Xerox Network Service), ISO (OSI), and
#  CCITT (X.25) families is provided for amusement value, although we
#  try to ensure that it actually compiles.
#
options		INET			#Internet communications protocols
options		ISO
options		CCITT			#X.25 network layer
options		NS			#Xerox NS communications protocols
options		TPIP			#ISO TP class 4 over IP
options		TPCONS			#ISO TP class 0 over X.25

#
# Network interfaces:
#  The `loop' pseudo-device is mandatory when networking is enabled.
#  The `ether' pseudo-device provides generic code to handle
#  Ethernets; it is mandatory when a Ethernet device driver is
#  configured.
#  The `sppp' pseudo-device serves a similar role for certain types
#  of synchronous PPP links (like `cx').
#  The `sl' pseudo-device implements the Serial Line IP (SLIP) service.
#  The `ppp' pseudo-device implements the Point-to-Point Protocol.
#  The `bpfilter' pseudo-device enables the Berkeley Packet Filter.  Be
#  aware of the legal and administrative consequences of enabling this
#  option.  The number of devices determines the maximum number of
#  simultaneous BPF clients programs runnable.
#  The `disc' pseudo-device implements a minimal network interface,
#  which throws away all packets sent and never receives any.  It is
#  included for testing purposes.
#
pseudo-device	ether			#Generic Ethernet
pseudo-device	sppp			#Generic Synchronous PPP
pseudo-device	loop			#Network loopback device
pseudo-device	sl	2		#Serial Line IP
pseudo-device	ppp	2		#Point-to-point protocol
pseudo-device	bpfilter	4	#Berkeley packet filter
pseudo-device	disc			#Discard device

options		NSIP			#XNS over IP
options		EON			#ISO CLNP over IP
options		LLC			#X.25 link layer for Ethernets
options		HDLC			#X.25 link layer for serial lines

#
# Internet family options:
#
# TCP_COMPAT_42 causes the TCP code to emulate certain bugs present in
# 4.2BSD.  This option should not be used unless you have a 4.2BSD
# machine and TCP connections fail.
#
# GATEWAY allows the machine to forward packets, and also configures
# larger static sizes of a number of system tables.
#
# MROUTING enables the kernel multicast packet forwarder, which works
# with mrouted(8).
#
# IPFIREWALL enables support for IP firewall construction, in
# conjunction with the `ipfw' program.  IPFIREWALL_VERBOSE does
# the obvious thing.
#
# ARP_PROXYALL enables global proxy ARP.  Beware!  This can burn
# your house down!  See netinet/if_ether.c for the gory details.
# (Eventually there will be a better management interface.)
#
options		"TCP_COMPAT_42"		#emulate 4.2BSD TCP bugs
options		GATEWAY			#internetwork gateway
options		MROUTING		# Multicast routing
options         IPFIREWALL              #firewall
options         IPFIREWALL_VERBOSE      #print information about
					# dropped packets
options		ARP_PROXYALL		# global proxy ARP


#####################################################################
# FILESYSTEM OPTIONS

#
# Only the root, /usr, and /tmp filesystems need be statically
# compiled; everything else will be automatically loaded at mount
# time.  (Exception: the UFS family---FFS, MFS, and LFS---cannot
# currently be demand-loaded.)  Some people still prefer to statically
# compile other filesystems as well.
#
# NB: The LFS, PORTAL, and UNION filesystems are known to be buggy,
# and WILL panic your system if you attempt to do anything with them.
# They are included here as an incentive for some enterprising soul to
# sit down and fix them.
#

# One of these is mandatory:
options		FFS			#Fast filesystem
options		NFS			#Network File System

# The rest are optional:
options		"CD9660"		#ISO 9660 filesystem
options		FDESC			#File descriptor filesystem
options		KERNFS			#Kernel filesystem
options		LFS			#Log filesystem
options		MFS			#Memory File System
options		MSDOSFS			#MS DOS File System
options		NULLFS			#NULL filesystem
options		PORTAL			#Portal filesystem
options		PROCFS			#Process filesystem
options		UMAPFS			#UID map filesystem
options		UNION			#Union filesystem

#
# Disk quotas are supported when this option is enabled.  If you
# change the value of this option, you must do a `make clean' in your
# kernel compile directory in order to get a working kernel.
#
options		QUOTA			#enable disk quotas


#####################################################################
# SCSI DEVICE CONFIGURATION

#
# The SCSI subsystem consists of the `base' SCSI code, a number of
# high-level SCSI device drivers, and the low-level host-adapter
# device drivers.  The host adapters are listed in the ISA and PCI
# device configuration sections below.
#
# Note that, unlike most similar systems, the FreeBSD SCSI system
# does not wire a particular device unit number to any specific
# SCSI bus unit number.  Rather, unit numbers are assigned in the
# order that the devices are found on the SCSI bus.  (This means that
# if you remove a disk drive, you may have to rewrite your /etc/fstab
# file.)  It is expected that this will change for FreeBSD 2.1.
#
controller	scbus0	#base SCSI code
device		ch0	#SCSI media changers
device		sd0	#SCSI disks
device		st0	#SCSI tapes
device		uk0			#unknown scsi devices

#
# The `cd' (SCSI read-only removable disk) driver is special in that
# the code dynamically allocates more units as they are required, with
# no limit (other than memory) to the number available.
device		cd0	#SCSI CD-ROMs


#####################################################################
# MISCELLANEOUS DEVICES AND OPTIONS

#
# Of these, only the `log' device is truly mandatory.  The `pty'
# device usually turns out to be ``effectively mandatory'', as it is
# required for `telnetd', `rlogind', `screen', `emacs', and `xterm',
# among others.
#
pseudo-device	pty	4	#Pseudo ttys
pseudo-device	speaker		#Play IBM BASIC-style noises out your speaker
pseudo-device	log		#Kernel syslog interface (/dev/klog)
pseudo-device	gzip		#Exec gzipped a.out's
pseudo-device	vn		#Vnode driver (turns a file into a device)


#####################################################################
# HARDWARE DEVICE CONFIGURATION

# ISA and EISA devices:
# Currently there is no separate support for EISA.  There should be.
# Micro Channel is not supported at all.

#
# Mandatory ISA devices: isa, sc, npx
#
controller	isa0

#
# Options for `isa':
#
# ALLOW_CONFLICT_DRQ suppresses the DMA conflict checks.  This option is
# not known to be good for anything.
#
# ALLOW_CONFLICT_IOADDR suppresses the I/O address conflict checks, so
# that the PS/2 mouse driver doesn't conflict with the console driver.
#
# ALLOW_CONFLICT_IRQ suppresses the interrupt line conflict checks, so
# that multiple devices can share the same IRQ, provided that the
# hardware supports it (it usually doesn't).
#
# ALLOW_CONFLICT_MEMADDR suppresses the memory address conflict checks.
# This option is not known to be good for anything.
#
# AUTO_EOI_1 enables the `automatic EOI' feature for the master 8259A
# interrupt controller.  This saves about 1.25 usec for each interrupt.
# No problems are known to be caused by this option.
#
# AUTO_EOI_2 enables the `automatic EOI' feature for the slave 8259A
# interrupt controller.  This saves about 1.25 usec for each interrupt.
# Automatic EOI is documented not to work for for the slave with the
# original i8259A, but it works for some clones and some integrated
# versions.
#
# BOUNCE_BUFFERS provides support for ISA DMA on machines with more
# than 16 megabytes of memory.  It doesn't hurt on other machines.
# Some broken EISA and VLB hardware may need this, too.
#
# DISKSLICE provides support for slicing up a disk into virtual disks.
# It isn't really ISA-specific, but the on-disk slice table is currently
# required to be a DOS partition table.
#
# DUMMY_NOPS disables extra delays for some bus operations.  The delays
# are mostly for older systems and aren't used consistently.  Probably
# works OK on most EISA bus machines.
#
# TUNE_1542 enables the automatic ISA bus speed selection for the
# Adaptec 1542 boards. Does not work for all boards, use it with caution.
#
#options	ALLOW_CONFLICT_DRQ
#options	ALLOW_CONFLICT_IOADDR
#options	ALLOW_CONFLICT_IRQ
#options	ALLOW_CONFLICT_MEMADDR
options		"AUTO_EOI_1"
#options	"AUTO_EOI_2"
options		BOUNCE_BUFFERS
options		DISKSLICE
#options	DUMMY_NOPS
#options	TUNE_1542

device		sc0	at isa? port "IO_KBD" tty irq 1 vector scintr

#
# Options for `sc':
#
# HARDFONTS allows the driver to load an ISO-8859-1 font to replace
# the default font in your display adapter's memory.
#
options		HARDFONTS
#
# MAXCONS is maximum number of virtual consoles, no more than 16
# default value: 12
#
options         "MAXCONS=16"

device		npx0	at isa? port "IO_NPX" irq 13 vector npxintr

#
# Optional ISA and EISA devices:
#

#
# SCSI host adapters: `aha', `ahb', `aic', `bt', `nca'
#
# aha: Adaptec 154x
# ahb: Adaptec 174x
# ahc: Adaptec 274x
# aic: Adaptec 152x and sound cards using the Adaptec AIC-6360 (slow!)
# bt: Most Buslogic controllers
# nca: ProAudioSpectrum cards using the NCR 5380 or Trantor T130
# uha: UltraStore 14F and 34F
# sea: Seagate ST01/02 8 bit controller (slow!)
# wds: Western Digital WD7000 controller (no scatter/gather!).
#
# Note that the order is important in order for Buslogic cards to be
# probed correctly.
#

controller	bt0	at isa? port "IO_BT0" bio irq ? vector btintr
controller	ahc0	at isa? bio irq ? vector ahcintr # port??? iomem?
controller	ahb0	at isa? bio irq ? vector ahbintr
controller	aha0	at isa? port "IO_AHA0" bio irq ? drq 5 vector ahaintr
controller	uha0	at isa? port "IO_UHA0" bio irq ? drq 5 vector uhaintr

controller      aic0    at isa? port 0x340 bio irq 11 vector aicintr
controller	nca0	at isa? port 0x1f88 bio irq 10 vector ncaintr
controller	nca1	at isa? port 0x1f84
controller	nca2	at isa? port 0x1f8c
controller	nca3	at isa? port 0x1e88
controller	nca4	at isa? port 0x350 bio irq 5 vector ncaintr

controller	sea0	at isa? bio irq 5 iomem 0xdc000 iosiz 0x2000 vector seaintr
controller	wds0	at isa? port 0x350 bio irq 15 drq 6 vector wdsintr

#
# ST-506, ESDI, and IDE hard disks: `wdc' and `wd'
#
# NB: ``Enhanced IDE'' is NOT supported at this time.
#
controller	wdc0	at isa? port "IO_WD1" bio irq 14 vector wdintr
disk		wd0	at wdc0 drive 0
disk		wd1	at wdc0 drive 1
controller	wdc1	at isa? port "IO_WD2" bio irq 15 vector wdintr
disk		wd2	at wdc1 drive 0
disk		wd3	at wdc1 drive 1

#
# Standard floppy disk controllers and floppy tapes: `fdc', `fd', and `ft'
#
controller	fdc0	at isa? port "IO_FD1" bio irq 6 drq 2 vector fdintr
disk		fd0	at fdc0 drive 0
disk		fd1	at fdc0 drive 1
tape		ft0	at fdc0 drive 2

#
# Options for `fd':
#
# FDSEEKWAIT selects a non-default head-settle time (i.e., the time to
# wait after a seek is performed).  The default value (1/32 s) is
# usually sufficient.  The units are inverse seconds, so a value of 16
# here means to wait 1/16th of a second; you should choose a power of
# two.
#
options	FDSEEKWAIT="16"

#
# Other standard PC hardware: `lpt', `mse', `psm', `sio', etc.
#
# lpt: printer port
# mse: Logitech and ATI InPort bus mouse ports
# psm: PS/2 mouse port (needs ALLOW_CONFLICT_IOADDR, above)
# sio: serial ports (see sio(4))
# gp:  National Instruments AT-GPIB and AT-GPIB/TNT board
# gsc: Genius GS-4500 hand scanner.
# joy: joystick

device		lpt0	at isa? port "IO_LPT3" tty irq 7 vector lptintr
device		mse0	at isa? port 0x23c tty irq 5 vector mseintr
device		psm0	at isa? port "IO_KBD" tty irq 12 vector psmintr
device		sio0	at isa? port "IO_COM1" tty irq 4 vector siointr
device		gp0	at isa? port 0x2c0 tty
device		gsc0	at isa? port "IO_GSC1" tty drq 3
device		joy0	at isa? port "IO_GAME"

# Options for sio:
options		COMCONSOLE		#prefer serial console to video console
options		COM_MULTIPORT		#code for some cards with shared IRQs
options		DSI_SOFT_MODEM		#code for DSI Softmodems

#
# Network interfaces: `cx', `ed', `el', `ep', `ie', `is', `le', `lnc'
#
# cx: Cronyx/Sigma multiport sync/async (with Cisco or PPP framing)
# ed: Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503
# el: 3Com 3C501 (slow!)
# ep: 3Com 3C509 (buggy)
# ie: AT&T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210
# le: Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100,
#     DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)
# lnc: Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)
# ze: PCMCIA ethernet controller.
#

device cx0 at isa? port 0x240 net irq 15 drq 7 vector cxintr
device ed0 at isa? port 0x280 net irq 5 iomem 0xd8000 vector edintr
device ie0 at isa? port 0x360 net irq 7 iomem 0xd0000 vector ieintr
device lnc0 at isa? port 0x280 net irq 10 drq 0 vector lncintr
device ep0 at isa? port 0x300 net irq 10 vector epintr
device el0 at isa? port 0x300 net irq 9 vector elintr
device le0 at isa? port 0x300 net irq 5 iomem 0xd0000 vector le_intr
device ze0 at isa? port 0x300 net irq 5 iomem 0xd8000 vector zeintr

#
# Audio drivers: `snd', `pca'
#
# snd: Voxware sound drivers for various cards (see file `sound.doc')
# pca: PCM audio through your PC speaker
#
# Someday, Voxware configuration will be done properly.
#
device snd5 at isa? port 0x330 irq 6 vector mpuintr
device snd4 at isa? port 0x220 irq 15 drq 6 vector gusintr
device snd3 at isa? port 0x388 irq 10 drq 6 vector pasintr
device snd2 at isa? port 0x220 irq 7 drq 1 vector sbintr
device snd6 at isa? port 0x220 irq 7 drq 5 vector sbintr
device snd7 at isa? port 0x300
device snd1 at isa? port 0x388

device pca0 at isa? tty

#
# Miscellaneous hardware: `mcd', `wt', `ctx', `apm'
#
# mcd: Mitsumi CD-ROM
# scd: Sony CD-ROM
# pcd: Panasonic CD-ROM
# wt: Wangtek and Archive QIC-02/QIC-36 tape drives
# ctx: Cortex-I frame grabber
# apm: Laptop Advanced Power Management (experimental)
#

device		mcd0	at isa? port 0x300 bio irq 10 vector mcdintr
# for the soundblaster 16 multicd
device		scd0	at isa? port 0x230 bio
# for the soundblaster 16 multicd
device		pcd0	at isa? port 0x220 bio
device		wt0	at isa? port 0x300 bio irq 5 drq 1 vector wtintr
device		ctx0	at isa? port 0x230 iomem 0xd0000

# NB: both lines are required
device		apm0	at isa?
options		APM

#
# PCI devices:
#
# The main PCI bus device is `pci'.  It provides auto-detection and
# configuration support for all devices on the PCI bus, using either
# configuration mode defined in the PCI specification.
#
# The `ncr' device provides support for the NCR 53C810 and 53C825
# self-contained SCSI host adapters.
#
# The `de' device provides support for the Digital Equipment DC21040
# self-contained Ethernet adapter.
#
# The PROBE_VERBOSE option enables a long listing of chip set registers
# for supported PCI chip sets (currently only intel Saturn and Mercury).
# 
controller	pci0
device		ncr0
device		de0
options		PROBE_VERBOSE
