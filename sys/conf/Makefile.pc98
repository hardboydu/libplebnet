# Makefile for FreeBSD(98) after:
#
# Makefile.i386 -- with config changes.
# Copyright 1990 W. Jolitz
#	from: @(#)Makefile.i386	7.1 5/10/91
#	$Id: Makefile.pc98,v 1.40 1998/09/22 16:11:08 kato Exp $
#
# Makefile for FreeBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/i386/conf/``machineid''
# after which you should do
#	 config machineid
# Generic makefile changes should be made in
#	/sys/i386/conf/Makefile.i386
# after which config should be rerun for all machines.
#

# Which version of config(8) is required.
%VERSREQ=	300007

KERNFORMAT?=	aout

#STD8X16FONT?=	iso

.if exists(./@/.)
S=	./@
.else
S=	../..
.endif
PC98=	${S}/pc98
I386=	${S}/i386

COPTFLAGS?=-O
INCLUDES= -nostdinc -I- -I. -I$S
# This hack is to allow kernel compiles to succeed on machines w/out srcdist
.if exists($S/../include)
INCLUDES+= -I$S/../include
.else
INCLUDES+= -I/usr/include
.endif
COPTS=	${INCLUDES} ${IDENT} -DKERNEL -include opt_global.h
CFLAGS=	${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS}

# XXX LOCORE means "don't declare C stuff" not "for locore.s".
ASM_CFLAGS= -x assembler-with-cpp -DLOCORE ${CFLAGS}

# Use the default object format for genassym, etc.
GEN_CFLAGS= ${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS}

# Select the correct set of tools. Can't set OBJFORMAT here because it
# doesn't get exported into the environment, and if it were exported
# then it might break building of genassym, etc.
.if ${KERNFORMAT} == "elf"
CFLAGS+=	-elf
.else
CFLAGS+=	-aout
.endif

LOAD_ADDRESS?=	F0100000
DEFINED_PROF=	${PROF}
.if defined(PROF)
CFLAGS+=	-malign-functions=4
.if ${PROFLEVEL} >= 2
IDENT+=	-DGPROF4 -DGUPROF
PROF+=	-mprofiler-epilogue
.endif
.endif

NORMAL_C= ${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C= ${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_S= ${CC} -c ${ASM_CFLAGS} $<
DRIVER_C= ${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C= ${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_S= ${CC} -c -x ${ASM_CFLAGS} $<
PROFILE_C= ${CC} -c ${CFLAGS} $<

GEN_CFILES= ${I386}/i386/genassym.c ${I386}/i386/gensetdefs.c
# ${I386}/i386/setdef0.c and ${I386}/i386/setdef1.c are intentionally
# omitted from SYSTEM_CFILES.  They include setdefs.h, a header which
# is generated from all of ${OBJS}.  We don't want to have to compile
# everything just to do a make depend.
SYSTEM_CFILES= ioconf.c param.c vnode_if.c config.c
SYSTEM_SFILES= ${I386}/i386/locore.s
SYSTEM_DEP= Makefile symbols.exclude symbols.sort ${SYSTEM_OBJS}
.if ${CFLAGS:M-g} == ""
SYMORDER_EXCLUDE=-x symbols.exclude
.endif
SYSTEM_LD_HEAD= @echo loading ${.TARGET}; rm -f ${.TARGET}
.if ${KERNFORMAT} == aout
SYSTEM_OBJS= locore.o vnode_if.o ${OBJS} ioconf.o param.o config.o
SYSTEM_LD= @${LD} -aout -Bstatic -Z -T ${LOAD_ADDRESS} -o ${.TARGET} -X ${SYSTEM_OBJS} vers.o
SYSTEM_LD_TAIL= @echo rearranging symbols; \
	symorder -m ${SYMORDER_EXCLUDE} symbols.sort ${.TARGET}; \
	size -aout ${.TARGET} ; chmod 755 ${.TARGET}
.endif
.if ${KERNFORMAT} == aoutkld
SYSTEM_OBJS= locore.o vnode_if.o ${OBJS} ioconf.o param.o config.o
SYSTEM_LD= @${LD} -aout -Bforcedynamic -Z -T ${LOAD_ADDRESS} -o ${.TARGET} -X ${SYSTEM_OBJS} vers.o
SYSTEM_LD_TAIL= @echo rearranging symbols; \
	symorder -m ${SYMORDER_EXCLUDE} symbols.sort ${.TARGET}; \
	size -aout ${.TARGET} ; chmod 755 ${.TARGET}
.endif
.if ${KERNFORMAT} == elf
# kld compatable export of symbols.
SYSTEM_OBJS= locore.o setdef0.o vnode_if.o ${OBJS} ioconf.o param.o config.o \
	setdef1.o hack.so
SYSTEM_LD= @${LD} -elf -Bdynamic -T $S/i386/conf/kernel.script \
	-export-dynamic -dynamic-linker /red/herring \
	-o ${.TARGET} -X ${SYSTEM_OBJS} vers.o
SYSTEM_LD_TAIL= @size -elf ${.TARGET} ; chmod 755 ${.TARGET}
SYSTEM_DEP+= $S/i386/conf/kernel.script
.endif

%BEFORE_DEPEND

%OBJS

%CFILES

%SFILES

%MFILES

%LOAD

%CLEAN

clean:
	rm -f *.o *.s eddep errs genassym gensetdefs kernel linterrs \
	      makelinks param.c setdefs.h symbols.exclude symbols.sort tags \
	      vers.c vnode_if.c vnode_if.h ${CLEAN}

#lint: /tmp param.c
#	@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} \
#	  ${I386}/i386/Locore.c ${CFILES} ioconf.c param.c | \
#	    grep -v 'struct/union .* never defined' | \
#	    grep -v 'possible pointer alignment problem'

symbols.exclude:
	echo "gcc2_compiled." >symbols.exclude
	echo "___gnu_compiled_c" >>symbols.exclude

symbols.sort: ${I386}/i386/symbols.raw
	grep -v '^#' ${I386}/i386/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: ${I386}/i386/locore.s assym.s
	${NORMAL_S}

.if ${KERNFORMAT} == elf
# This is a hack.  BFD "optimizes" away dynamic mode if there are no
# dynamic references.  We could probably do a '-Bforcedynamic' mode like
# in the a.out ld.  For now, this works.
hack.so: Makefile
	touch hack.c
	${CC} -elf -shared -nostdlib hack.c -o hack.so
	rm -f hack.c
.endif

setdef0.o: ${I386}/i386/setdef0.c setdefs.h
	${NORMAL_C}

setdef1.o: ${I386}/i386/setdef1.c setdefs.h
	${NORMAL_C}

setdefs.h: gensetdefs ${OBJS}
	./gensetdefs ${OBJS} >setdefs.h

gensetdefs: gensetdefs.o
	${CC} ${GEN_CFLAGS} gensetdefs.o -o ${.TARGET}

gensetdefs.o: ${I386}/i386/gensetdefs.c
	${CC} -c ${GEN_CFLAGS} ${I386}/i386/gensetdefs.c

# this rule stops ./assym.s in .depend from causing problems
./assym.s: assym.s

assym.s: genassym
	./genassym >assym.s

genassym.o: ${I386}/i386/genassym.c
	rm -f ./machine ; ln -s ${I386}/include ./machine
	${CC} -c ${GEN_CFLAGS} ${I386}/i386/genassym.c

genassym: genassym.o
	${CC} ${GEN_CFLAGS} genassym.o -o ${.TARGET}

${SYSTEM_OBJS} genassym.o gensetdefs.o vers.o: opt_global.h

# XXX this assumes that the options for NORMAL_C* and DRIVER_C* are identical.
depend: assym.s param.c vnode_if.h ${BEFORE_DEPEND}
	rm -f .newdep
	mkdep -a -f .newdep ${CFLAGS} ${CFILES} ${SYSTEM_CFILES}
	mkdep -a -f .newdep ${GEN_CFLAGS} ${GEN_CFILES}
	env MKDEP_CPP="${CC} -E" \
	    mkdep -a -f .newdep ${ASM_CFLAGS} ${SFILES} ${SYSTEM_SFILES}
	rm -f .depend
	mv -f .newdep .depend

cleandepend:
	rm -f .depend

links:
	egrep '#if' ${CFILES:Nswapkernel.c} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES:Nswapkernel.c} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

tags:
	@echo "see $S/kern/Makefile for tags"

install:
	@if [ ! -f kernel ] ; then \
		echo "You must first build your kernel before trying to install." ; \
		exit 1 ; \
	fi
.if exists(${DESTDIR}/kernel)
	chflags noschg ${DESTDIR}/kernel
	mv ${DESTDIR}/kernel ${DESTDIR}/kernel.old
.endif
	PATH=$${PATH}:/sbin:/usr/sbin; \
	if [ `sysctl -n kern.bootfile` = ${DESTDIR}/kernel ] ; then \
		sysctl -w kern.bootfile=${DESTDIR}/kernel.old ; \
		if [ -f /var/db/kvm_kernel.db ] ; then \
			mv -f /var/db/kvm_kernel.db /var/db/kvm_kernel.old.db ; \
		fi \
	fi
	install -c -m 555 -o root -g wheel -fschg kernel ${DESTDIR}/

config.o:
	${NORMAL_C}

ioconf.o:
	${NORMAL_C}

param.c: $S/conf/param.c
	-rm -f param.c
	cp $S/conf/param.c .

param.o:
	${NORMAL_C}

vers.c: $S/conf/newvers.sh $S/sys/param.h ${SYSTEM_DEP}
	sh $S/conf/newvers.sh ${KERN_IDENT} ${IDENT}

# XXX strictly, everything depends on Makefile because changes to ${PROF}
# only appear there, but we don't handle that.
vers.o:
	${NORMAL_C}

.ORDER: vnode_if.c vnode_if.h
vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src

vnode_if.o:
	${NORMAL_C}

.if exists($S/../share/mk)
.include "$S/../share/mk/bsd.kern.mk"
.else
.include <bsd.kern.mk>
.endif

%RULES

# DO NOT DELETE THIS LINE -- make depend uses it
