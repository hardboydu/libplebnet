# Makefile.alpha -- with config changes.
# Copyright 1990 W. Jolitz
#	from: @(#)Makefile.alpha	7.1 5/10/91
# $FreeBSD$
#
# Makefile for FreeBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/alpha/conf/``machineid''
# after which you should do
#	 config machineid
# Generic makefile changes should be made in
#	/sys/alpha/conf/Makefile.alpha
# after which config should be rerun for all machines.
#

# Which version of config(8) is required.
%VERSREQ=	400016

# Can be overridden by makeoptions or /etc/make.conf
KERNEL?=	kernel
KERNFORMAT?=	elf
STD8X16FONT?=	iso

.if !defined(S)
.if exists(./@/.)
S=	./@
.else
S=	../..
.endif
.endif
ALPHA=	${S}/alpha

SIZE?=	size

COPTFLAGS?=-O
INCLUDES= -nostdinc -I- -I. -I$S
# This hack is to allow kernel compiles to succeed on machines w/out srcdist
.if exists($S/../include)
INCLUDES+= -I$S/../include
.else
INCLUDES+= -I/usr/include
.endif
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL -include opt_global.h
CFLAGS=	${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS}

# XXX LOCORE means "don't declare C stuff" not "for locore.s".
ASM_CFLAGS= -x assembler-with-cpp -DLOCORE ${CFLAGS}

# Use the default object format for genassym, etc.
GEN_CFLAGS= ${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS} -U_KERNEL

FMT=
CFLAGS+=	${FMT}

LOAD_ADDRESS?=	0xfffffc0000300000
DEFINED_PROF=	${PROF}
.if defined(PROF)
CFLAGS+=	-malign-functions=4
.if ${PROFLEVEL} >= 2
IDENT+=	-DGPROF4 -DGUPROF
PROF+=	-mprofiler-epilogue
.endif
.endif

# Put configuration-specific C flags last (except for ${PROF}) so that they
# can override the others.
CFLAGS+=	${CONF_CFLAGS}

NORMAL_C= ${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C= ${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_S= ${CC} -c ${ASM_CFLAGS} $<
PROFILE_C= ${CC} -c ${CFLAGS} $<

GEN_CFILES= ${ALPHA}/alpha/genassym.c
# setdef0.c and setdef1.c are intentionally
# omitted from SYSTEM_CFILES.  They include setdefs.h, a header which
# is generated from all of ${OBJS}.  We don't want to have to compile
# everything just to do a make depend.
SYSTEM_CFILES= ioconf.c param.c vnode_if.c config.c
SYSTEM_SFILES= ${ALPHA}/alpha/locore.s
SYSTEM_DEP= Makefile ${SYSTEM_OBJS}
SYSTEM_OBJS= locore.o setdef0.o vnode_if.o ${OBJS} ioconf.o param.o config.o \
	setdef1.o hack.So
SYSTEM_LD= @${LD} ${FMT} -Bdynamic -T $S/alpha/conf/kernel.script \
	-e locorestart \
	-export-dynamic -dynamic-linker /red/herring \
	-o ${.TARGET} -X ${SYSTEM_OBJS} vers.o
SYSTEM_LD_TAIL= @${SIZE} ${FMT} ${.TARGET} ; chmod 755 ${.TARGET}
SYSTEM_DEP+= $S/alpha/conf/kernel.script

%BEFORE_DEPEND

%OBJS

%CFILES

%SFILES

%MFILES

%CLEAN

all: ${KERNEL}

.if !defined(DEBUG)
FULLKERNEL=	${KERNEL}
.else
FULLKERNEL=	${KERNEL}.debug
${KERNEL}: ${FULLKERNEL}
	objcopy --strip-debug ${FULLKERNEL} ${KERNEL}
.endif

${FULLKERNEL}: ${SYSTEM_DEP} vers.o
	@rm -f ${.TARGET}
	@echo linking ${.TARGET}
	${SYSTEM_LD}
	${SYSTEM_LD_TAIL}

.if !exists(.depend)
${SYSTEM_OBJS}: vnode_if.h ${BEFORE_DEPEND:M*.h}
.endif

clean:
	rm -f *.o *.so *.So *.ko *.s eddep errs genassym gensetdefs \
	      ${KERNEL} ${FULLKERNEL} linterrs makelinks param.c \
	      setdef[01].c setdefs.h symbols.exclude symbols.sort tags \
	      vers.c vnode_if.c vnode_if.h ${CLEAN}

#lint: /tmp param.c
#	@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} \
#	  ${ALPHA}/alpha/Locore.c ${CFILES} ioconf.c param.c | \
#	    grep -v 'struct/union .* never defined' | \
#	    grep -v 'possible pointer alignment problem'

locore.o: ${ALPHA}/alpha/locore.s assym.s
	${NORMAL_S}

# This is a hack.  BFD "optimizes" away dynamic mode if there are no
# dynamic references.  We could probably do a '-Bforcedynamic' mode like
# in the a.out ld.  For now, this works.
hack.So: Makefile
	touch hack.c
	${CC} -shared -nostdlib hack.c -o hack.So
	rm -f hack.c

.ORDER: setdefs.h setdef0.c setdef1.c

setdef0.o: setdef0.c setdefs.h
	${NORMAL_C}

setdef1.o: setdef1.c setdefs.h
	${NORMAL_C}

setdef0.c setdef1.c setdefs.h: ${OBJS}
	@gensetdefs ${OBJS}

# this rule stops ./assym.s in .depend from causing problems
./assym.s: assym.s

assym.s: genassym
	./genassym >assym.s

genassym.o: ${ALPHA}/alpha/genassym.c
	${CC} -c ${GEN_CFLAGS} ${ALPHA}/alpha/genassym.c

genassym: genassym.o
	${CC} ${GEN_CFLAGS} genassym.o -o ${.TARGET}

SYSTEM_OBJS+=	__divqu.o __divq.o __divlu.o __divl.o
SYSTEM_OBJS+=	__remqu.o __remq.o __remlu.o __reml.o
CLEAN+=	__divqu.S __divq.S __divlu.S __divl.S
CLEAN+=	__remqu.S __remq.S __remlu.S __reml.S

__divqu.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divqu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divq.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divq')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divlu.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divlu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divl.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__divl')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remqu.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remqu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remq.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remq')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remlu.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__remlu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__reml.S: ${S}/alpha/alpha/divrem.m4
	@echo 'building ${.TARGET} from ${.ALLSRC}'
	@(echo "define(NAME,\`__reml')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

${SYSTEM_OBJS} genassym.o vers.o: opt_global.h

depend: assym.s param.c vnode_if.h ${BEFORE_DEPEND} \
	    ${CFILES} ${SYSTEM_CFILES} ${GEN_CFILES} ${SFILES} ${SYSTEM_SFILES}
	rm -f .newdep
	mkdep -a -f .newdep ${CFLAGS} ${CFILES} ${SYSTEM_CFILES}
	mkdep -a -f .newdep ${GEN_CFLAGS} ${GEN_CFILES}
	env MKDEP_CPP="${CC} -E" \
	    mkdep -a -f .newdep ${ASM_CFLAGS} ${SFILES} ${SYSTEM_SFILES}
	rm -f .depend
	mv -f .newdep .depend

cleandepend:
	rm -f .depend

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

tags:
	@[ -f .depend ] || { echo "you must make depend first"; exit 1; }
	sh $S/conf/systags.sh
	rm -f tags1
	sed -e 's,      ../,    ,' tags > tags1

install install.debug:
	@if [ ! -f ${KERNEL}${.TARGET:S/install//} ] ; then \
		echo "You must build a kernel first." ; \
		exit 1 ; \
	fi
.if exists(${DESTDIR}/${KERNEL})
	-chflags noschg ${DESTDIR}/${KERNEL}
	mv ${DESTDIR}/${KERNEL} ${DESTDIR}/${KERNEL}.old
.endif
	install -c -m 555 -o root -g wheel -fschg \
		${KERNEL}${.TARGET:S/install//} ${DESTDIR}/${KERNEL}

reinstall reinstall.debug:
	install -c -m 555 -o root -g wheel -fschg \
		${KERNEL}${.TARGET:S/reinstall//} ${DESTDIR}/${KERNEL}

config.o:
	${NORMAL_C}

ioconf.o:
	${NORMAL_C}

param.c: $S/conf/param.c
	-rm -f param.c
	cp $S/conf/param.c .

param.o:
	${NORMAL_C}

vers.c: $S/conf/newvers.sh $S/sys/param.h ${SYSTEM_DEP}
	sh $S/conf/newvers.sh ${KERN_IDENT} ${IDENT}

# XXX strictly, everything depends on Makefile because changes to ${PROF}
# only appear there, but we don't handle that.
vers.o:
	${NORMAL_C}

vnode_if.c: $S/kern/vnode_if.pl $S/kern/vnode_if.src
	perl5 $S/kern/vnode_if.pl -c $S/kern/vnode_if.src

vnode_if.h: $S/kern/vnode_if.pl $S/kern/vnode_if.src
	perl5 $S/kern/vnode_if.pl -h $S/kern/vnode_if.src

vnode_if.o:
	${NORMAL_C}

.if exists($S/../share/mk)
.include "$S/../share/mk/bsd.kern.mk"
.else
.include <bsd.kern.mk>
.endif

%RULES

# DO NOT DELETE THIS LINE -- make depend uses it
