#
# LINT -- config file for checking all the sources, tries to pull in
#	as much of the source tree as it can.
#
#	$Id: LINT,v 1.459 1998/09/08 20:57:46 sos Exp $
#
# NB: You probably don't want to try running a kernel built from this
# file.  Instead, you should start from GENERIC, and add options from
# this file as required.
#

#
# This directive is mandatory; it defines the architecture to be
# configured for; in this case, the 386 family based IBM-PC and
# compatibles.
#
machine		"i386"

# 
# This is the ``identification'' of the kernel.  Usually this should
# be the same as the name of your kernel.
#
ident		LINT

#
# The `maxusers' parameter controls the static sizing of a number of
# internal system tables by a complicated formula defined in param.c.
#
maxusers	10

#
# Certain applications can grow to be larger than the 128M limit
# that FreeBSD initially imposes.  Below are some options to
# allow that limit to grow to 256MB, and can be increased further
# with changing the parameters.  MAXDSIZ is the maximum that the
# limit can be set to, and the DFLDSIZ is the default value for
# the limit.  You might want to set the default lower than the
# max, and explicitly set the maximum with a shell command for processes
# that regularly exceed the limit like INND.
#
options		"MAXDSIZ=(256*1024*1024)"
options		"DFLDSIZ=(256*1024*1024)"

# When this is set, be extra conservative in various parts of the kernel
# and choose functionality over speed (on the widest variety of systems).
options		FAILSAFE

# Options for the VM subsystem
#options	PQ_NOOPT		# No coloring
options		PQ_LARGECACHE		# color for 512k/16k cache
#options	PQ_HUGECACHE		# color for 1024k/16k cache

# This allows you to actually store this configuration file into
# the kernel binary itself, where it may be later read by saying:
#    strings /kernel | grep ^___ | sed -e 's/^___//' > MYKERNEL
#
options         INCLUDE_CONFIG_FILE     # Include this file in kernel

#
# This directive defines a number of things:
#  - The compiled kernel is to be called `kernel'
#  - The root filesystem might be on partition wd0a
#  - Crash dumps will be written to wd0b, if possible.  Specifying the
#    dump device here is not recommended.  Use dumpon(8).
#
config		kernel	root on wd0 dumps on wd0


#####################################################################
# SMP OPTIONS:
#
# SMP enables building of a Symmetric MultiProcessor Kernel.
# APIC_IO enables the use of the IO APIC for Symmetric I/O.
# NCPU sets the number of CPUs, defaults to 2.
# NBUS sets the number of busses, defaults to 4.
# NAPIC sets the number of IO APICs on the motherboard, defaults to 1.
# NINTR sets the total number of INTs provided by the motherboard.
#
# Notes:
#
#  An SMP kernel will ONLY run on an Intel MP spec. qualified motherboard.
#
#  Be sure to disable 'cpu "I386_CPU"' && 'cpu "I486_CPU"' for SMP kernels.
#
#  Check the 'Rogue SMP hardware' section to see if additional options
#   are required by your hardware.
#

# Mandatory:
options		SMP			# Symmetric MultiProcessor Kernel
options		APIC_IO			# Symmetric (APIC) I/O

# Optional, these are the defaults plus 1:
options		NCPU=5			# number of CPUs
options		NBUS=5			# number of busses
options		NAPIC=2			# number of IO APICs
options		NINTR=25		# number of INTs

#
# Rogue SMP hardware:
#

# Bridged PCI cards:
#
# The MP tables of most of the current generation MP motherboards
#  do NOT properly support bridged PCI cards.  To use one of these
#  cards you should refer to ???


#####################################################################
# CPU OPTIONS

#
# You must specify at least one CPU (the one you intend to run on);
# deleting the specification for CPUs you don't need to use may make
# parts of the system run faster.  This is especially true removing
# I386_CPU.
#
cpu		"I386_CPU"
cpu		"I486_CPU"
cpu		"I586_CPU"		# aka Pentium(tm)
cpu		"I686_CPU"		# aka Pentium Pro(tm)

#
# Options for CPU features.
#
# CPU_BLUELIGHTNING_FPU_OP_CACHE enables FPU operand cache on IBM
# BlueLightning CPU.  It works only with Cyrix FPU, and this option
# should not be used with Intel FPU.
#
# CPU_BLUELIGHTNING_3X enables triple-clock mode on IBM Blue Lightning 
# CPU if CPU supports it. The default is double-clock mode on
# BlueLightning CPU box.  
#
# CPU_BTB_EN enables branch target buffer on Cyrix 5x86 (NOTE 1).
#
# CPU_DIRECT_MAPPED_CACHE sets L1 cache of Cyrix 486DLC CPU in direct
# mapped mode.  Default is 2-way set associative mode.
#
# CPU_CYRIX_NO_LOCK enables weak locking for the entire address space
# of Cyrix 6x86 and 6x86MX CPUs.  If this option is not set and
# FAILESAFE is defined, NO_LOCK bit of CCR1 is cleared.  (NOTE 3)
#
# CPU_DISABLE_5X86_LSSER disables load store serialize (i.e. enables
# reorder).  This option should not be used if you use memory mapped
# I/O device(s). 
#
# CPU_FASTER_5X86_FPU enables faster FPU exception handler.
#
# CPU_I486_ON_386 enables CPU cache on i486 based CPU upgrade products
# for i386 machines. 
#
# CPU_IORT defines I/O clock delay time (NOTE 1).  Default vaules of
# I/O clock delay time on Cyrix 5x86 and 6x86 are 0 and 7,respectively
# (no clock delay).
#
# CPU_LOOP_EN prevents flushing the prefetch buffer if the destination
# of a jump is already present in the prefetch buffer on Cyrix 5x86(NOTE
# 1). 
#
# CPU_RSTK_EN enables return stack on Cyrix 5x86 (NOTE 1).
#
# CPU_SUSP_HLT enables suspend on HALT.  If this option is set, CPU
# enters suspend mode following execution of HALT instruction.
#
# CPU_WT_ALLOC enables write-through allocation.
#
# CYRIX_CACHE_WORKS enables CPU cache on Cyrix 486 CPUs with cache
# flush at hold state.
#
# CYRIX_CACHE_REALLY_WORKS enables (1) CPU cache on Cyrix 486 CPUs
# without cache flush at hold state, and (2) write-back CPU cache on
# Cyrix 6x86 whose revision < 2.7 (NOTE 2).
#
# NO_F00F_HACK disables the hack that prevents Pentiums (and ONLY
# Pentiums) from locking up when a LOCK CMPXCHG8B instruction is
# executed.  This should be included for ALL kernels that won't run
# on a Pentium.
#
# NOTE 1: The options, CPU_BTB_EN, CPU_LOOP_EN, CPU_IORT,
# CPU_LOOP_ENand CPU_RSTK_EN should no be used becasue of CPU bugs.
# These options may crash your system. 
#
# NOTE 2: If CYRIX_CACHE_REALLY_WORKS is not set, CPU cache is enabled
# in write-through mode when revision < 2.7.  If revision of Cyrix
# 6x86 >= 2.7, CPU cache is always enabled in write-back mode.
#
# NOTE 3: This option may cause failures for software that requires
# locked cycles in order to operate correctly.
#
options		"CPU_BLUELIGHTNING_FPU_OP_CACHE"
options		"CPU_BLUELIGHTNING_3X"
options		"CPU_BTB_EN"
options		"CPU_DIRECT_MAPPED_CACHE"
options		"CPU_DISABLE_5X86_LSSER"
options		"CPU_FASTER_5X86_FPU"
options		"CPU_I486_ON_386"
options		"CPU_IORT"
options		"CPU_LOOP_EN"
options		"CPU_RSTK_EN"
options		"CPU_SUSP_HLT"
options		"CYRIX_CACHE_WORKS"
options		"CYRIX_CACHE_REALLY_WORKS"
#options	"NO_F00F_HACK"

#
# A math emulator is mandatory if you wish to run on hardware which
# does not have a floating-point processor.  Pick either the original,
# bogus (but freely-distributable) math emulator, or a much more
# fully-featured but GPL-licensed emulator taken from Linux.
#
options		MATH_EMULATE		#Support for x87 emulation
# Don't enable both of these in a real config.
options		GPL_MATH_EMULATE	#Support for x87 emulation via
					#new math emulator 


#####################################################################
# COMPATIBILITY OPTIONS                                             

#
# Implement system calls compatible with 4.3BSD and older versions of
# FreeBSD.  You probably do NOT want to remove this as much current code
# still relies on the 4.3 emulation.
#
options		"COMPAT_43"

#
# Allow user-mode programs to manipulate their local descriptor tables.
# This option is required for the WINE Windows(tm) emulator, and is
# not used by anything else (that we know of).
#
options		USER_LDT		#allow user-level control of i386 ldt

#
# These three options provide support for System V Interface
# Definition-style interprocess communication, in the form of shared
# memory, semaphores, and message queues, respectively.
#
options		SYSVSHM
options		SYSVSEM
options		SYSVMSG

#
# This option includes a MD5 routine in the kernel, this is used for
# various authentication and privacy uses.
#
options		"MD5"

#
# Allow processes to switch to vm86 mode, as well as enabling direct
# user-mode access to the I/O port space.  This option is necessary for 
# the doscmd emulator to run.
#
options		"VM86"


#####################################################################
# DEBUGGING OPTIONS

#
# Enable the kernel debugger.
#
options		DDB

#
# Don't drop into DDB for a panic. Intended for unattended operation
# where you may want to drop to DDB from the console, but still want
# the machine to recover from a panic
#
options		DDB_UNATTENDED

#
# If using GDB remote mode to debug the kernel, there's a non-standard
# extension to the remote protocol that can be used to use the serial
# port as both the debugging port and the system console.  It's non-
# standard and you're on your own if you enable it.  See also the
# "remotechat" variables in the FreeBSD specific version of gdb.
#
options		GDB_REMOTE_CHAT

# 
# KTRACE enables the system-call tracing facility ktrace(2).
#
options		KTRACE			#kernel tracing

#
# The DIAGNOSTIC option is used in a number of source files to enable
# extra sanity checking of internal structures.  This support is not
# enabled by default because of the extra time it would take to check
# for these conditions, which can only occur as a result of
# programming errors.
#
options		DIAGNOSTIC

#
# PERFMON causes the driver for Pentium/Pentium Pro performance counters
# to be compiled.  See perfmon(4) for more information.
#
options		PERFMON


#
# This option let some drivers co-exist that can't co-exist in a running
# system.  This is used to be able to compile all kernel code in one go for
# quality assurance purposes (like this file, which the option takes it name
# from.)
#
options COMPILING_LINT


# XXX - this doesn't belong here.
# Allow ordinary users to take the console - this is useful for X.
options		UCONSOLE

# XXX - this doesn't belong here either
options		USERCONFIG		#boot -c editor
options		USERCONFIG_BOOT		#imply -c and parse info area
options		VISUAL_USERCONFIG	#visual boot -c editor

#####################################################################
# NETWORKING OPTIONS

#
# Protocol families:
#  Only the INET (Internet) family is officially supported in FreeBSD.
#  Source code for the NS (Xerox Network Service) is provided for amusement
#  value.
#
options		INET			#Internet communications protocols

options		IPX			#IPX/SPX communications protocols
options		IPXIP			#IPX in IP encapsulation (not available)
options		IPTUNNEL		#IP in IPX encapsulation (not available)

options		NETATALK		#Appletalk communications protocols

# These are currently broken but are shipped due to interest.
#options		NS			#Xerox NS protocols

# These are currently broken and are no longer shipped due to lack
# of interest.
#options		CCITT			#X.25 network layer
#options		ISO
#options		TPIP			#ISO TP class 4 over IP
#options		TPCONS			#ISO TP class 0 over X.25
#options		LLC			#X.25 link layer for Ethernets
#options		HDLC			#X.25 link layer for serial lines
#options		EON			#ISO CLNP over IP
#options		NSIP			#XNS over IP

#
# Network interfaces:
#  The `loop' pseudo-device is MANDATORY when networking is enabled.
#  The `ether' pseudo-device provides generic code to handle
#  Ethernets; it is MANDATORY when a Ethernet device driver is
#  configured.
#  The 'fddi' pseudo-device provides generic code to support FDDI.
#  The `sppp' pseudo-device serves a similar role for certain types
#  of synchronous PPP links (like `cx', `ar').
#  The `sl' pseudo-device implements the Serial Line IP (SLIP) service.
#  The `ppp' pseudo-device implements the Point-to-Point Protocol.
#  The `bpfilter' pseudo-device enables the Berkeley Packet Filter.  Be
#  aware of the legal and administrative consequences of enabling this
#  option.  The number of devices determines the maximum number of
#  simultaneous BPF clients programs runnable.
#  The `disc' pseudo-device implements a minimal network interface,
#  which throws away all packets sent and never receives any.  It is
#  included for testing purposes.
#  The `tun' pseudo-device implements the User Process PPP (iijppp)
#
# The PPP_BSDCOMP option enables support for compress(1) style entire
# packet compression, the PPP_DEFLATE is for zlib/gzip style compression.
# PPP_FILTER enables code for filtering the ppp data stream and selecting
# events for resetting the demand dial activity timer - requires bpfilter.
# See pppd(8) for more details.
#
pseudo-device	ether			#Generic Ethernet
pseudo-device	fddi			#Generic FDDI
pseudo-device	sppp			#Generic Synchronous PPP
pseudo-device	loop			#Network loopback device
pseudo-device	bpfilter	4	#Berkeley packet filter
pseudo-device	disc			#Discard device
pseudo-device	tun	1		#Tunnel driver (user process ppp(8))
pseudo-device	sl	2		#Serial Line IP
pseudo-device	ppp	2		#Point-to-point protocol
options PPP_BSDCOMP			#PPP BSD-compress support
options PPP_DEFLATE			#PPP zlib/deflate/gzip support
options PPP_FILTER			#enable bpf filtering (needs bpfilter)

#
# Internet family options:
#
# TCP_COMPAT_42 causes the TCP code to emulate certain bugs present in
# 4.2BSD.  This option should not be used unless you have a 4.2BSD
# machine and TCP connections fail.
#
# MROUTING enables the kernel multicast packet forwarder, which works
# with mrouted(8).
#
# IPFIREWALL enables support for IP firewall construction, in
# conjunction with the `ipfw' program.  IPFIREWALL_VERBOSE sends
# logged packets to the system logger.  IPFIREWALL_VERBOSE_LIMIT
# limits the number of times a matching entry can be logged.
#
# WARNING:  IPFIREWALL defaults to a policy of "deny ip from any to any"
# and if you do not add other rules during startup to allow access,
# YOU WILL LOCK YOURSELF OUT.  It is suggested that you set firewall=open
# in /etc/rc.conf when first enabling this feature, then refining the
# firewall rules in /etc/rc.firewall after you've tested that the new kernel
# feature works properly.
#
# IPFIREWALL_DEFAULT_TO_ACCEPT causes the default rule (at boot) to
# allow everything.  Use with care, if a cracker can crash your
# firewall machine, they can get to your protected machines.  However,
# if you are using it as an as-needed filter for specific problems as
# they arise, then this may be for you.  Changing the default to 'allow'
# means that you won't get stuck if the kernel and /sbin/ipfw binary get
# out of sync.
#
# IPDIVERT enables the divert IP sockets, used by ``ipfw divert''
#
# IPFILTER enables Darren Reed's ipfilter package.
# IPFILTER_LOG enables ipfilter's logging.
# IPFILTER_LKM enables LKM support for an ipfilter module (untested).
#
# TCPDEBUG is undocumented.
#
options		"TCP_COMPAT_42"		#emulate 4.2BSD TCP bugs
options		MROUTING		# Multicast routing
options         IPFIREWALL              #firewall
options         IPFIREWALL_VERBOSE      #print information about
					# dropped packets
options         IPFIREWALL_FORWARD      #enable xparent proxy support
options		"IPFIREWALL_VERBOSE_LIMIT=100" #limit verbosity
options		IPFIREWALL_DEFAULT_TO_ACCEPT #allow everything by default
options		IPDIVERT		#divert sockets
options		IPFILTER		#kernel ipfilter support
options		IPFILTER_LOG		#ipfilter logging
#options	IPFILTER_LKM		#kernel support for ip_fil.o LKM
options		TCPDEBUG


#####################################################################
# FILESYSTEM OPTIONS

#
# Only the root, /usr, and /tmp filesystems need be statically
# compiled; everything else will be automatically loaded at mount
# time.  (Exception: the UFS family---FFS, and MFS --- cannot
# currently be demand-loaded.)  Some people still prefer to statically
# compile other filesystems as well.
#
# NB: The NULL, PORTAL, UMAP and UNION filesystems are known to be
# buggy, and WILL panic your system if you attempt to do anything with
# them.  They are included here as an incentive for some enterprising
# soul to sit down and fix them.
#

# One of these is mandatory:
options		FFS			#Fast filesystem
options		NFS			#Network File System

# The rest are optional:
# options	NFS_NOSERVER		#Disable the NFS-server code.
options		"CD9660"		#ISO 9660 filesystem
options		FDESC			#File descriptor filesystem
options		KERNFS			#Kernel filesystem
options		MFS			#Memory File System
options		MSDOSFS			#MS DOS File System
options		NULLFS			#NULL filesystem
options		PORTAL			#Portal filesystem
options		PROCFS			#Process filesystem
options		UMAPFS			#UID map filesystem
options		UNION			#Union filesystem
options		"CD9660_ROOT"		#CD-ROM usable as root device
options		FFS_ROOT		#FFS usable as root device
options		NFS_ROOT		#NFS usable as root device
# DEVFS and SLICE are experimental but work.
# SLICE disables too much old code so enabling it in LINT would be bad
options		DEVFS			#devices filesystem
#options		SLICE			#devfs based disk handling

# Allow the FFS to use Softupdates technology.
# To do this you need to copy the two files
# /sys/ufs/ffs/softdep.h and /sys/ufs/ffs/ffs_softdep.c
# from /usr/src/contrib/sys/softupdates
# and understand the licensing restrictions.
# You should also check on the FreeBSD website for newer versions.
#options		SOFTUPDATES
# (we can't actually enable it because the files may not be present)

# Make space in the kernel for a MFS root filesystem.  Define to the number
# of kilobytes to reserve for the filesystem.
options		MFS_ROOT=10
# Allow the MFS_ROOT code to load the MFS image from floppy if it is missing.
options		MFS_AUTOLOAD
# Allows MFS filesystems to be exported via nfs
options		EXPORTMFS

# Allow this many swap-devices.
options		NSWAPDEV=20

# Disk quotas are supported when this option is enabled.  If you
# change the value of this option, you must do a `make clean' in your
# kernel compile directory in order to get a working kernel.
#
options		QUOTA			#enable disk quotas

# Add more checking code to various filesystems
#options		NULLFS_DIAGNOSTIC
#options		KERNFS_DIAGNOSTIC
#options		UMAPFS_DIAGNOSTIC
#options		UNION_DIAGNOSTIC

# In particular multi-session CD-Rs might require a huge amount of
# time in order to "settle".  If we are about mounting them as the
# root f/s, we gotta wait a little.
#
# The number is supposed to be in seconds.
options		"CD9660_ROOTDELAY=20"

# If you are running a machine just as a fileserver for PC and MAC
# users, using SAMBA or Netatalk, you may consider setting this option
# and keeping all those users' directories on a filesystem that is
# mounted with the suiddir option. This gives new files the same
# ownership as the directory (similiar to group). It's a security hole
# if you let these users run programs, so confine it to file-servers
# (but it'll save you lots of headaches in those cases). Root owned
# directories are exempt and X bits are cleared. The suid bit must be
# set on the directory as well; see chmod(1) PC owners can't see/set
# ownerships so they keep getting their toes trodden on. This saves
# you all the support calls as the filesystem it's used on will act as
# they expect: "It's my dir so it must be my file".
#
options		SUIDDIR


# Add some error checking code to the null_bypass routine
# in the NULL filesystem
#options		SAFETY


# NFS options:
options		"NFS_MINATTRTIMO=3"	# VREG attrib cache timeout in sec
options		"NFS_MAXATTRTIMO=60"
options		"NFS_MINDIRATTRTIMO=30"	# VDIR attrib cache timeout in sec
options		"NFS_MAXDIRATTRTIMO=60"
options		"NFS_GATHERDELAY=10"	# Default write gather delay (msec)
options		"NFS_UIDHASHSIZ=29"	# Tune the size of nfssvc_sock with this
options		"NFS_WDELAYHASHSIZ=16"	# and with this
options		"NFS_MUIDHASHSIZ=63"	# Tune the size of nfsmount with this
options		NFS_DEBUG		# Enable NFS Debugging

# CFS stuff:
#options		CFS			#CODA filesystem.
#pseudo-device	vcfs	4		#coda minicache <-> venus comm.


#####################################################################
# POSIX P1003.1B

# Real time extensions added int the 1993 Posix
# P1003_1B: Infrastructure
# _KPOSIX_PRIORITY_SCHEDULING: Build in _POSIX_PRIORITY_SCHEDULING
# _KPOSIX_VERSION:             Version kernel is built for

options		"P1003_1B"
options		"_KPOSIX_PRIORITY_SCHEDULING"
options		"_KPOSIX_VERSION=199309L"


#####################################################################
# SCSI DEVICES

# SCSI DEVICE CONFIGURATION

# The SCSI subsystem consists of the `base' SCSI code, a number of
# high-level SCSI device `type' drivers, and the low-level host-adapter
# device drivers.  The host adapters are listed in the ISA and PCI
# device configuration sections below.
#
# Beginning with FreeBSD 2.0.5 you can wire down your SCSI devices so
# that a given bus, target, and LUN always come on line as the same
# device unit.  In earlier versions the unit numbers were assigned
# in the order that the devices were probed on the SCSI bus.  This
# means that if you removed a disk drive, you may have had to rewrite
# your /etc/fstab file, and also that you had to be careful when adding
# a new disk as it may have been probed earlier and moved your device
# configuration around.

# This old behavior is maintained as the default behavior.  The unit
# assignment begins with the first non-wired down unit for a device
# type.  For example, if you wire a disk as "sd3" then the first
# non-wired disk will be assigned sd4.

# The syntax for wiring down devices is:

# controller	scbus0 at ahc0		# Single bus device
# controller	scbus1 at ahc1 bus 0	# Single bus device
# controller	scbus3 at ahc2 bus 0	# Twin bus device
# controller	scbus2 at ahc2 bus 1	# Twin bus device
# disk 		sd0 at scbus0 target 0 unit 0
# disk		sd1 at scbus3 target 1
# disk		sd2 at scbus2 target 3
# tape		st1 at scbus1 target 6
# device	cd0 at scbus?

# "units" (SCSI logical unit number) that are not specified are
# treated as if specified as LUN 0.

# All SCSI devices allocate as many units as are required.

# The "unknown" device (uk? in pre-2.0.5) is now part of the base SCSI
# configuration and doesn't have to be explicitly configured.

controller	scbus0	#base SCSI code
device		ch0	#SCSI media changers
device		sd0	#SCSI disks
device		st0	#SCSI tapes
device		cd0	#SCSI CD-ROMs
device		od0	#SCSI optical disk

# The previous devices (ch, sd, st, cd) are recognized by config.
# config doesn't (and shouldn't) know about these newer ones,
# so we have to specify that they are on a SCSI bus with the "at scbus?"
# clause.

device worm0 at scbus?	# SCSI worm
device pt0 at scbus?	# SCSI processor type
device sctarg0 at scbus? # SCSI target

# SCSI OPTIONS:

# SCSIDEBUG: When defined enables debugging macros
# NO_SCSI_SENSE: When defined disables sense descriptions (about 4k)
# SCSI_REPORT_GEOMETRY: Always report disk geometry at boot up instead
#                       of only when booting verbosely.
options		SCSIDEBUG
#options	NO_SCSI_SENSE
options		SCSI_REPORT_GEOMETRY

# Options for the `od' optical disk driver:
#
# If drive returns sense key as 0x02 with vendor specific additional
# sense code (ASC) and additional sense code qualifier (ASCQ), or
# illegal ASC and ASCQ. This cause an error (NOT READY) and retrying.
# To suppress this, use the following option.
#
options		OD_BOGUS_NOT_READY
#
# For an automatic spindown, try this.  Again, preferably as an
# option in your config file.
# WARNING!  Use at your own risk.  Joerg's ancient SONY SMO drive
# groks it fine, while Shunsuke's Fujitsu chokes on it and times
# out.
#
options		OD_AUTO_TURNOFF



#####################################################################
# MISCELLANEOUS DEVICES AND OPTIONS

# The `pty' device usually turns out to be ``effectively mandatory'',
# as it is required for `telnetd', `rlogind', `screen', `emacs', and
# `xterm', among others.

pseudo-device	pty	16	#Pseudo ttys - can go as high as 256
pseudo-device	speaker		#Play IBM BASIC-style noises out your speaker
pseudo-device	gzip		#Exec gzipped a.out's
pseudo-device	vn		#Vnode driver (turns a file into a device)
pseudo-device	snp	3	#Snoop device - to look at pty/vty/etc..
pseudo-device	ccd	4	#Concatenated disk driver

# These are only for watching for bitrot in old tty code.
# broken
#pseudo-device	tb

# These are only for watching for bitrot in old SCSI code.
pseudo-device	su		#scsi user
pseudo-device	ssc		#super scsi

# Size of the kernel message buffer.  Should be N * pagesize.
options		"MSGBUF_SIZE=40960"


#####################################################################
# HARDWARE DEVICE CONFIGURATION

# ISA and EISA devices:
# EISA support is available for some device, so they can be auto-probed.
# Micro Channel is not supported at all.

#
# Mandatory ISA devices: isa, npx
#
controller	isa0

#
# Options for `isa':
#
# AUTO_EOI_1 enables the `automatic EOI' feature for the master 8259A
# interrupt controller.  This saves about 0.7-1.25 usec for each interrupt.
# This option breaks suspend/resume on some portables.
#
# AUTO_EOI_2 enables the `automatic EOI' feature for the slave 8259A
# interrupt controller.  This saves about 0.7-1.25 usec for each interrupt.
# Automatic EOI is documented not to work for for the slave with the
# original i8259A, but it works for some clones and some integrated
# versions.
#
# BOUNCE_BUFFERS provides support for ISA DMA on machines with more
# than 16 megabytes of memory.  It doesn't hurt on other machines.
# Some broken EISA and VLB hardware may need this, too.
#
# MAXMEM specifies the amount of RAM on the machine; if this is not
# specified, FreeBSD will first read the amount of memory from the CMOS
# RAM, so the amount of memory will initially be limited to 64MB or 16MB
# depending on the BIOS.  If the BIOS reports 64MB, a memory probe will
# then attempt to detect the installed amount of RAM.  If this probe
# fails to detect >64MB RAM you will have to use the MAXMEM option.
# The amount is in kilobytes, so for a machine with 128MB of RAM, it would
# be 131072 (128 * 1024).
#
# TUNE_1542 enables the automatic ISA bus speed selection for the
# Adaptec 1542 boards. Does not work for all boards, use it with caution.
#
# BROKEN_KEYBOARD_RESET disables the use of the keyboard controller to
# reset the CPU for reboot.  This is needed on some systems with broken
# keyboard controllers.
#
# PAS_JOYSTICK_ENABLE enables the gameport on the ProAudio Spectrum

options		"AUTO_EOI_1"
#options	"AUTO_EOI_2"
options		BOUNCE_BUFFERS
options		"MAXMEM=(128*1024)"
options 	"TUNE_1542"
#options	BROKEN_KEYBOARD_RESET
#options	PAS_JOYSTICK_ENABLE

# Enable support for the kernel PLL to use an external PPS signal,
# under supervision of [x]ntpd(8)
# More info in ftp://ftp.udel.edu/pub/ntp/kernel.tar.Z

options		PPS_SYNC

# Enable PnP support in the kernel.  This allows you to automaticly
# attach to PnP cards for drivers that support it and allows you to
# configure cards from USERCONFIG.  See pnp(4) for more info.
controller	pnp0

# The pcvt console driver (vt220 compatible).
device		vt0	at isa? port "IO_KBD" tty irq 1 vector pcrint
options		XSERVER			# support for running an X server.
options		FAT_CURSOR		# start with block cursor
# This PCVT option is for keyboards such as those used on IBM ThinkPad laptops
options		PCVT_SCANSET=2 		# IBM keyboards are non-std

# The syscons console driver (sco color console compatible).
device		sc0	at isa? port "IO_KBD" tty irq 1 vector scintr
options		MAXCONS=16		# number of virtual consoles
options		SLOW_VGA		# do byte-wide i/o's to TS and GDC regs
options		"STD8X16FONT"		# Compile font in
makeoptions	"STD8X16FONT"="cp850"
options		SC_HISTORY_SIZE=200	# number of history buffer lines
options		SC_DISABLE_REBOOT	# disable reboot key sequence
# If the screen flickers badly when the mouse pointer is moved, try this.
options		SC_BAD_FLICKER

#
# `flags' for sc0:
#       0x01    Use a 'visual' bell
#       0x02    Use a 'blink' cursor
#       0x04    Use a 'underline' cursor
#       0x06    Use a 'blinking underline' (destructive) cursor
#       0x08    Force detection of keyboard, else we always assume a keyboard
#       0x10    Old-style (XT) keyboard support, useful for older ThinkPads
#       0x20    Don't reset keyboard, useful for some newer ThinkPads
#	0x40	Make the bell quiet if it is rung in the backgroud vty.

#
# The Numeric Processing eXtension driver.  This should be configured if
# your machine has a math co-processor, unless the coprocessor is very
# buggy. If it is not configured then you *must* configure math emulation
# (see above).  If both npx0 and emulation are configured, then only npx0
# is used (provided it works).
device		npx0	at isa? port "IO_NPX" iosiz 0x0 flags 0x0 irq 13 vector npxintr

#
# `flags' for npx0:
#	0x01	don't use the npx registers to optimize bcopy
#	0x02	don't use the npx registers to optimize bzero
#	0x04	don't use the npx registers to optimize copyin or copyout.
# The npx registers are normally used to optimize copying and zeroing when
# all of the following conditions are satisfied:
#	"I586_CPU" is an option
#	the cpu is an i586 (perhaps not a Pentium)
#	the probe for npx0 succeeds
#	INT 16 exception handling works.
# Then copying and zeroing using the npx registers is normally 30-100% faster.
# The flags can be used to control cases where it doesn't work or is slower.
# Setting them at boot time using userconfig works right (the optimizations
# are not used until later in the bootstrap when npx0 is attached).
#

#
# `iosiz' for npx0:
# This can be used instead of the MAXMEM option to set the memory size.  If
# it is nonzero, then it overrides both the MAXMEM option and the memory
# size reported by the BIOS.  Setting it at boot time using userconfig takes
# effect on the next reboot after the change has been recorded in the kernel
# binary (the size is used early in the boot before userconfig has a chance
# to change it).
#

#
# Optional ISA and EISA devices:
#

#
# SCSI host adapters: `aha', `aic', `bt', `nca'
#
# aha: Adaptec 154x
# ahc: Adaptec 274x/284x/294x
# aic: Adaptec 152x and sound cards using the Adaptec AIC-6360 (slow!)
# bt: Most Buslogic controllers
# nca: ProAudioSpectrum cards using the NCR 5380 or Trantor T130
# uha: UltraStor ULTRA 14F/24F/34F
# sea: Seagate ST01/02 8 bit controller (slow!)
# wds: Western Digital WD7000 controller (no scatter/gather!).
#
# Note that the order is important in order for Buslogic cards to be
# probed correctly.
#

controller	bt0	at isa? port "IO_BT0" bio irq ? vector bt_isa_intr
controller	aha0	at isa? port "IO_AHA0" bio irq ? drq 5 vector ahaintr
controller	uha0	at isa? port "IO_UHA0" bio irq ? drq 5 vector uhaintr

controller      aic0    at isa? port 0x340 bio irq 11 vector aicintr
controller	nca0	at isa? port 0x1f88 bio irq 10 vector ncaintr
controller	nca1	at isa? port 0x1f84
controller	nca2	at isa? port 0x1f8c
controller	nca3	at isa? port 0x1e88
controller	nca4	at isa? port 0x350 bio irq 5 vector ncaintr

controller	sea0	at isa? bio irq 5 iomem 0xdc000 iosiz 0x2000 vector seaintr
controller	wds0	at isa? port 0x350 bio irq 15 drq 6 vector wdsintr

#
# ST-506, ESDI, and IDE hard disks: `wdc' and `wd'
#
# The flags fields are used to enable the multi-sector I/O and
# the 32BIT I/O modes.  The flags may be used in either the controller
# definition or in the individual disk definitions.  The controller
# definition is supported for the boot configuration stuff.
#
# Each drive has a 16 bit flags value defined:
#	The low 8 bits are the maximum value for the multi-sector I/O,
#	where 0xff defaults to the maximum that the drive can handle.
#	The high bit of the 16 bit flags (0x8000) allows probing for
#	32 bit transfers.  Bit 14 (0x4000) enables a hack to wake
#	up powered-down laptop drives.  Bit 13 (0x2000) allows
#	probing for PCI IDE DMA controllers, such as Intel's PIIX
#	south bridges. Bit 12 (0x1000) sets LBA mode instead of the
#	default CHS mode for accessing the drive. See the wd.4 man page.
#
# The flags field for the drives can be specified in the controller
# specification with the low 16 bits for drive 0, and the high 16 bits
# for drive 1.
# e.g.:
#controller	wdc0	at isa? port "IO_WD1" bio irq 14 flags 0x00ff8004 vector wdintr
#
# specifies that drive 0 will be allowed to probe for 32 bit transfers and
# a maximum multi-sector transfer of 4 sectors, and drive 1 will not be
# allowed to probe for 32 bit transfers, but will allow multi-sector
# transfers up to the maximum that the drive supports.
#
# If you are using a PCI controller that is not running in compatibility
# mode (for example, it is a 2nd IDE PCI interface), then use config line(s)
# such as:
#
#controller	wdc2	at isa? port "0" bio irq ? flags 0xa0ffa0ff vector wdintr
#disk		wd4	at wdc2 drive 0
#disk		wd5	at wdc2 drive 1
#
#controller	wdc3	at isa? port "0" bio irq ? flags 0xa0ffa0ff vector wdintr
#disk		wd6	at wdc3 drive 0
#disk		wd7	at wdc3 drive 1
#
# Note that the above config would be useful for a Promise card, when used
# on a MB that already has a PIIX controller.  Note the bogus irq and port
# entries.  These are automatically filled in by the IDE/PCI support.
#

controller	wdc0	at isa? port "IO_WD1" bio irq 14 vector wdintr
disk		wd0	at wdc0 drive 0
disk		wd1	at wdc0 drive 1
controller	wdc1	at isa? port "IO_WD2" bio irq 15 vector wdintr
disk		wd2	at wdc1 drive 0
disk		wd3	at wdc1 drive 1

#
# Options for `wdc':
#
# CMD640 enables serializing access to primary and secondary channel
# of the CMD640B IDE Chip. The serializing will only take place
# if this option is set *and* the chip is probed by the pci-system.
#
options         "CMD640"	#Enable work around for CMD640 h/w bug
#
# ATAPI enables the support for ATAPI-compatible IDE devices
#
options         ATAPI   #Enable ATAPI support for IDE bus
options		ATAPI_STATIC	#Don't do it as an LKM

# Use either the acd or the wcd device, not both!
# IDE CD-ROM & CD-R/RW  driver - requires wdc controller and ATAPI option
device          acd0

# IDE CD-ROM driver - requires wdc controller and ATAPI option
device          wcd0

# IDE floppy driver - requires wdc controller and ATAPI option
device          wfd0

# IDE tape driver - requires wdc controller and ATAPI option
device          wst0


#
# Standard floppy disk controllers and floppy tapes: `fdc', `fd', and `ft'
#
controller	fdc0	at isa? port "IO_FD1" bio irq 6 drq 2 vector fdintr
#
# FDC_DEBUG enables floppy debugging.  Since the debug output is huge, you
# gotta turn it actually on by setting the variable fd_debug with DDB,
# however.
options		FDC_DEBUG
# This option is undocumented on purpose.
options		FDC_PRINT_BOGUS_CHIPTYPE
#
# Activate this line instead of the fdc0 line above if you happen to
# have an Insight floppy tape.  Probing them proved to be dangerous
# for people with floppy disks only, so it's "hidden" behind a flag:
#controller fdc0 at isa? port "IO_FD1" bio flags 1 irq 6 drq 2 vector fdintr

disk		fd0	at fdc0 drive 0
disk		fd1	at fdc0 drive 1
tape		ft0	at fdc0 drive 2


#
# Other standard PC hardware: `lpt', `mse', `psm', `sio', etc.
#
# lpt: printer port
#	lpt specials:
#		port can be specified as ?, this will cause the driver to scan
#		the BIOS port list;
#		the irq and vector clauses may be omitted, this
#		will force the port into polling mode.
# mse: Logitech and ATI InPort bus mouse ports
# psm: PS/2 mouse port [note: conflicts with sc0/vt0, thus "conflicts" keywd]
# sio: serial ports (see sio(4))

device		lpt0	at isa? port? tty irq 7 vector lptintr
device		lpt1	at isa? port "IO_LPT3" tty irq 5 vector lptintr
device		mse0	at isa? port 0x23c tty irq 5 vector mseintr
device		psm0	at isa? port "IO_KBD" conflicts tty irq 12 vector psmintr

# Options for psm:
options		PSM_HOOKAPM		#hook the APM resume event, useful
					#for some laptops
options		PSM_RESETAFTERSUSPEND	#reset the device at the resume event

device		sio0	at isa? port "IO_COM1" tty flags 0x10 irq 4 vector siointr

#
# `flags' for serial drivers that support consoles (only for sio now):
#	0x10	enable console support for this unit.  The other console flags
#		are ignored unless this is set.  Enabling console support does
#		not make the unit the preferred console - boot with -h or set
#		the 0x20 flag for that.  Currently, at most one unit can have
#		console support; the first one (in config file order) with
#		this flag set is preferred.  Setting this flag for sio0 gives
#		the old behaviour.
#	0x20	force this unit to be the console (unless there is another
#		higher priority console).  This replaces the COMCONSOLE option.
#	0x40	reserve this unit for low level console operations.  Do not
#
# PnP `flags' (set via userconfig using pnp x flags y)
#	0x1	disable probing of this device.  Used to prevent your modem
#		from being attached as a PnP modem.
#

# Options for serial drivers that support consoles (only for sio now):
options		BREAK_TO_DEBUGGER	#a BREAK on a comconsole goes to 
					#DDB, if available.
options		CONSPEED=9600		#default speed for serial console (default 9600)

# Options for sio:
options		COM_ESP			#code for Hayes ESP
options		COM_MULTIPORT		#code for some cards with shared IRQs
options		DSI_SOFT_MODEM		#code for DSI Softmodems
options		"EXTRA_SIO=2"		#number of extra sio ports to allocate

# Other flags for sio that aren't documented in the man page.
#	0x20000	enable hardware RTS/CTS and larger FIFOs.  Only works for
#		ST16650A-compatible UARTs.

#
# Network interfaces: `cx', `ed', `el', `ep', `ie', `is', `le', `lnc'
#
# ar: Arnet SYNC/570i hdlc sync 2/4 port V.35/X.21 serial driver (requires sppp)
# cs: IBM Etherjet and other Crystal Semi CS89x0-based adapters
# cx: Cronyx/Sigma multiport sync/async (with Cisco or PPP framing)
# ed: Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503
# el: 3Com 3C501 (slow!)
# ep: 3Com 3C509 (buggy)
# fe: Fujitsu MB86960A/MB86965A Ethernet
# ie: AT&T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210; Intel EtherExpress
# le: Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100,
#     DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)
# lnc: Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)
# sr: RISCom/N2 hdlc sync 1/2 port V.35/X.21 serial driver (requires sppp)
# wl: Lucent Wavelan (ISA card only).
# ze: IBM/National Semiconductor PCMCIA ethernet controller.
# zp: 3Com PCMCIA Etherlink III (It does not require shared memory for
#     send/receive operation, but it needs 'iomem' to read/write the
#     attribute memory)
#

device ar0 at isa? port 0x300 net irq 10 iomem 0xd0000 vector arintr
device cs0 at isa? port 0x300 net irq ? vector csintr
device cx0 at isa? port 0x240 net irq 15 drq 7 vector cxintr
device ed0 at isa? port 0x280 net irq 5 iomem 0xd8000 vector edintr
device eg0 at isa? port 0x310 net irq 5 vector egintr
device el0 at isa? port 0x300 net irq 9 vector elintr
device ep0 at isa? port 0x300 net irq 10 vector epintr
device ex0 at isa? port? net irq? vector exintr
device fe0 at isa? port 0x300 net irq ? vector feintr
device ie0 at isa? port 0x300 net irq 5 iomem 0xd0000 vector ieintr
device ie1 at isa? port 0x360 net irq 7 iomem 0xd0000 vector ieintr
device le0 at isa? port 0x300 net irq 5 iomem 0xd0000 vector le_intr
device lnc0 at isa? port 0x300 net irq 10 drq 0 vector lncintr
device sr0 at isa? port 0x300 net irq 5 iomem 0xd0000 vector srintr
options		WLCACHE		# enables the signal-strength cache
options		WLDEBUG		# enables verbose debugging output
device wl0 at isa? port 0x300 net irq ? vector wlintr
# We can (bogusly) include both the dedicated PCCARD drivers and the generic
# support when COMPILING_LINT.
device ze0 at isa? port 0x300 net irq 5 iomem 0xd8000 vector zeintr
device zp0 at isa? port 0x300 net irq 10 iomem 0xd8000 vector zpintr

#
# ATM related options
#
# The `en' device provides support for Efficient Networks (ENI)
# ENI-155 PCI midway cards, and the Adaptec 155Mbps PCI ATM cards (ANA-59x0).
#
# atm pseudo-device provides generic atm functions and is required for
# atm devices.
# NATM enables the netnatm protocol family that can be used to
# bypass TCP/IP.
#
# the current driver supports only PVC operations (no atm-arp, no multicast).
# for more details, please read the original documents at 
# http://www.ccrc.wustl.edu/pub/chuck/bsdatm/wucs.html
#
pseudo-device	atm
device en0
device en1
options		NATM			#native ATM

#
# Audio drivers: `snd', `sb', `pas', `gus', `pca'
#
# snd: Voxware sound support code
# sb: SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum
# sbxvi: SoundBlaster 16
# sbmidi: SoundBlaster 16 MIDI interface
# pas: ProAudioSpectrum PCM and MIDI
# gus: Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX
# gusxvi: Gravis Ultrasound 16-bit PCM	(do not use)
# mss: Microsoft Sound System
# css: Crystal Sound System (CSS 423x PnP)
# sscape: Ensoniq Soundscape MIDI interface
# sscape_mss: Ensoniq Soundscape PCM (requires sscape)
# opl: Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum
# uart: stand-alone 6850 UART for MIDI
# mpu: Roland MPU-401 stand-alone card
# 
# Beware!  The addresses specified below are also hard-coded in
# i386/isa/sound/sound_config.h.  If you change the values here, you
# must also change the values in the include file.
#
# pcm: PCM audio through various sound cards.
#
# This is the work in progress from Luigi Rizzo.  This has support for
# CS423x based cards, OPTi931, SB16 PnP, GusPnP.  For more information
# about this driver, take a look at sys/i386/isa/snd/README.
#
# The flags of the device tells the device a bit more info about the
# device that normally is obtained through the PnP interface.
#	bit  2..0   secondary DMA channel;
#	bit  4      set if the board uses two dma channels;
#	bit 15..8   board type, overrides autodetection; leave it
#		    zero if don't know what to put in (and you don't,
#		    since this is unsupported at the moment...).
#
# This driver will use the new PnP code if it's available.
#
# pca: PCM audio through your PC speaker
#
# If you have a GUS-MAX card and want to use the CS4231 codec on the
# card the drqs for the gus max must be 8 bit (1, 2, or 3).
# 
# If you would like to use the full duplex option on the gus, then define
# flags to be the ``read dma channel''.
#
# options BROKEN_BUS_CLOCK	#PAS-16 isn't working and OPTI chipset
# options SYMPHONY_PAS		#PAS-16 isn't working and SYMPHONY chipset
# options EXCLUDE_SBPRO		#PAS-16
# options SBC_IRQ=5		#PAS-16. Must match irq on sb0 line.
# PAS16: The order of the pas0/sb0/opl0 is important since the
#	sb emulation is enabled in the pas-16 attach.
#
# To overide the GUS defaults use:
# options GUS_DMA2
# options GUS_DMA
# options GUS_IRQ
#
# The i386/isa/sound/sound.doc has more information.

# Controls all "VOXWARE" driver sound devices.  See Luigi's driver
# below for an alternate which may work better for some cards.
#
controller	snd0
device pas0     at isa? port 0x388 irq 10 drq 6 vector pasintr
device sb0      at isa? port 0x220 irq 5 drq 1 vector sbintr
device sbxvi0   at isa? drq 5
device sbmidi0  at isa? port 0x330
device awe0     at isa? port 0x620
device gus0 at isa? port 0x220 irq 12 drq 1 vector gusintr
#device gus0 at isa? port 0x220 irq 12 drq 1 flags 0x3 vector gusintr
device mss0 at isa? port 0x530 irq 10 drq 1 vector adintr
device css0	at isa? port 0x534 irq 5 drq 1 flags 0x08 vector adintr
device sscape0  at isa? port 0x330 irq 9 drq 0 vector sscapeintr
device trix0    at isa? port 0x330 irq 6 drq 0 vector sscapeintr
device sscape_mss0  at isa? port 0x534 irq 5 drq 1 vector sndintr
device opl0     at isa? port 0x388
device mpu0     at isa? port 0x330 irq 6 drq 0
device uart0 at isa? port 0x330 irq 5 vector "m6850intr"

# Luigi's snd code (use INSTEAD of snd0 and all VOXWARE drivers!).
# You may also wish to enable the pnp controller with this, for pnp
# sound cards.
#
#device pcm0 at isa? port ? tty irq 10 drq 1 flags 0x0 vector pcmintr

# Not controlled by `snd'
device pca0 at isa? port IO_TIMER1 tty

#
# Miscellaneous hardware:
#
# mcd: Mitsumi CD-ROM
# scd: Sony CD-ROM
# matcd: Matsushita/Panasonic CD-ROM
# wt: Wangtek and Archive QIC-02/QIC-36 tape drives
# ctx: Cortex-I frame grabber
# apm: Laptop Advanced Power Management (experimental)
# spigot: The Creative Labs Video Spigot video-acquisition board
# meteor: Matrox Meteor video capture board
# alog: Industrial Computer Source AIO8-P driver
# cy: Cyclades serial driver
# dgb: Digiboard PC/Xi and PC/Xe series driver (ALPHA QUALITY!)
# dgm: Digiboard PC/Xem driver
# gp:  National Instruments AT-GPIB and AT-GPIB/TNT board
# asc: GI1904-based hand scanners, e.g. the Trust Amiscan Grey
# gsc: Genius GS-4500 hand scanner.
# joy: joystick
# labpc: National Instrument's Lab-PC and Lab-PC+
# rc: RISCom/8 multiport card
# rp: Comtrol Rocketport(ISA) - single card
# tw: TW-523 power line interface for use with X-10 home control products
# si: Specialix SI/XIO 4-32 port terminal multiplexor
# stl: Stallion EasyIO and EasyConnection 8/32 (cd1400 based)
# stli: Stallion EasyConnection 8/64, ONboard, Brumby (intelligent)

#
# Notes on APM
#  The flags takes the following meaning for apm0:
#    0x0020  Statclock is broken.
#    0x0011  Limit APM protocol to 1.1 or 1.0
#    0x0010  Limit APM protocol to 1.0
#
#
# Notes on the spigot:
#  The video spigot is at 0xad6.  This port address can not be changed.
#  The irq values may only be 10, 11, or 15
#  I/O memory is an 8kb region.  Possible values are:
#    0a0000, 0a2000, ..., 0fffff, f00000, f02000, ..., ffffff
#    The start address must be on an even boundary.
#  Add the following option if you want to allow non-root users to be able
#  to access the spigot.  This option is not secure because it allows users
#  direct access to the I/O page. 
#  	options SPIGOT_UNSECURE
#

# Notes on the Comtrol Rocketport driver:
#
# The exact values used for rp0 depend on how many boards you have
# in the system.  The manufacturer's sample configs are listed as:
#
#   Comtrol Rocketport ISA single card
#               device  rp0     at isa? port 0x280 tty
#
#   If instead you have two ISA cards, one installed at 0x100 and the
#   second installed at 0x180, then you should add the following to
#   your kernel configuration file:
#
#               device  rp0     at isa? port 0x100 tty
#               device  rp1     at isa? port 0x180 tty
#
#   For 4 ISA cards, it might be something like this:
#
#               device  rp0     at isa? port 0x180 tty
#               device  rp1     at isa? port 0x100 tty
#               device  rp2     at isa? port 0x340 tty
#               device  rp3     at isa? port 0x240 tty
#
#   And for PCI cards, you only need say:
#
#               device rp0
#               device rp1
#               ...
#   Note: Make sure that any Rocketport PCI devices are specified BEFORE the
#   ISA Rocketport devices.

# Notes on the Digiboard driver:
#
# The following flag values have special meanings:
#	0x01 - alternate layout of pins (dgb & dgm)
#	0x02 - use the windowed PC/Xe in 64K mode (dgb only)

# Notes on the Specialix SI/XIO driver:
#  **This is NOT a Specialix supported Driver!**
#  The host card is memory, not IO mapped.
#  The Rev 1 host cards use a 64K chunk, on a 32K boundary.
#  The Rev 2 host cards use a 32K chunk, on a 32K boundary.
#  The cards can use an IRQ of 11, 12 or 15.

# Notes on the Stallion stl and stli drivers:
#  See src/i386/isa/README.stl for complete instructions.
#  This is version 0.0.5alpha, unsupported by Stallion.
#  The stl driver has a secondary IO port hard coded at 0x280.  You need
#     to change src/i386/isa/stallion.c if you reconfigure this on the boards.
#  The "flags" and "iosiz" settings on the stli driver depend on the board:
#	EasyConnection 8/64 ISA:     flags 23         iosiz 0x1000
#	EasyConnection 8/64 EISA:    flags 24         iosiz 0x10000
#	EasyConnection 8/64 MCA:     flags 25         iosiz 0x1000
#	ONboard ISA:                 flags 4          iosiz 0x10000
#	ONboard EISA:                flags 7          iosiz 0x10000
#	ONboard MCA:                 flags 3          iosiz 0x10000
#	Brumby:                      flags 2          iosiz 0x4000
#	Stallion:                    flags 1          iosiz 0x10000

device		mcd0	at isa? port 0x300 bio irq 10 vector mcdintr
# for the Sony CDU31/33A CDROM
device		scd0	at isa? port 0x230 bio
# for the SoundBlaster 16 multicd - up to 4 devices
controller      matcd0  at isa? port 0x230 bio
device		wt0	at isa? port 0x300 bio irq 5 drq 1 vector wtintr
device		ctx0	at isa? port 0x230 iomem 0xd0000
device		spigot0 at isa? port 0xad6 irq 15 iomem 0xee000 vector spigintr
device		apm0	at isa? 
device		gp0	at isa? port 0x2c0 tty
device		gsc0	at isa? port "IO_GSC1" tty drq 3
device		joy0	at isa? port "IO_GAME"
device          alog0   at isa? port 0x260 tty irq 5 vector alogintr
device		cy0	at isa? tty irq 10 iomem 0xd4000 iosiz 0x2000 vector cyintr
device		dgb0	at isa? port 0x220 iomem 0xfc0000 iosiz ? tty
device		dgm0	at isa? port 0x104 iomem 0xd00000 iosiz ? tty
device		labpc0	at isa? port 0x260 tty irq 5 vector labpcintr
device          rc0     at isa? port 0x220 tty irq 12 vector rcintr
device          rp0     at isa? port 0x280 tty
# the port and irq for tw0 are fictitious
device          tw0     at isa? port 0x380 tty irq 11 vector twintr
device		si0	at isa? iomem 0xd0000 tty irq 12
device		asc0	at isa? port IO_ASC1 tty drq 3 irq 10 vector ascintr
device		bqu0	at isa? port 0x150
device		stl0	at isa? port 0x2a0 tty irq 10 vector stlintr
device		stli0	at isa? port 0x2a0 tty iomem 0xcc000 flags 23 iosiz 0x1000
# You are unlikely to have the hardware for loran0 <phk@FreeBSD.org>
device		loran0	at isa? port ? tty irq 5 vector loranintr
# HOT1 Xilinx 6200 card (www.vcc.com)
device		xrpu0

#
# EISA devices:
#
# The EISA bus device is eisa0.  It provides auto-detection and
# configuration support for all devices on the EISA bus.
#
# The `ahb' device provides support for the Adaptec 174X adapter.
#
# The `ahc' device provides support for the Adaptec 274X and 284X
# adapters.  The 284X, although a VLB card responds to EISA probes.
#
# fea: DEC DEFEA EISA FDDI adapter
#
controller	eisa0
controller	ahb0
controller	ahc0
device		fea0

# enable tagged command queuing, which is a major performance win on
# devices that support it (and controllers with enough SCB's)
options	AHC_TAGENABLE

# enable SCB paging - See the ahc.4 man page
options	AHC_SCBPAGING_ENABLE

# The aic7xxx driver will attempt to use memory mapped I/O for all PCI
# controllers that have it configured only if this option is set. Unfortunately,
# this doesn't work on some motherboards, which prevents it from being the
# default.
options AHC_ALLOW_MEMIO

# By default, only 10 EISA slots are probed, since the slot numbers
# above clash with the configuration address space of the PCI subsystem,
# and the EISA probe is not very smart about this.  This is sufficient
# for most machines, but in particular the HP NetServer LC series comes
# with an onboard AIC7770 dual-channel SCSI controller on EISA slot #11,
# thus you need to bump this figure to 12 for them.
options	"EISA_SLOTS=12"

#
# PCI devices & PCI options:
#
# The main PCI bus device is `pci'.  It provides auto-detection and
# configuration support for all devices on the PCI bus, using either
# configuration mode defined in the PCI specification.
#
# The `ahc' device provides support for the Adaptec 29/3940(U)(W)
# and motherboard based AIC7870/AIC7880 adapters.
#
# The `ncr' device provides support for the NCR 53C810 and 53C825
# self-contained SCSI host adapters.
#
# The `isp' device provides support for the Qlogic ISP 1020, 1040
# nd 1040B PCI SCSI host adapters, as well as the Qlogic ISP 2100
# FC/AL Host Adapter.
#
# The `amd' device provides support for the Tekram DC-390 and 390T
# SCSI host adapters, but is expected to work with any AMD 53c974
# PCI SCSI chip and the AMD Ethernet+SCSI Combo chip, after some
# local patches were applied to the sources (that had originally
# been written by Tekram and limited to work with their SCSI cards).
#
# The `de' device provides support for the Digital Equipment DC21040
# self-contained Ethernet adapter.
#
# The `fxp' device provides support for the Intel EtherExpress Pro/100B
# PCI Fast Ethernet adapters.
#
# The 'tl' device provides support for the Texas Instruments TNETE100
# series 'ThunderLAN' cards and integrated ethernet controllers. This
# includes several Compaq Netelligent 10/100 cards and the built-in
# ethernet controllers in several Compaq Prosignia, Proliant and
# Deskpro systems. It also supports several Olicom 10Mbps and 10/100
# boards.
#
# The `tx' device provides support for the SMC 9432TX cards.
#
# The `vx' device provides support for the 3Com 3C590 and 3C595
# early support
#
# The `xl' driver provides support for the 3Com 3c900, 3c905 and
# 3c905B (Fast) Etherlink XL cards and integrated controllers. This
# includes the integrated 3c905B-TX chips in certain Dell Optiplex and
# Dell Precision desktop machines and the integrated 3c905-TX chips
# in Dell Latitude laptop docking stations.
#
# The `fpa' device provides support for the Digital DEFPA PCI FDDI
# adapter. pseudo-device fddi is also needed.
#
# The `meteor' device is a PCI video capture board. It can also have the
# following options:
#   options METEOR_ALLOC_PAGES=xxx	preallocate kernel pages for data entry
#	figure (ROWS*COLUMN*BYTES_PER_PIXEL*FRAME+PAGE_SIZE-1)/PAGE_SIZE
#   options METEOR_DEALLOC_PAGES	remove all allocated pages on close(2)
#   options METEOR_DEALLOC_ABOVE=xxx	remove all allocated pages above the
#	specified amount. If this value is below the allocated amount no action
#	taken
#   option METEOR_SYSTEM_DEFAULT={METEOR_PAL|METEOR_NTSC|METEOR_SECAM}, used
#	for initialization of fps routine when a signal is not present.
#
# The 'bktr' device is a PCI video capture device using the Brooktree 
# bt848/bt848a/bt849/bt878/bt879 chipset. When used with a TV Tuner it forms a
# TV card, eg Miro PC/TV,Hauppauge WinCast/TV WinTV, VideoLogic Captivator,
# Intel Smart Video III, AverMedia, IMS Turbo. 
# The following options can be used to override the auto detection
#   options OVERRIDE_CARD=xxx
#   options OVERRIDE_TUNER=xxx
#   options OVERRIDE_MSP=1
#   options OVERRIDE_DBX=1
# The current values are found in /usr/src/sys/pci/brooktree848.c
#
#   option BROOKTREE_SYSTEM_DEFAULT=BROOKTREE_PAL
# This is required for Dual Crystal (28&35Mhz) boards where PAL is used
# to prevent hangs during initialisation.  eg VideoLogic Captivator PCI.
#
# PAL or SECAM users who have a 28Mhz crystal (and no 35Mhz crystal)
# must enable PLL mode with this option. eg some new Hauppauge cards.
#   option BKTR_USE_PLL
#
# Using sysctl(8) run-time overrides on a per-card basis can be made
#
controller	pci0
controller	ahc1
controller	ncr0
controller	isp0
controller	amd0
device		de0
device		fxp0
device		tl0
device		tx0
device		vx0
device		xl0
device		fpa0
device		meteor0
device		bktr0

#
# PCI options
#
#options	PCI_QUIET	#quiets PCI code on chipset settings

#
# PCCARD/PCMCIA
#
# card: slot controller
# pcic: slots
controller	card0
device		pcic0 at card?
device		pcic1 at card?

# You may need to reset all pccards after resuming
options		PCIC_RESUME_RESET	# reset after resume

#
# Laptop/Notebook options:
#
# See also:
#  apm under `Miscellaneous hardware'
# above.

# For older notebooks that signal a powerfail condition (external
# power supply dropped, or battery state low) by issuing an NMI:

options		POWERFAIL_NMI	# make it beep instead of panicing

#
# SMB bus
#
# System Management Bus support provided by the 'smbus' device.
#
# Supported devices:
# smb	standard io
#
# Supported interfaces:
# iicsmb I2C to SMB bridge
#
controller smbus0

device smb0	at smbus?

#
# I2C Bus
#
# Philips i2c bus support is provided by the `iicbus' device.
#
# Supported devices:
# ic	i2c network interface
# iic	i2c standard io
#
# Supported interfaces:
# pcf	Philips PCF8584 ISA-bus controller
#
controller iicbus0

device ic0	at iicbus?
device iic0	at iicbus?
device iicsmb0	at iicbus?

controller pcf0	at isa? port 0x320 net irq 5 vector pcfintr

#
# Parallel-Port Bus
#
# Parallel port bus support is provided by the `ppbus' device.
# Multiple devices may be attached to the parallel port, devices
# are automatically probed and attached when found.
#
# Supported devices:
# vpo	Iomega Zip Drive
#	Requires SCSI disk support ('scbus' and 'sd'), best
#	performance is achieved with ports in EPP 1.9 mode.
# nlpt	Parallel Printer
# plip	Parallel network interface
# ppi	General-purpose I/O ("Geek Port")
#
# Supported interfaces:
# ppc	ISA-bus parallel port interfaces.  
#
controller	ppbus0
controller	vpo0	at ppbus?
device		nlpt0	at ppbus?
device		plip0	at ppbus?
device		ppi0	at ppbus?
device		pps0	at ppbus?

controller	ppc0	at isa? disable port ? tty irq 7 vector ppcintr

# Kernel BOOTP support 

options		BOOTP		# Use BOOTP to obtain IP address/hostname
options		BOOTP_NFSROOT	# NFS mount root filesystem using BOOTP info
options		"BOOTP_NFSV3"	# Use NFS v3 to NFS mount root
options		BOOTP_COMPAT	# Workaround for broken bootp daemons.
options		"BOOTP_WIRED_TO=fxp0" # Use interface fxp0 for BOOTP

# If you want to disable loadable kernel modules (LKM), you
# might want to use this option.
#options		NO_LKM

#
# Add tie-ins for a hardware watchdog.  This only enable the hooks;
# the user must still supply the actual driver.
#
options		HW_WDOG

#
# Set the number of PV entries per process.  Increasing this can
# stop panics related to heavy use of shared memory. However, that can
# (combined with large amounts of physical memory) cause panics at
# boot time due the kernel running out of VM space.
#
# If you're tweaking this, you might also want to increase the sysctls
# "vm.v_free_min", "vm.v_free_reserved", and "vm.v_free_target".
#
# The value below is the one more than the default.
#
options         "PMAP_SHPGPERPROC=201"

# More undocumented options for linting.

options		CLK_CALIBRATION_LOOP
options		"CLK_USE_I8254_CALIBRATION"
options		CLK_USE_TSC_CALIBRATION
options		CLUSTERDEBUG
options		COMPAT_LINUX
options		CPU_UPGRADE_HW_CACHE
options		DEBUG
options		"DEBUG_1284"
#options	DISABLE_PSE
options		"EXT2FS"
options		"I586_PMC_GUPROF=0x70000"
options		"IBCS2"
options		KEY
options		KEY_DEBUG
options		LOCKF_DEBUG
options		LOUTB
options		KBD_MAXRETRY=4
options		KBD_MAXWAIT=6
options		KBD_RESETDELAY=201
options		KBDIO_DEBUG=2
options		MSGMNB=2049
options		MSGMNI=41
options		MSGSEG=2049
options		MSGSSZ=16
options		MSGTQL=41
options		NBUF=512
options		NETATALKDEBUG
options		NMBCLUSTERS=1024
options		NPX_DEBUG
options		PANIC_REBOOT_WAIT_TIME=16
options		"PCVT_24LINESDEF"
options		PCVT_CTRL_ALT_DEL
options		PCVT_EMU_MOUSE
options		PCVT_FREEBSD=211
options		PCVT_META_ESC
options		PCVT_NSCREENS=9
options		PCVT_PRETTYSCRNS
options		PCVT_SCREENSAVER
options		PCVT_USEKBDSEC
options		"PCVT_VT220KEYB"
options		PSM_DEBUG=1
options		"SCSI_2_DEF"
options		SCSI_DELAY=8	# Be pessimistic about Joe SCSI device
options		SCSI_NCR_DEBUG
options		SCSI_NCR_DFLT_TAGS=4
options		SCSI_NCR_MAX_SYNC=10000
options		SCSI_NCR_MAX_WIDE=1
options		SCSI_NCR_MYADDR=7
options		SEMMAP=31
options		SEMMNI=11
options		SEMMNS=61
options		SEMMNU=31
options		SEMMSL=61
options		SEMOPM=101
options		SEMUME=11
options		SHOW_BUSYBUFS	# List buffers that prevent root unmount
options		SHMALL=1025
options		"SHMMAX=(SHMMAXPGS*PAGE_SIZE+1)"
options		SHMMAXPGS=1025
options		SHMMIN=2
options		SHMMNI=33
options		SHMSEG=9
options		SI_DEBUG
options		SIMPLELOCK_DEBUG
options		SPX_HACK

# The 'dpt' driver provides support for DPT controllers (http://www.dpt.com/).
# These have hardware RAID-{0,1,5} support, and do multi-initiator I/O.
# The DPT controllers are commonly re-licensed under other brand-names -
# some controllers by Olivetti, Dec, HP, AT&T, SNI, AST, Alphatronic, NEC and
# Compaq are actually DPT controllers.
#
# See sys/dev/dpt for debugging and other subtle options.
#   DPT_VERIFY_HINTR        Performs some strict hardware interrupts testing.
#                           Only use if you suspect PCI bus corruption problems
#   DPT_RESTRICTED_FREELIST Normally, the freelisat used by the DPT for queue
#                           will grow to accomodate increased use.  This growth
#                           will NOT shrink.  To restrict the number of queue
#                           slots to exactly what the DPT can hold at one time,
#                           enable this option.
#   DPT_MEASURE_PERFORMANCE Enables a set of (semi)invasive metrics. Various
#                           instruments are enabled.  The tools in 
#                           /usr/sbin/dpt_* assume these to be enabled.
#   DPT_FREELIST_IS_STACK   For optimal L{1,2} CPU cache utilization, enable
#                           this option.  Otherwise, the transaction queue is
#                           a LIFO.  I cannot measure the performance gain.
#   DPT_HANDLE_TIMEOUTS     Normally device timeouts are handled by the DPT.
#                           If you ant the driver to handle timeouts, enable
#                           this option.  If your system is very busy, this
#                           option will create more trouble than solve.
#   DPT_TIMEOUT_FACTOR      Used to compute the excessive amount of time to
#                           wait when timing out with the above option.
#  DPT_DEBUG_xxxx           These are controllable from sys/dev/dpt/dpt.h
#  DPT_LOST_IRQ             When enabled, will try, once per second, to catch
#                           any interrupt that got lost.  Seems to help in some
#                           DPT-firmware/Motherboard combinations.  Minimal
#                           cost, great benefit.
#  DPT_RESET_HBA            Make "reset" actually reset the controller
#                           instead of fudging it.  Only enable this if you
#			    are 100% certain you need it.
#  DPT_SHUTDOWN_SLEEP       Reset controller if a request take more than
#                           this number of seconds.  Do NOT enable this
#			    unless you are really, really, really certain
#			    you need it.  You are advised to call Simon (the
#			    driver author) before setting it, and NEVER,
#			    EVER set it to less than 300s (5 minutes).

controller      dpt0

# DPT options
options DPT_VERIFY_HINTR
options DPT_RESTRICTED_FREELIST
options DPT_MEASURE_PERFORMANCE
options DPT_FREELIST_IS_STACK
options DPT_HANDLE_TIMEOUTS
options DPT_TIMEOUT_FACTOR=4
options	DPT_INTR_DELAY=200      # Some motherboards need that
options DPT_LOST_IRQ
options DPT_RESET_HBA

# Don't EVER set this without having talked to Simon Shapiro on the phone
# first.
options DPT_SHUTDOWN_SLEEP=500
