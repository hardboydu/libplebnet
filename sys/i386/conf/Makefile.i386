# Copyright 1990 W. Jolitz
#	from: @(#)Makefile.i386	7.1 5/10/91
#	$Id: Makefile.i386,v 1.41 1994/10/01 21:43:24 rgrimes Exp $
#
# Makefile for FreeBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/i386/conf/``machineid''
# after which you should do
#	 config machineid
# Generic makefile changes should be made in
#	/sys/i386/conf/Makefile.i386
# after which config should be rerun for all machines.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE INVISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas
#
TOUCH=	touch -f -c
LD=	/usr/bin/ld
CC=	cc 
CPP=	cpp
DBSYM=	/usr/sbin/dbsym
.if defined(DEBUG)
.if defined(NOSTRIP)
STRIP=  echo '(skipping) strip'
.else
STRIP=  cp $@ $@.sym; strip
.endif
.else
STRIP=  strip
.endif

.if exists(./@/.)
S=	./@
.else
S=	../..
.endif
I386=	${S}/i386

.if !defined(CWARNFLAGS)
CWARNFLAGS=-W -Wreturn-type -Wcomment -Wredundant-decls
.endif
#
# The following flag is next up for working on:
# -Wnested-externs 
#
# When working on removing warnings from code, the `-Werror' flag should be
# of material assistance.
#
.if !defined(COPTFLAGS)
COPTFLAGS=-O
.endif
INCLUDES= -I. -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -DKERNEL -Di386 -DLOAD_ADDRESS=0x${LOAD_ADDRESS}
ASFLAGS=
CFLAGS=	${COPTFLAGS} ${CWARNFLAGS} ${DEBUG} ${COPTS}
LOAD_ADDRESS?=	F0100000

NORMAL_C= ${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C= ${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
# XXX errors leak out of all the pipes.  Should use cc *.S.
# XXX LOCORE means "don't declare C stuff" not "for locore.s".
NORMAL_S= ${CPP} -I. -DLOCORE ${COPTS} $< | ${AS} ${ASFLAGS} -o $*.o
DRIVER_C= ${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C= ${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<

SFILES=	${I386}/i386/exception.s ${I386}/i386/microtime.s \
	${I386}/i386/support.s ${I386}/i386/swtch.s ${I386}/apm/apm_setup.s
SYSTEM_CFILES= ioconf.c param.c vnode_if.c
SYSTEM_SFILES= ${I386}/i386/locore.s
SYSTEM_OBJS=locore.o vnode_if.o ${OBJS} ioconf.o param.o 
SYSTEM_DEP=Makefile symbols.sort ${SYSTEM_OBJS} libkern.a
SYSTEM_LD_HEAD= 	@echo loading $@; rm -f $@
SYSTEM_LD= @${LD} -Bstatic -Z -T ${LOAD_ADDRESS} -o $@ -X ${SYSTEM_OBJS} vers.o libkern.a
SYSTEM_LD_TAIL= @echo rearranging symbols; symorder symbols.sort $@; \
	${DBSYM} -fT ${LOAD_ADDRESS} $@; ${STRIP} -x $@; size $@; chmod 755 $@

# (XXX) ok, this is weird.  but we've got a working ed, and a broken ex, and
# the script is identical for either... -- cgd
#
GPROF.EX=	/usr/src/lib/csu.i386/gprof.ex
PROFILE_C=	${CC} -S -c ${CFLAGS} $< ; \
		ed - $*.s < ${GPROF.EX} ; \
		${AS} -o $@ $*.s ; \
		rm -f $*.s

%OBJS

%CFILES

%LOAD

# This is slightly different from before in that if you define PROF
# to anything, it will assume profiling.  Don't do "PROF=" to turn
# profiling off!
.if exists($S/libkern/obj)
LIBKERNP=$S/libkern/obj
.else
LIBKERNP=$S/libkern
.endif

.if defined(PROF)
LIBKERN=${LIBKERNP}/libkern_p.a
.else
LIBKERN=${LIBKERNP}/libkern.a
.endif

libkern.a: ${LIBKERN}
	@rm -f libkern.a
	ln -s ${LIBKERN} libkern.a

${LIBKERN}:
	@(cd $S/libkern; make)

clean:
	rm -f eddep *kernel tags *.o locore.i [a-uw-z]*.s \
		errs linterrs makelinks genassym ,assym.s stamp-assym

#lint: /tmp param.c
#	@lint -hbxn -I. -DGENERIC -Dvolatile= ${COPTS} ${PARAM} \
#	  ${I386}/i386/Locore.c ${CFILES} ioconf.c param.c | \
#	    grep -v 'struct/union .* never defined' | \
#	    grep -v 'possible pointer alignment problem'

symbols.sort: ${I386}/i386/symbols.raw
	grep -v '^#' ${I386}/i386/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: ${I386}/i386/locore.s assym.s
	${NORMAL_S}

# everything potentially depends on the Makefile since everything potentially
# depends on the options.  Some things are more dependent on the Makefile for
# historical reasons.
machdep.o: Makefile

# the following is necessary because autoconf.o depends on #if GENERIC
autoconf.o: Makefile

# depend on network configuration
af.o uipc_proto.o locore.o: Makefile

# depends on KDB (cons.o also depends on GENERIC)
trap.o cons.o: Makefile

# this rule stops ./assym.s in .depend from causing problems
./assym.s: assym.s

assym.s: genassym
	./genassym >,assym.s
	if cmp -s assym.s ,assym.s; then \
		rm -f ,assym.s; \
	else \
		rm -f assym.s; \
		mv ,assym.s assym.s; \
	fi

# Some of the defines that genassym outputs may well depend on the 
# value of kernel options.
genassym:	Makefile ${I386}/i386/genassym.c
	${CC} ${INCLUDES} -DKERNEL ${IDENT} ${PARAM} \
		 ${I386}/i386/genassym.c -static -o genassym

# XXX this assumes that the options for NORMAL_C* and DRIVER_C* are identical.
depend: assym.s param.c vnode_if.h
	mkdep ${COPTS} ${CFILES} ${SYSTEM_CFILES}
	mkdep -a -p ${INCLUDES} -DKERNEL ${IDENT} ${PARAM} \
		${I386}/i386/genassym.c
	MKDEP_CPP=${CPP} ; export MKDEP_CPP ; \
	mkdep -a -I. -DLOCORE ${COPTS} ${SFILES} ${SYSTEM_SFILES}

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

tags:
	@echo "see $S/kern/Makefile for tags"

install:
	chflags noschg /kernel
	mv /kernel /kernel.old
	install -c -m 555 -o root -g wheel -fschg kernel /

ioconf.o: ioconf.c $S/sys/param.h machine/pte.h $S/sys/buf.h \
    ${I386}/isa/isa_device.h ${I386}/isa/isa.h ${I386}/isa/icu.h
	${CC} -c ${CFLAGS} ioconf.c

param.c: $S/conf/param.c
	-rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} param.c

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh ${KERN_IDENT} ${IDENT}
	${CC} ${CFLAGS} -c vers.c

vnode_if.c: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src

%RULES

# DO NOT DELETE THIS LINE -- make depend uses it
