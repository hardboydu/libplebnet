#!/bin/sh -
#
# $FreeBSD$
#	Do i386 specific processing
#

echo -n 'Initial rc.i386 initialization:'
if [ "${apm_enable}" = "YES" -o "${apmd_enable}" = "YES" ] ; then
	echo -n ' apm'
	apmconf -e > /dev/null 2>&1
fi

if [ "${apmd_enable}" = "YES" ] ; then
	echo -n ' apmd';	apmd ${apmd_flags}
fi

# Start the SCO binary emulation if requested.
if [ "${ibcs2_enable}" = "YES" ]; then
	echo -n ' ibcs2';		ibcs2 > /dev/null 2>&1
fi

# Start the Linux binary emulation if requested.
if [ "${linux_enable}" = "YES" ]; then
	echo -n ' linux';		linux > /dev/null 2>&1
fi

# Start the SysVR4 binary emulation if requested.
if [ "${svr4_enable}" = "YES" ]; then
	echo -n ' svr4';		svr4 > /dev/null 2>&1
fi

if [ "${xtend_enable}" = "YES" ]; then
 	echo -n ' xtend';	/usr/libexec/xtend
fi
echo '.'

##########################################################################
####### Syscons section						  ########
##########################################################################

# stdin must be redirected because it might be for a serial console
kbddev=/dev/ttyv0
viddev=/dev/ttyv0

echo -n "rc.i386 configuring syscons:"

# keymap
if [ "${keymap}" != "NO" ]; then
	echo -n ' keymap';	kbdcontrol < ${kbddev} -l ${keymap}
fi

# keyrate
if [ "${keyrate}" != "NO" ]; then
	echo -n ' keyrate';	kbdcontrol < ${kbddev} -r ${keyrate}
fi

# keybell
if [ "${keybell}" != "NO" ]; then
	echo -n ' keybell';	kbdcontrol < ${kbddev} -b ${keybell}
fi

# change function keys
if [ "${keychange}" != "NO" ]; then
	echo -n " keychange"
	set - ${keychange}
	while [ $# -gt 0 ]
	do
		kbdcontrol <${kbddev} -f "$1" "$2"
		shift; shift
	done
fi

# cursor type
if [ "${cursor}" != "NO" ]; then
	echo -n ' cursor';	vidcontrol < ${viddev} -c ${cursor}
fi

# screen mapping
if [ "${scrnmap}" != "NO" ]; then
	echo -n ' screen_map';	vidcontrol < ${viddev} -l ${scrnmap}
fi

# font 8x16
if [ "${font8x16}" != "NO" ]; then
	echo -n ' font8x16';	vidcontrol < ${viddev} -f 8x16 ${font8x16}
fi

# font 8x14
if [ "${font8x14}" != "NO" ]; then
	echo -n ' font8x14';	vidcontrol < ${viddev} -f 8x14 ${font8x14}
fi

# font 8x8
if [ "${font8x8}" != "NO" ]; then
	echo -n ' font8x8';	vidcontrol < ${viddev} -f 8x8 ${font8x8}
fi

# blank time
if [ "${blanktime}" != "NO" ]; then
	echo -n ' blank_time';	vidcontrol < ${viddev} -t ${blanktime}
fi

# screen saver
if [ "${saver}" != "NO" ] ; then
	echo -n ' screensaver'
	for i in `kldstat | awk '$5 ~ "^splash_.*$" { print $5 }'`; do
		kldunload ${i}
	done
	kldstat -v | grep -q _saver || kldload ${saver}_saver
fi

# mouse daemon
if [ "${moused_enable}" = "YES" ] ; then
	echo -n ' moused'
	moused ${moused_flags} -p ${moused_port} -t ${moused_type}
	vidcontrol < ${viddev} -m on
fi

# set this mode for all virtual screens
if [ -n "${allscreens_flags}" ] ; then
	echo -n ' allscreens'
	for ttyv in /dev/ttyv*
	do
		vidcontrol < ${ttyv} ${allscreens_flags}
	done
fi
echo '.'

# interrupts for /dev/random device
if [ "${rand_irqs}" != "NO" ] ; then
	echo -n 'entropy IRQs:'
	for irq in ${rand_irqs}; do
		echo -n " ${irq}" && rndcontrol -q -s ${irq}
	done
	echo '.'
fi
