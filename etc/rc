#!/bin/sh
#	$Id: rc,v 1.122 1997/05/05 07:08:30 jkh Exp $
#	From: @(#)rc	5.27 (Berkeley) 6/5/91

# System startup script run by init on autoboot
# or after single-user.
# Output and error are redirected to console by init,
# and the console is the controlling terminal.

# Note that almost all the user-configurable behavior is no longer in
# this file, but rather in /etc/rc.conf.  Please check this file
# first before contemplating any changes here.

stty status '^T'

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user after fsck.
trap : 2
trap : 3	# shouldn't be needed

HOME=/; export HOME
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin
export PATH

# Configure ccd devices.
if [ -f /etc/ccd.conf ]; then
	ccdconfig -C
fi

swapon -a

if [ $1x = autobootx ]; then
	echo Automatic reboot in progress...
	fsck -p
	case $? in
	0)
		;;
	2)
		exit 1
		;;
	4)
		reboot
		echo "reboot failed... help!"
		exit 1
		;;
	8)
		echo "Automatic file system check failed... help!"
		exit 1
		;;
	12)
		echo "Reboot interrupted"
		exit 1
		;;
	130)
		# interrupt before catcher installed
		exit 1
		;;
	*)
		echo "Unknown error in reboot"
		exit 1
		;;
	esac
else
	echo Skipping disk checks ...
fi

trap "echo 'Reboot interrupted'; exit 1" 3

# root must be read/write both for NFS diskless and for VFS LKMs before
# proceeding any further.
mount -u -o rw /
if [ $? != 0 ]; then
	echo "Filesystem mount failed, startup aborted"
	exit 1
fi

umount -a >/dev/null 2>&1

mount -a -t nonfs
if [ $? != 0 ]; then
	echo "Filesystem mount failed, startup aborted"
	exit 1
fi

# If there is a global system configuration file, suck it in.
if [ -f /etc/rc.conf ]; then
    . /etc/rc.conf
fi

# If old file exists, whine until they fix it.
if [ -f /etc/sysconfig ]; then
	echo "Warning: /etc/sysconfig has been replaced by /etc/rc.conf."
	echo "You should switch to /etc/rc.conf ASAP to eliminate this warning."
fi

adjkerntz -i

# Keep a copy of the boot messages around
dmesg > /var/run/dmesg.boot


# Add additional swapfile, if configured.
if [ "x$swapfile" != "xNO" -a -w "$swapfile" -a -b /dev/vn0b ]; then
	echo "Adding $swapfile as additional swap."
	vnconfig /dev/vn0b $swapfile && swapon /dev/vn0b
fi

# configure serial devices
if [ -f /etc/rc.serial ]; then
	. /etc/rc.serial
fi

# start up PC-card configuration
if [ -f /etc/rc.pccard ]; then
	. /etc/rc.pccard
fi

# start up the initial network configuration.
if [ -f /etc/rc.network ]; then
	. /etc/rc.network	# We only need to do this once.
	network_pass1
fi

mount -a -t nfs >/dev/null 2>&1

# Whack the pty perms back into shape.
chmod 666 /dev/tty[pqrsPQRS]*

# clean up left-over files
rm -f /etc/nologin
rm -f /var/spool/lock/*
rm -rf /var/spool/uucp/.Temp/*
(cd /var/run && { cp /dev/null utmp; chmod 644 utmp; })

# enable dumpdev so that savecore can see it
if [ "X${dumpdev}" != X"NO" -a -e ${dumpdev} ]; then
	dumpon ${dumpdev}
fi

# /var/crash should be a directory or a symbolic link
# to the crash directory if core dumps are to be saved.
if [ "X${savecore_enable}" = X"YES" -a -d /var/crash ]; then
	echo -n checking for core dump...
	savecore /var/crash
fi

# snapshot any kernel -c changes back to disk
echo 'recording kernel -c changes'
dset -q

echo -n 'additional daemons:'
# start system logging and name service (named needs to start before syslogd
# if you don't have a /etc/resolv.conf)
#
if [ "X${syslogd_enable}" = X"YES" ]; then
	# Transitional symlink (for the next couple of years :) until all
	# binaries had a chance to move towards /var/run/log.
	if [ ! -h /dev/log ] ; then
		# might complain for r/o root f/s
		ln -sf /var/run/log /dev/log
	fi

	rm -f /var/run/log
	echo -n ' syslogd';		syslogd ${syslogd_flags}
fi

if [ "X${tickadj_enable}" = X"YES" ]; then
	echo -n ' tickadj';	tickadj ${tickadj_flags--Aq}
fi
echo '.'

if [ -n "$network_pass1_done" ]; then
    network_pass2
fi

# Check the quotas (must be after ypbind if using NIS)
if [ "X${check_quotas}" = X"YES" ]; then
	echo -n 'checking quotas:'
	quotacheck -a
	echo ' done.'
	quotaon -a
fi

if [ -n "$network_pass2_done" ]; then
    network_pass3
fi


# build ps databases
kvm_mkdb 
dev_mkdb

# check the password temp/lock file
if [ -f /etc/ptmp ]
then
	logger -s -p auth.err \
	"password file may be incorrect -- /etc/ptmp exists"
fi

if [ "X${accounting_enable}" = X"YES" -a -d /var/account ]; then
	echo 'turning on accounting'
	if [ ! -e /var/account/acct ]; then
		touch /var/account/acct
	fi
	accton /var/account/acct
fi

# Make shared lib searching a little faster.  Leave /usr/lib first if you
# add your own entries or you may come to grief.
_LDC=/usr/lib
if [ -d /usr/lib/compat ]; then _LDC="${_LDC} /usr/lib/compat" ; fi
if [ -d /usr/X11R6/lib ]; then _LDC="${_LDC} /usr/X11R6/lib" ; fi
if [ -d /usr/local/lib ]; then _LDC="${_LDC} /usr/local/lib" ; fi
echo 'setting ldconfig path:' ${_LDC}
ldconfig ${_LDC}

# Now start up miscellaneous daemons that don't belong anywhere else
#
echo -n starting standard daemons:
echo -n ' inetd';		inetd ${inetd_flags}
echo -n ' cron';		cron

if [ "X${lpd_enable}" = X"YES" ]; then
	echo -n ' printer';		lpd
fi

if [ "X${sendmail_enable}" = X"YES" -a -r /etc/sendmail.cf ]; then
	echo -n ' sendmail';	/usr/sbin/sendmail ${sendmail_flags}
fi

echo '.'

# configure implementation specific stuff
arch=`uname -m`
if [ -f /etc/rc.${arch} ]; then
	. /etc/rc.${arch}
fi

# Recover vi editor files.
vibackup=`echo /var/tmp/vi.recover/vi.*`
if [ "$vibackup" != '/var/tmp/vi.recover/vi.*' ]; then
	echo 'Recovering vi editor sessions'
	for i in $vibackup; do
		# Only test files that are readable.
		if test ! -r $i; then
			continue
		fi

		# Unmodified nvi editor backup files either have the
		# execute bit set or are zero length.  Delete them.
		if test -x $i -o ! -s $i; then
			rm -f $i
		fi
	done

	# It is possible to get incomplete recovery files, if the editor
	# crashes at the right time.
	virecovery=`echo /var/tmp/vi.recover/recover.*`
	if [ "$virecovery" != "/var/tmp/vi.recover/recover.*" ]; then
		for i in $virecovery; do
			# Only test files that are readable.
			if test ! -r $i; then
				continue
			fi

			# Delete any recovery files that are zero length,
			# corrupted, or that have no corresponding backup file.
			# Else send mail to the user.
			recfile=`awk '/^X-vi-recover-path:/{print $2}' < $i`
			if test -n "$recfile" -a -s "$recfile"; then
				sendmail -t < $i
			else
				rm -f $i
			fi
		done
	fi
fi

# for each valid dir in $local_startup, search for init scripts matching *.sh
if [ "X${local_startup}" != X"NO" ]; then
	echo -n 'Local package startup:'
	for dir in ${local_startup}; do
		[ -d ${dir} ] && for script in ${dir}/*.sh; do
			[ -x ${script} ] && ${script} start
		done
	done
	echo .
fi

# Do traditional (but rather obsolete) rc.local file if it exists.
[ -f /etc/rc.local ] && sh /etc/rc.local

date
exit 0
