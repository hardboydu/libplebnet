#!/bin/sh
#
# Copyright (c) 1999  Matt Dillon
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $FreeBSD$
#

# PROVIDE: diskless
# REQUIRE: initdiskless rcconf mountcritlocal
# BEFORE: addswap random
# KEYWORD: FreeBSD

dlv=`/sbin/sysctl -n vfs.nfs.diskless_valid 2> /dev/null`
[ ${dlv:=0} -eq 0 ] && exit 0

name="diskless2"

# Provide a function for normalizing the mounting of memory
# filesystems.  This should allow the rest of the code here to remain
# as close as possible between 5-current and 4-stable.
#   $1 = size
#   $2 = mount point
#   $3 = (optional) bytes-per-inode
mount_md() {
	if [ -n "$3" ]; then
		bpi="-i $3"
	fi
	/sbin/mdmfs $bpi -s $1 -M md $2
}

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/rc.subr ]; then
	. /etc/rc.subr
	load_rc_config $name
elif [ -r /etc/defaults/rc.conf ]; then
	. /etc/defaults/rc.conf
	source_rc_confs
elif [ -r /etc/rc.conf ]; then
	. /etc/rc.conf
fi

# If we do not have a writable /var, create a memory
# filesystem for /var.  We don't have /usr yet so
# use mkdir instead of touch to test.  We want mount
# to record its mounts so we have to make sure /var/db
# exists before doing the mount -a.
#
if (/bin/mkdir /var/.diskless 2> /dev/null); then
        rmdir /var/.diskless
else
	echo "+++ mount_md of /var"
	mount_md ${varsize:=32m} /var
fi

if [ ! -d /var/db ]; then
	mkdir /var/db
fi

# Now we need the rest of our mounts, particularly /usr
#
mount -a       # chown and chgrp are in /usr

# Populate /var
#
echo "+++ populate /var using /etc/mtree/BSD.var.dist"
/usr/sbin/mtree -deU -f /etc/mtree/BSD.var.dist -p /var > /dev/null
case ${sendmail_enable} in
[Nn][Oo][Nn][Ee])
	;;
*)
	/usr/sbin/mtree -deU -f /etc/mtree/BSD.sendmail.dist -p / > /dev/null
	;;
esac

echo "+++ create log files based on the contents of /etc/newsyslog.conf"
LOGFILES=`/usr/bin/awk '$1 != "#" { printf "%s ", $1 } ' /etc/newsyslog.conf`
if [ -n "$LOGFILES" ]; then
	/usr/bin/touch $LOGFILES
fi

echo "+++ create lastlog"
/usr/bin/touch /var/log/lastlog

# Make sure our aliases database is uptodate, the aliases may have
# been overriden in /conf.
#
/usr/bin/newaliases

# XXX make sure to create one dir for each printer as requested by lpd
#
# If we do not have a writable /tmp, create a memory
# filesystem for /tmp.  If /tmp is a symlink (e.g. to /var/tmp,
# then it should already be writable).
#
if (/bin/mkdir /tmp/.diskless 2> /dev/null); then
	rmdir /tmp/.diskless
else
	if [ -h /tmp ]; then
		echo "*** /tmp is a symlink to a non-writable area!"
		echo "dropping into shell, ^D to continue anyway."
		/bin/sh
	else
		mount_md ${tmpsize:=20480} /tmp
		chmod 01777 /tmp
	fi
fi

if sysctl vfs.devfs.generation > /dev/null 2>&1 ; then
	# we have DEVFS, no worries...
	true
elif (/bin/mkdir /dev/.diskless 2> /dev/null); then
	# if /dev is writable assume it has already been populated
	# via rc.diskless1
	#
	rmdir /dev/.diskless
else
	(cd /; find -x dev | cpio -o -H newc) > /tmp/dev.tmp
	mount_md 4096 /dev 512
	(cd /; cpio -i -H newc -d < /tmp/dev.tmp)
	rm -f /tmp/dev.tmp
fi

# generate our hostname
#
if [ -z "`hostname -s`" -a \
    "x`/bin/kenv dhdp.host-name`" != "x" ]; then
        hostname=`/bin/kenv dhcp.host-name`
        hostname $hostname
	echo "Hostname is $hostname"
fi

# if the info is available via dhcp/kenv
# build the resolv.conf
#
if [ ! -e /etc/resolv.conf -a \
    "x`/bin/kenv dhcp.domain-name-servers`" != "x" ]; then
        echo domain `/bin/kenv dhcp.domain-name` > /etc/resolv.conf

        set `/bin/kenv dhcp.domain-name-servers`
        for ns in `IFS=','; echo $*`; do
                echo nameserver $ns >> /etc/resolv.conf;
        done
fi

