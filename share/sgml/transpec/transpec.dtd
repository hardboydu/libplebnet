<!-- 

  $Id: transpec.dtd,v 1.1.1.1 1996/09/08 02:37:40 jfieber Exp $

  Copyright (C) 1996
       John R. Fieber.  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY JOHN R. FIEBER AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL JOHN R. FIEBER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

-->

<!--

This DTD defines the format for instant(1) translation specification
files. A translation specification contains:

  * Character mappings, useful for dealing with characters that
    are magic for the formatter, such as backslash (\) is for
    TeX.

  * Sdata mappings.  For example, the ISO entity sets define
    special characters as sdata string, &ouml is [ouml  ].  These
    sdata strings are marked in the output of the sgml parser
    and the mapping turn them into something useful for the 
    formatter.

  * A set of translation rules.
  
See the transpec(5) man page for details.

-->

<!ELEMENT transpec - - ((cmap | smap | var)*, rule+)>

<!ELEMENT (cmap, smap) - - (map*)>
<!ATTLIST (cmap, smap) id ID #IMPLIED>

<!ELEMENT map      - o  EMPTY>
<!ATTLIST map      from CDATA #REQUIRED
                   to   CDATA #REQUIRED>

<!ELEMENT var	   - o  (#PCDATA)>

<!--
A rule consists of an expression to determine if the rule should
be applied to a given element (match), and the action that should
be taken if the element matches.  Each rule can be named.  The
cmap and smap attributes can specify an alternate to the default
character and data mapping.
-->

<!ELEMENT rule     - o  (match, action?)>
<!ATTLIST rule     id   CDATA #IMPLIED -- XXX should be ID notCDATA -->

<!ELEMENT match    - o  (gi | attval | content | context | nthchild
    	    	    	 | pattset | relation | varval | varreval)+>
<!ELEMENT gi       - o	(#PCDATA)>
<!ELEMENT attval   - o	(#PCDATA)>
<!ELEMENT content  - o	(#PCDATA)>
<!ELEMENT context  - o	(#PCDATA)>
<!ELEMENT nthchild - o	(#PCDATA)>
<!ELEMENT pattset  - o	(#PCDATA)>
<!ELEMENT relation - o	(#PCDATA)>
<!ELEMENT varval   - o	(#PCDATA)>
<!ELEMENT varreval - o	(#PCDATA)>


<!ELEMENT action   - o  (do | end | ignore | incr | message | replace 
    	    	    	 | quit | set | start)+>
<!ELEMENT do       - o	(#PCDATA)>
<!ELEMENT end      - -	(#PCDATA)>
<!ELEMENT ignore   - o	(#PCDATA)>
<!ELEMENT incr     - o	(#PCDATA)>
<!ELEMENT message  - o	(#PCDATA)>
<!ELEMENT replace  - -	(#PCDATA)>
<!ELEMENT quit     - o	(#PCDATA)>
<!ELEMENT set      - o	(#PCDATA)>
<!ELEMENT start    - -	(#PCDATA)>
