#
# $FreeBSD$
#
# Make command line options:
#	-DNO_DYNAMICROOT do not link /bin and /sbin dynamically
#	-DNO_KERBEROS Do not build Heimdal (Kerberos 5)
#	-DNO_RESCUE do not build rescue binaries
#	-DNOCLEANDIR run ${MAKE} clean, instead of ${MAKE} cleandir
#	-DNOCLEAN do not clean at all
#	-DNOCRYPT will prevent building of crypt versions
#	-DNOMAN do not build the manual pages
#	-DNOPROFILE do not build profiled libraries
#	-DNOGAMES do not go into games subdir
#	-DNOSHARE do not go into share subdir
#	-DNOINFO do not make or install info files
#	-DNOLIBC_R do not build libc_r.
#	-DNO_FORTRAN do not build g77 and related libraries.
#	-DNO_KERNELCONFIG do not run config in ${MAKE} buildkernel
#	-DNO_KERNELCLEAN do not run ${MAKE} clean in ${MAKE} buildkernel
#	-DNO_KERNELDEPEND do not run ${MAKE} depend in ${MAKE} buildkernel
#	-DNO_PORTSUPDATE do not update ports in ${MAKE} update
#	-DNO_DOCUPDATE do not update doc in ${MAKE} update
#	LOCAL_DIRS="list of dirs" to add additional dirs to the SUBDIR list
#	TARGET_ARCH="arch" to crossbuild world to a different arch

#
# The intended user-driven targets are:
# buildworld  - rebuild *everything*, including glue to help do upgrades
# installworld- install everything built by "buildworld"
# update      - convenient way to update your source tree (eg: sup/cvs)
#
# Standard targets (not defined here) are documented in the makefiles in
# /usr/share/mk.  These include:
#		obj depend all install clean cleandepend cleanobj

# We must do share/info early so that installation of info `dir'
# entries works correctly.  Do it first since it is less likely to
# grow dependencies on include and lib than vice versa.
#
# We must do lib and libexec before bin, because if installworld
# installs a new /bin/sh, the 'make' command will *immediately*
# use that new version.  And the new (dynamically-linked) /bin/sh
# will expect to find appropriate libraries in /lib and /libexec.
#
# We must do etc last for install/distribute to work.
#
SUBDIR=	share/info include lib libexec bin
.if !defined(NOGAMES)
SUBDIR+=games
.endif
SUBDIR+=gnu
.if !defined(NO_KERBEROS) && !defined(NOCRYPT) && !defined(NO_OPENSSL)
SUBDIR+=kerberos5
.endif
.if !defined(NO_RESCUE)
SUBDIR+=rescue
.endif
SUBDIR+=sbin
.if !defined(NOCRYPT)
SUBDIR+=secure
.endif
.if !defined(NOSHARE)
SUBDIR+=share
.endif
SUBDIR+=sys usr.bin usr.sbin etc

# These are last, since it is nice to at least get the base system
# rebuilt before you do them.
.for _DIR in ${LOCAL_DIRS}
.if exists(${.CURDIR}/${_DIR}/Makefile)
SUBDIR+= ${_DIR}
.endif
.endfor

.if defined(SUBDIR_OVERRIDE)
SUBDIR=		${SUBDIR_OVERRIDE}
.endif

.if defined(NOCLEANDIR)
CLEANDIR=	clean cleandepend
.else
CLEANDIR=	cleandir
.endif

CVS?=		cvs
SUP?=		/usr/local/bin/cvsup
SUPFLAGS?=	-g -L 2 -P -
.if defined(SUPHOST)
SUPFLAGS+=	-h ${SUPHOST}
.endif

MAKEOBJDIRPREFIX?=	/usr/obj
.if !defined(OSRELDATE)
.if exists(/usr/include/osreldate.h)
OSRELDATE!=	awk '/^\#define[[:space:]]*__FreeBSD_version/ { print $$3 }' \
		/usr/include/osreldate.h
.else
OSRELDATE=	0
.endif
.endif
TARGET_ARCH?=	${MACHINE_ARCH}
.if ${TARGET_ARCH} == ${MACHINE_ARCH}
TARGET?=	${MACHINE}
TARGET_CPUTYPE?=${CPUTYPE}
.else
TARGET?=	${TARGET_ARCH}
TARGET_CPUTYPE?=
.endif
.if !empty(TARGET_CPUTYPE)
_TARGET_CPUTYPE=${TARGET_CPUTYPE}
.else
_TARGET_CPUTYPE=dummy
.endif
_CPUTYPE!=	${MAKE} -f /dev/null -m ${.CURDIR}/share/mk \
		CPUTYPE=${_TARGET_CPUTYPE} -V CPUTYPE
.if ${_CPUTYPE} != ${_TARGET_CPUTYPE}
.error CPUTYPE global should be set with ?=.
.endif
.if make(buildworld)
BUILD_ARCH!=	sysctl -n hw.machine_arch
.if ${MACHINE_ARCH} != ${BUILD_ARCH}
.error To cross-build, set TARGET_ARCH.
.endif
.endif
.if ${MACHINE} == ${TARGET}
OBJTREE=	${MAKEOBJDIRPREFIX}
.else
OBJTREE=	${MAKEOBJDIRPREFIX}/${TARGET}
.endif
WORLDTMP=	${OBJTREE}${.CURDIR}/${MACHINE_ARCH}
# /usr/games added for fortune which depend on strfile
BPATH=		${WORLDTMP}/legacy/usr/sbin:${WORLDTMP}/legacy/usr/bin:${WORLDTMP}/legacy/usr/games
XPATH=		${WORLDTMP}/usr/sbin:${WORLDTMP}/usr/bin:${WORLDTMP}/usr/games
STRICTTMPPATH=	${BPATH}:${XPATH}
TMPPATH=	${STRICTTMPPATH}:${PATH}

INSTALLTMP!=	/usr/bin/mktemp -d -u -t install

#
# Building a world goes through the following stages
#
# 1. legacy stage [BMAKE]
#	This stage is responsible for creating compatibility
#	shims that are needed by the bootstrap-tools,
#	build-tools and cross-tools stages.
# 1. bootstrap-tools stage [BMAKE]
#	This stage is responsible for creating programs that
#	are needed for backward compatibility reasons. They
#	are not built as cross-tools.
# 2. build-tools stage [TMAKE]
#	This stage is responsible for creating the object
#	tree and building any tools that are needed during
#	the build process.
# 3. cross-tools stage [XMAKE]
#	This stage is responsible for creating any tools that
#	are needed for cross-builds. A cross-compiler is one
#	of them.
# 4. world stage [WMAKE]
#	This stage actually builds the world.
# 5. install stage (optional) [IMAKE]
#	This stage installs a previously built world.
#

BOOTSTRAPPING?=	0

# Common environment for world related stages
CROSSENV=	MAKEOBJDIRPREFIX=${OBJTREE} \
		MACHINE_ARCH=${TARGET_ARCH} \
		MACHINE=${TARGET} \
		CPUTYPE=${TARGET_CPUTYPE} \
		GROFF_BIN_PATH=${WORLDTMP}/legacy/usr/bin \
		GROFF_FONT_PATH=${WORLDTMP}/legacy/usr/share/groff_font \
		GROFF_TMAC_PATH=${WORLDTMP}/legacy/usr/share/tmac

# bootstrap-tools stage
BMAKEENV=	DESTDIR= \
		INSTALL="sh ${.CURDIR}/tools/install.sh" \
		PATH=${BPATH}:${PATH} \
		WORLDTMP=${WORLDTMP} \
		MAKEFLAGS="-m ${.CURDIR}/tools/build/mk ${.MAKEFLAGS}"
BMAKE=		MAKEOBJDIRPREFIX=${WORLDTMP} \
		${BMAKEENV} ${MAKE} -f Makefile.inc1 \
		BOOTSTRAPPING=${OSRELDATE} \
		-DNOHTML -DNOINFO -DNOLINT -DNOMAN -DNOPIC -DNOPROFILE \
		-DNOSHARED -DNO_CPU_CFLAGS -DNO_WARNS

# build-tools stage
TMAKE=		MAKEOBJDIRPREFIX=${OBJTREE} \
		${BMAKEENV} ${MAKE} -f Makefile.inc1 \
		BOOTSTRAPPING=${OSRELDATE} -DNOLINT -DNO_CPU_CFLAGS -DNO_WARNS

# cross-tools stage
XMAKE=		TOOLS_PREFIX=${WORLDTMP} ${BMAKE} -DNO_FORTRAN -DNO_GDB

# world stage
WMAKEENV=	${CROSSENV} \
		DESTDIR=${WORLDTMP} \
		_SHLIBDIRPREFIX=${WORLDTMP} \
		INSTALL="sh ${.CURDIR}/tools/install.sh" \
		PATH=${TMPPATH}
WMAKE=		${WMAKEENV} ${MAKE} -f Makefile.inc1

# install stage
IMAKEENV=	${CROSSENV} \
		PATH=${STRICTTMPPATH}:${INSTALLTMP}
IMAKE=		${IMAKEENV} ${MAKE} -f Makefile.inc1

# kernel stage
KMAKEENV=	${WMAKEENV}

#
# buildworld
#
# Attempt to rebuild the entire system, with reasonable chance of
# success, regardless of how old your existing system is.
#
_worldtmp:
.if ${.CURDIR:C/[^,]//g} != ""
#	The m4 build of sendmail files doesn't like it if ',' is used
#	anywhere in the path of it's files.
	@echo
	@echo "*** Error: path to source tree contains a comma ','"
	@echo
	false
.endif
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> Rebuilding the temporary build tree"
	@echo "--------------------------------------------------------------"
.if !defined(NOCLEAN)
	rm -rf ${WORLDTMP}
.else
	rm -rf ${WORLDTMP}/legacy/usr/include
	# XXX - These two can depend on any header file.
	rm -f ${OBJTREE}${.CURDIR}/usr.bin/kdump/ioctl.c
	rm -f ${OBJTREE}${.CURDIR}/usr.bin/truss/ioctl.c
.endif
.for _dir in \
    usr/bin usr/games usr/include/c++/3.3 usr/include/sys usr/lib \
    usr/libexec usr/sbin usr/share/dict \
    usr/share/groff_font/devX100 \
    usr/share/groff_font/devX100-12 \
    usr/share/groff_font/devX75 \
    usr/share/groff_font/devX75-12 \
    usr/share/groff_font/devascii \
    usr/share/groff_font/devcp1047 \
    usr/share/groff_font/devdvi \
    usr/share/groff_font/devhtml \
    usr/share/groff_font/devkoi8-r \
    usr/share/groff_font/devlatin1 \
    usr/share/groff_font/devlbp \
    usr/share/groff_font/devlj4 \
    usr/share/groff_font/devps \
    usr/share/groff_font/devutf8 \
    usr/share/tmac/mdoc usr/share/tmac/mm
	mkdir -p ${WORLDTMP}/legacy/${_dir}
.endfor
.for _dir in \
    lib usr/bin usr/include usr/lib/compat/aout usr/libdata/ldscripts \
    usr/libexec usr/share/misc usr/share/bsnmp/defs usr/share/bsnmp/mibs
	mkdir -p ${WORLDTMP}/${_dir}
.endfor
	mtree -deU -f ${.CURDIR}/etc/mtree/BSD.include.dist \
	    -p ${WORLDTMP}/usr/include
	ln -sf ${.CURDIR}/sys ${WORLDTMP}
_legacy:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 1.1: legacy release compatibility shims"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${BMAKE} legacy
_bootstrap-tools:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 1.2: bootstrap tools"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${BMAKE} bootstrap-tools
_cleanobj:
.if !defined(NOCLEAN)
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 2.1: cleaning up the object tree"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${WMAKE} ${CLEANDIR:S/^/par-/}
.endif
_obj:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 2.2: rebuilding the object tree"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${WMAKE} par-obj
_build-tools:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 2.3: build tools"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${TMAKE} build-tools
_cross-tools:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 3: cross tools"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${XMAKE} cross-tools
_includes:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 4.1: building includes"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${WMAKE} SHARED=symlinks par-includes
_libraries:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 4.2: building libraries"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; \
	    ${WMAKE} -DNOFSCHG -DNOHTML -DNOINFO -DNOLINT -DNOMAN -DNOPROFILE \
	    libraries
_depend:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 4.3: make dependencies"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${WMAKE} par-depend
everything:
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> stage 4.4: building everything.."
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${WMAKE} par-all


WMAKE_TGTS=
.if !defined(SUBDIR_OVERRIDE)
WMAKE_TGTS+=	_worldtmp _legacy _bootstrap-tools
.endif
WMAKE_TGTS+=	_cleanobj _obj _build-tools
.if !defined(SUBDIR_OVERRIDE)
WMAKE_TGTS+=	_cross-tools
.endif
WMAKE_TGTS+=	_includes _libraries _depend everything

buildworld: ${WMAKE_TGTS}
.ORDER: ${WMAKE_TGTS}

#
# Use this to add checks to installworld/installkernel targets.
#
SPECIAL_INSTALLCHECKS=

#
# The following install-time check will see if the installation will
# change the type used for time_t, and if it will, the target makes
# sure that the user is expecting to make that change.
#
.if ${TARGET_ARCH} == "sparc64"
SPECIAL_INSTALLCHECKS+=sparc64_installcheck

CUR_TIMET!=	grep __time_t /usr/include/machine/_types.h | awk '{print $$2}'
SRC_TIMET!=	grep __time_t ${.CURDIR}/sys/sparc64/include/_types.h | \
		awk '{print $$2}'
NEWSPARC_TIMETYPE?=${CUR_TIMET}
THISHOST!=	hostname -s
.if empty(THISHOST)
THISHOST="name not set yet"
.endif

sparc64_installcheck:
.if ${CUR_TIMET} != ${SRC_TIMET}
	@echo
.if ${NEWSPARC_TIMETYPE} != ${SRC_TIMET}
	@echo "***  ERROR: This target would change the type used for time_t!"
.else
	@echo "* Note: This installation changes the type used for time_t."
.endif
	@echo "* "
	@echo "* This host (${THISHOST}) has time_t defined as ${CUR_TIMET},"
	@echo "* and this installation would change that to type ${SRC_TIMET}."
.if ${NEWSPARC_TIMETYPE} != ${SRC_TIMET}
	@echo "* "
	@echo "* If that is *NOT* what you wanted, then you need to change the"
	@echo "* typedef of __time_t in ${.CURDIR}/sys/sparc64/include/_types.h"
	@echo "* from '${SRC_TIMET}' to '${CUR_TIMET}'.  After that you *MUST*"
	@echo "* do a complete cleanworld, buildworld, buildkernel before you"
	@echo "* retry the 'make' command.  Also read /usr/src/UPDATING.64BTT."
	@echo "* "
	@echo "* If that *is* what you want, then enter the commands:"
	@echo "      NEWSPARC_TIMETYPE=${SRC_TIMET}"
	@echo "      export NEWSPARC_TIMETYPE"
	@echo "* and repeat your 'make' command."
	@echo
	false
.endif
	@echo
.elif ${NEWSPARC_TIMETYPE} != ${SRC_TIMET}
	@echo
	@echo "***  ERROR: NEWSPARC_TIMETYPE is set to '${NEWSPARC_TIMETYPE}'"
	@echo "***         but ${.CURDIR}/sys/sparc64/include/_types.h"
	@echo "***         has __time_t defined as '${SRC_TIMET}'."
	false
.else
	@# in sparc64_installcheck, all TIMETYPEs == '${CUR_TIMET}'
.endif
.endif

#
# installcheck
#
# Checks to be sure system is ready for installworld
#
installcheck: ${SPECIAL_INSTALLCHECKS}
.if !defined(NO_SENDMAIL)
	@if ! `id -u smmsp > /dev/null`; then \
		echo "ERROR: Required smmsp user is missing, see /usr/src/UPDATING."; \
		false; \
	fi
	@if ! `id -g smmsp > /dev/null`; then \
		echo "ERROR: Required smmsp group is missing, see /usr/src/UPDATING."; \
		false; \
	fi
.endif

#
# distributeworld
#
# Distributes everything compiled by a `buildworld'.
#
# installworld
#
# Installs everything compiled by a 'buildworld'.
#
distributeworld installworld: installcheck
	mkdir -p ${INSTALLTMP}
	for prog in [ awk cap_mkdb cat chflags chmod chown \
	    date echo egrep find grep \
	    ln make mkdir mtree mv pwd_mkdb rm sed sh sysctl \
	    test true uname wc zic; do \
		cp `which $$prog` ${INSTALLTMP}; \
	done
	cd ${.CURDIR}; ${IMAKE} re${.TARGET:S/world$//}
	rm -rf ${INSTALLTMP}

#
# reinstall
#
# If you have a build server, you can NFS mount the source and obj directories
# and do a 'make reinstall' on the *client* to install new binaries from the
# most recent server build.
#
reinstall: ${SPECIAL_INSTALLCHECKS}
	@echo "--------------------------------------------------------------"
	@echo ">>> Making hierarchy"
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${MAKE} -f Makefile.inc1 hierarchy
	@echo
	@echo "--------------------------------------------------------------"
	@echo ">>> Installing everything.."
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${MAKE} -f Makefile.inc1 install

redistribute:
	@echo "--------------------------------------------------------------"
	@echo ">>> Distributing everything.."
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${MAKE} -f Makefile.inc1 distribute

#
# buildkernel and installkernel
#
# Which kernels to build and/or install is specified by setting
# KERNCONF. If not defined a GENERIC kernel is built/installed.
# Only the existing (depending TARGET) config files are used
# for building kernels and only the first of these is designated
# as the one being installed.
#
# Note that we have to use TARGET instead of TARGET_ARCH when
# we're in kernel-land. Since only TARGET_ARCH is (expected) to
# be set to cross-build, we have to make sure TARGET is set
# properly.

.if !defined(KERNCONF) && defined(KERNEL)
KERNCONF=	${KERNEL}
KERNWARN=	yes
.else
KERNCONF?=	GENERIC
.endif
INSTKERNNAME?=	kernel

KERNSRCDIR?=	${.CURDIR}/sys
KRNLCONFDIR=	${KERNSRCDIR}/${TARGET}/conf
KRNLOBJDIR=	${OBJTREE}${KERNSRCDIR}
KERNCONFDIR?=	${KRNLCONFDIR}

BUILDKERNELS=
INSTALLKERNEL=
.for _kernel in ${KERNCONF}
.if exists(${KERNCONFDIR}/${_kernel})
BUILDKERNELS+=	${_kernel}
.if empty(INSTALLKERNEL)
INSTALLKERNEL= ${_kernel}
.endif
.endif
.endfor

#
# buildkernel
#
# Builds all kernels defined by BUILDKERNELS.
#
buildkernel:
.if empty(BUILDKERNELS)
	@echo "ERROR: Missing kernel configuration file(s) (${KERNCONF}).";
	false
.endif
.if defined(KERNWARN)
	@echo "--------------------------------------------------------------"
	@echo ">>> WARNING: KERNEL= setting should be changed to KERNCONF="
	@echo "--------------------------------------------------------------"
	@sleep 3
.endif
	@echo
.for _kernel in ${BUILDKERNELS}
	@echo "--------------------------------------------------------------"
	@echo ">>> Kernel build for ${_kernel} started on `LC_ALL=C date`"
	@echo "--------------------------------------------------------------"
	@echo "===> ${_kernel}"
	mkdir -p ${KRNLOBJDIR}
.if !defined(NO_KERNELCONFIG)
	cd ${KRNLCONFDIR}; \
		PATH=${TMPPATH} \
		    config ${CONFIGARGS} -d ${KRNLOBJDIR}/${_kernel} \
			${KERNCONFDIR}/${_kernel}
.endif
.if !defined(NOCLEAN) && !defined(NO_KERNELCLEAN)
	cd ${KRNLOBJDIR}/${_kernel}; \
	    ${KMAKEENV} ${MAKE} KERNEL=${INSTKERNNAME} ${CLEANDIR}
.endif
	cd ${KRNLOBJDIR}/${_kernel}; \
	    MAKESRCPATH=${KERNSRCDIR}/dev/aic7xxx/aicasm \
	    ${MAKE} -DNO_CPU_CFLAGS -f ${KERNSRCDIR}/dev/aic7xxx/aicasm/Makefile
	cd ${KRNLOBJDIR}/${_kernel}; \
	    ${KMAKEENV} ${MAKE} KERNEL=${INSTKERNNAME} obj
# XXX - Gratuitously builds aicasm in the ``makeoptions NO_MODULES'' case.
.if !defined(MODULES_WITH_WORLD) && !defined(NO_MODULES) && exists(${KERNSRCDIR}/modules)
.for target in obj depend all
	cd ${.CURDIR}/sys/modules/aic7xxx/aicasm; \
	    MAKEOBJDIRPREFIX=${KRNLOBJDIR}/${_kernel}/modules \
	    ${MAKE} -DNO_CPU_CFLAGS ${target}
.endfor
.endif
.if !defined(NO_KERNELDEPEND)
	cd ${KRNLOBJDIR}/${_kernel}; \
	    ${KMAKEENV} ${MAKE} KERNEL=${INSTKERNNAME} depend -DNO_MODULES_OBJ
.endif
	cd ${KRNLOBJDIR}/${_kernel}; \
	    ${KMAKEENV} ${MAKE} KERNEL=${INSTKERNNAME} all -DNO_MODULES_OBJ
	@echo "--------------------------------------------------------------"
	@echo ">>> Kernel build for ${_kernel} completed on `LC_ALL=C date`"
	@echo "--------------------------------------------------------------"
.endfor

#
# installkernel, etc.
#
# Install the kernel defined by INSTALLKERNEL
#
installkernel installkernel.debug \
reinstallkernel reinstallkernel.debug: ${SPECIAL_INSTALLCHECKS}
.if empty(INSTALLKERNEL)
	@echo "ERROR: No kernel \"${KERNCONF}\" to install."
	false
.endif
	cd ${KRNLOBJDIR}/${INSTALLKERNEL}; \
	    ${CROSSENV} PATH=${TMPPATH} \
	    ${MAKE} KERNEL=${INSTKERNNAME} ${.TARGET:S/kernel//}

#
# update
#
# Update the source tree, by running sup and/or running cvs to update to the
# latest copy.
#
update:
.if defined(SUP_UPDATE)
	@echo "--------------------------------------------------------------"
	@echo ">>> Running ${SUP}"
	@echo "--------------------------------------------------------------"
.if defined(SUPFILE)
	@${SUP} ${SUPFLAGS} ${SUPFILE}
.endif
.if defined(SUPFILE1)
	@${SUP} ${SUPFLAGS} ${SUPFILE1}
.endif
.if defined(SUPFILE2)
	@${SUP} ${SUPFLAGS} ${SUPFILE2}
.endif
.if defined(PORTSSUPFILE) && !defined(NO_PORTSUPDATE)
	@${SUP} ${SUPFLAGS} ${PORTSSUPFILE}
.endif
.if defined(DOCSUPFILE) && !defined(NO_DOCUPDATE)
	@${SUP} ${SUPFLAGS} ${DOCSUPFILE}
.endif
.endif
.if defined(CVS_UPDATE)
	@echo "--------------------------------------------------------------"
	@echo ">>> Updating ${.CURDIR} from cvs repository" ${CVSROOT}
	@echo "--------------------------------------------------------------"
	cd ${.CURDIR}; ${CVS} -R -q update -A -P -d
.endif

#
# ------------------------------------------------------------------------
#
# From here onwards are utility targets used by the 'make world' and
# related targets.  If your 'world' breaks, you may like to try to fix
# the problem and manually run the following targets to attempt to
# complete the build.  Beware, this is *not* guaranteed to work, you
# need to have a pretty good grip on the current state of the system
# to attempt to manually finish it.  If in doubt, 'make world' again.
#

#
# legacy: Build compatibility shims for the next three targets
#
legacy:
.for _tool in tools/build
	@${ECHODIR} "===> ${_tool}"; \
	    cd ${.CURDIR}/${_tool}; \
	    ${MAKE} DIRPRFX=${_tool}/ obj; \
	    ${MAKE} DIRPRFX=${_tool}/ DESTDIR=${MAKEOBJDIRPREFIX}/legacy includes; \
	    ${MAKE} DIRPRFX=${_tool}/ depend; \
	    ${MAKE} DIRPRFX=${_tool}/ all; \
	    ${MAKE} DIRPRFX=${_tool}/ DESTDIR=${MAKEOBJDIRPREFIX}/legacy install
.endfor

#
# bootstrap-tools: Build tools needed for compatibility
#
.if !defined(NOGAMES)
_strfile=	games/fortune/strfile
.endif

.if !defined(NO_CXX)
_gperf=	gnu/usr.bin/gperf
.if ${BOOTSTRAPPING} < 500113
_groff=		gnu/usr.bin/groff
.else
_groff=		gnu/usr.bin/groff/tmac
.endif
.endif

.if ${BOOTSTRAPPING} < 502102
_lex=		usr.bin/lex
.endif

.if ${BOOTSTRAPPING} < 450005 || \
    ${BOOTSTRAPPING} >= 500000 && ${BOOTSTRAPPING} < 500034
_uudecode=	usr.bin/uudecode
.endif

.if ${BOOTSTRAPPING} < 430002 || \
    ${BOOTSTRAPPING} >= 500000 && ${BOOTSTRAPPING} < 500019
_xargs=		usr.bin/xargs
.endif

.if ${BOOTSTRAPPING} < 430002 || \
    ${BOOTSTRAPPING} >= 500000 && ${BOOTSTRAPPING} < 500018
_yacc=		usr.bin/yacc
.endif

.if !defined(NO_RESCUE) && \
    ${BOOTSTRAPPING} < 501100
_crunchgen=	usr.sbin/crunch/crunchgen
.endif

.if ${BOOTSTRAPPING} < 501114
_gensnmptree=	usr.sbin/bsnmpd/gensnmptree
.endif

.if ${BOOTSTRAPPING} < 500019
_kbdcontrol=	usr.sbin/kbdcontrol
.endif

bootstrap-tools:
.for _tool in \
    ${_strfile} \
    ${_gperf} \
    ${_groff} \
    gnu/usr.bin/texinfo \
    usr.bin/colldef \
    ${_lex} \
    usr.bin/makewhatis \
    usr.bin/rpcgen \
    ${_uudecode} \
    ${_xargs} \
    usr.bin/xinstall \
    ${_yacc} \
    usr.sbin/config \
    ${_crunchgen} \
    ${_gensnmptree} \
    ${_kbdcontrol}
	@${ECHODIR} "===> ${_tool}"; \
		cd ${.CURDIR}/${_tool}; \
		${MAKE} DIRPRFX=${_tool}/ obj; \
		${MAKE} DIRPRFX=${_tool}/ depend; \
		${MAKE} DIRPRFX=${_tool}/ all; \
		${MAKE} DIRPRFX=${_tool}/ DESTDIR=${MAKEOBJDIRPREFIX}/legacy install
.endfor

#
# build-tools: Build special purpose build tools
#
.if defined(MODULES_WITH_WORLD) && exists(${KERNSRCDIR}/modules)
_aicasm= sys/modules/aic7xxx/aicasm
.endif

.if !defined(NOSHARE)
_share=	share/syscons/scrnmaps
.endif

.if !defined(NO_FORTRAN)
_fortran= gnu/usr.bin/cc/f771
.endif

.if !defined(NO_KERBEROS) && !defined(NOCRYPT) && !defined(NO_OPENSSL)
_kerberos5_tools= kerberos5/tools
.endif

.if !defined(NO_RESCUE)
_rescue= rescue/rescue
.endif

build-tools:
.for _tool in \
    bin/csh \
    bin/sh \
    ${_rescue} \
    gnu/usr.bin/cc/cc_tools \
    ${_fortran} \
    lib/libncurses \
    ${_share} \
    ${_aicasm} \
    usr.bin/awk \
    usr.bin/file \
    usr.sbin/sysinstall
	@${ECHODIR} "===> ${_tool}"; \
		cd ${.CURDIR}/${_tool}; \
		${MAKE} DIRPRFX=${_tool}/ obj; \
		${MAKE} DIRPRFX=${_tool}/ build-tools
.endfor
.for _tool in \
    ${_kerberos5_tools}
	@${ECHODIR} "===> ${_tool}"; \
		cd ${.CURDIR}/${_tool}; \
		${MAKE} DIRPRFX=${_tool}/ obj; \
		${MAKE} DIRPRFX=${_tool}/ depend; \
		${MAKE} DIRPRFX=${_tool}/ all
.endfor

#
# cross-tools: Build cross-building tools
#
.if ${TARGET_ARCH} == "sparc64" && ${TARGET_ARCH} != ${MACHINE_ARCH} && \
    ${BOOTSTRAPPING} < 500037
_elf2aout=	usr.bin/elf2aout
.endif

.if ${TARGET_ARCH} == "i386" && ${TARGET_ARCH} != ${MACHINE_ARCH}
_btxld=		usr.sbin/btxld
.endif

.if (!defined(NO_RESCUE) || \
    defined(RELEASEDIR)) && \
    (${TARGET_ARCH} != ${MACHINE_ARCH} || ${BOOTSTRAPPING} < 501101)
_crunchide=	usr.sbin/crunch/crunchide
.endif

.if ${TARGET_ARCH} == "alpha" && ${TARGET_ARCH} != ${MACHINE_ARCH}
_elf2exe=	usr.sbin/elf2exe
.endif

.if ${TARGET_ARCH} == "i386" && ${TARGET_ARCH} != ${MACHINE_ARCH} && \
    defined(RELEASEDIR)
_kgzip=		usr.sbin/kgzip
.endif

cross-tools:
.for _tool in \
    gnu/usr.bin/binutils \
    gnu/usr.bin/cc \
    ${_elf2aout} \
    usr.bin/xlint/lint1 usr.bin/xlint/lint2 usr.bin/xlint/xlint \
    ${_btxld} \
    ${_crunchide} \
    ${_elf2exe} \
    ${_kgzip}
	@${ECHODIR} "===> ${_tool}"; \
		cd ${.CURDIR}/${_tool}; \
		${MAKE} DIRPRFX=${_tool}/ obj; \
		${MAKE} DIRPRFX=${_tool}/ depend; \
		${MAKE} DIRPRFX=${_tool}/ all; \
		${MAKE} DIRPRFX=${_tool}/ DESTDIR=${MAKEOBJDIRPREFIX} install
.endfor

#
# hierarchy - ensure that all the needed directories are present
#
hierarchy:
	cd ${.CURDIR}/etc;		${MAKE} distrib-dirs

#
# libraries - build all libraries, and install them under ${DESTDIR}.
#
# The list of libraries with dependents (${_prebuild_libs}) and their
# interdependencies (__L) are built automatically by the
# ${.CURDIR}/tools/make_libdeps.sh script.
#
libraries:
	cd ${.CURDIR}; \
	    ${MAKE} -f Makefile.inc1 _startup_libs; \
	    ${MAKE} -f Makefile.inc1 _prebuild_libs; \
	    ${MAKE} -f Makefile.inc1 _generic_libs;

# These dependencies are not automatically generated:
#
# gnu/lib/csu, gnu/lib/libgcc and lib/csu must be built before all
# shared libraries for ELF.
#
_startup_libs=	gnu/lib/csu gnu/lib/libgcc
.if exists(${.CURDIR}/lib/csu/${MACHINE_ARCH}-elf)
_startup_libs+=	lib/csu/${MACHINE_ARCH}-elf
.else
_startup_libs+=	lib/csu/${MACHINE_ARCH}
.endif

_prebuild_libs=

_generic_libs=	gnu/lib

.if !defined(NO_KERBEROS) && !defined(NOCRYPT) && !defined(NO_OPENSSL)
_prebuild_libs+=	kerberos5/lib/libasn1
_prebuild_libs+=	kerberos5/lib/libgssapi
_prebuild_libs+=	kerberos5/lib/libkrb5
_prebuild_libs+=	kerberos5/lib/libroken
_generic_libs+=	kerberos5/lib
.endif

_prebuild_libs+= lib/libcom_err lib/libcrypt lib/libexpat \
		lib/libkvm lib/libmd \
		lib/libncurses lib/libnetgraph lib/libopie lib/libpam \
		lib/libradius lib/librpcsvc \
		lib/libsbuf lib/libtacplus lib/libutil lib/libypclnt \
		lib/libz lib/msun

lib/libopie__L lib/libradius__L lib/libtacplus__L: lib/libmd__L
lib/libypclnt__L: lib/librpcsvc__L

_generic_libs+=	lib

.if !defined(NOCRYPT)
.if !defined(NO_OPENSSL)
_prebuild_libs+=	secure/lib/libcrypto secure/lib/libssl
.if !defined(NO_OPENSSH)
_prebuild_libs+=	secure/lib/libssh
secure/lib/libssh__L: secure/lib/libcrypto__L lib/libz__L
.endif
.endif
_generic_libs+=	secure/lib
.endif

_generic_libs+=	usr.bin/lex/lib

.if ${MACHINE_ARCH} == "i386"
_generic_libs+=	usr.sbin/pcvt/keycap
.endif

.for _lib in ${_startup_libs} ${_prebuild_libs:Nlib/libpam} ${_generic_libs}
${_lib}__L: .PHONY
.if exists(${.CURDIR}/${_lib})
	@${ECHODIR} "===> ${_lib}"; \
		cd ${.CURDIR}/${_lib}; \
		${MAKE} DIRPRFX=${_lib}/ depend; \
		${MAKE} DIRPRFX=${_lib}/ all; \
		${MAKE} DIRPRFX=${_lib}/ install
.endif
.endfor

# libpam is special: we need to build static PAM modules before
# static PAM library, and dynamic PAM library before dynamic PAM
# modules.
lib/libpam__L: .PHONY
	@${ECHODIR} "===> lib/libpam"; \
		cd ${.CURDIR}/lib/libpam; \
		${MAKE} DIRPRFX=lib/libpam/ depend; \
		${MAKE} DIRPRFX=lib/libpam/ -D_NO_LIBPAM_SO_YET all; \
		${MAKE} DIRPRFX=lib/libpam/ -D_NO_LIBPAM_SO_YET install

_startup_libs: ${_startup_libs:S/$/__L/}
_prebuild_libs: ${_prebuild_libs:S/$/__L/}
_generic_libs: ${_generic_libs:S/$/__L/}

.for __target in all clean cleandepend cleandir depend includes obj
.for entry in ${SUBDIR}
${entry}.${__target}__D: .PHONY
	@if test -d ${.CURDIR}/${entry}.${MACHINE_ARCH}; then \
		${ECHODIR} "===> ${DIRPRFX}${entry}.${MACHINE_ARCH}"; \
		edir=${entry}.${MACHINE_ARCH}; \
		cd ${.CURDIR}/$${edir}; \
	else \
		${ECHODIR} "===> ${DIRPRFX}${entry}"; \
		edir=${entry}; \
		cd ${.CURDIR}/$${edir}; \
	fi; \
	${MAKE} ${__target} DIRPRFX=${DIRPRFX}$${edir}/
.endfor
par-${__target}: ${SUBDIR:S/$/.${__target}__D/}
.endfor

.include <bsd.subdir.mk>
