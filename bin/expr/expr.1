.\" -*- nroff -*-
.\"
.\" Copyright (c) 1993 Winning Strategies, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Winning Strategies, Inc.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd March 22, 2002
.Dt EXPR 1
.Os
.Sh NAME
.Nm expr
.Nd evaluate expression
.Sh SYNOPSIS
.Nm
.Op Fl \&-
.Ar expression
.Sh DESCRIPTION
The
.Nm
utility evaluates
.Ar expression
and writes the result on standard output.
.Pp
All operators and operands must be passed as separate arguments.
Several of the operators have special meaning to command interpreters
and must therefore be quoted appropriately.
.Pp
Arithmetic operations are performed using signed integer math,
in the largest integral type available in the C language.  The
.Nm
utility will detect arithmetic overflow and division by zero, and
returns with an exit status of 2 in those cases.  If a numeric operand
is specified which is so large as to overflow conversion to an integer,
it is parsed as a string instead.  All numeric operands are interpreted
in base 10.
.Pp
Operators are listed below in order of increasing precedence; all
are left-associative.
Operators with equal precedence are grouped within { } symbols.
.Bl -tag -width indent
.It Ar expr1 Li | Ar expr2
Return the evaluation of
.Ar expr1
if it is neither an empty string nor zero;
otherwise, returns the evaluation of
.Ar expr2 .
.It Ar expr1 Li & Ar expr2
Return the evaluation of
.Ar expr1
if neither expression evaluates to an empty string or zero;
otherwise, returns zero.
.It Ar expr1 Li "{=, >, >=, <, <=, !=}" Ar expr2
Return the results of integer comparison if both arguments are integers;
otherwise, returns the results of string comparison using the locale-specific
collation sequence.
The result of each comparison is 1 if the specified relation is true,
or 0 if the relation is false.
.It Ar expr1 Li "{+, -}" Ar expr2
Return the results of addition or subtraction of integer-valued arguments.
.It Ar expr1 Li "{*, /, %}" Ar expr2
Return the results of multiplication, integer division, or remainder of integer-valued arguments.
.It Ar expr1 Li : Ar expr2
The
.Dq \&:
operator matches
.Ar expr1
against
.Ar expr2 ,
which must be a basic regular expression.
The regular expression is anchored
to the beginning of the string with an implicit
.Dq ^ .
.Pp
If the match succeeds and the pattern contains at least one regular
expression subexpression
.Dq "\e(...\e)" ,
the string corresponding to
.Dq "\e1"
is returned;
otherwise the matching operator returns the number of characters matched.
If the match fails and the pattern contains a regular expression subexpression
the null string is returned;
otherwise 0.
.El
.Pp
Parentheses are used for grouping in the usual manner.
.Pp
Unless the
.Ev EXPR_COMPAT
variable is defined in the process environment, this version of
.Nm
adheres to the
.Tn POSIX
Utility Syntax Guidelines, which require that a leading argument beginning
with a minus sign be considered an option to the program.
The standard
.Ql \&--
syntax may be used to prevent this interpretation.
However, many historic implementations of
.Nm ,
including the one in previous versions of
.Fx ,
will not permit this syntax.
See the examples below for portable ways to guarantee the correct
interpretation.
.Pp
The
.Nm
utility makes no lexical distinction between arguments which may be
operators and arguments which may be operands.
An operand which is lexically identical to an operator will be considered a
syntax error.
See the examples below for a work-around.
.Pp
The syntax of the
.Nm
command in general is historic and inconvenient.
New applications are advised to use shell arithmetic rather than
.Nm .
.Sh ENVIRONMENT
.Bl -tag -compact -width EXPR_COMPAT
.It Ev EXPR_COMPAT
If set,
.Nm
will emulate historic
.Nm
implementations which did not obey the Utility Syntax Guidelines.
.El
.Sh EXAMPLES
.Bl -bullet
.It
The following example (in
.Xr sh 1
syntax) adds one to the variable
.Va a :
.Dl a=$(expr $a + 1)
.It
This will fail if the value of
.Va a
is a negative number.
To protect negative values of
.Va a
from being interpreted as options to the
.Nm
command, one might rearrange the expression:
.Dl a=$(expr 1 + $a)
.It
More generally, parenthesize possibly-negative values:
.Dl a=$(expr \e( $a \e) + 1)
.It
The following example prints the filename portion of a pathname stored
in variable
.Va a .
Since
.Va a
might represent the path
.Pa / ,
it is necessary to prevent it from being interpreted as the division operator.
The
.Li //
characters resolve this ambiguity.
.Dl expr \*q//$a\*q \&: '.*/\e(.*\e)'
.El
.Pp
The following examples output the number of characters in variable
.Va a .
Again, if
.Va a
might begin with a hyphen, it is necessary to prevent it from being
interpreted as an option to
.Nm .
.Bl -bullet
.It
If the
.Nm
command conforms to
.St -p1003.1-2001 ,
this is simple:
.Dl expr -- \*q$a\*q \&: \*q.*\*q
.It
For portability to older systems, however, a more complicated command
is required:
.Dl expr \e( \*qX$a\*q \&: \*q.*\*q \e) - 1
.El
.Sh DIAGNOSTICS
The
.Nm
utility exits with one of the following values:
.Bl -tag -width indent -compact
.It 0
the expression is neither an empty string nor 0.
.It 1
the expression is an empty string or 0.
.It 2
the expression is invalid.
.El
.Sh SEE ALSO
.Xr sh 1 ,
.Xr test 1
.Sh STANDARDS
The
.Nm
utility conforms to
.St -p1003.1-2001 ,
provided that the
.Ev EXPR_COMPAT
environment variable is not defined.
.Tn POSIX
does not specify whether arithmetic overflow is detected, nor does it specify
the possible range of integer arguments to
.Nm ,
so a portable application must assume that the range is small and that
overflow may not be detected.
