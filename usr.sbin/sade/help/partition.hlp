This is the FreeBSD DiskLabel Editor.

You should use this editor to create at least the following
filesystems:

	Name	Purpose			Min Size?	Optional?
	----	-------			---------	---------
	/	Root filesystem		20MB		No
	swap	Swap space		2 * MEM		No
	/usr	System & user files	80MB or more	Yes

Note: If you do not create a /usr filesystem then your / filesystem
will need to be bigger - at least 100MB.  This is not recommended as
any media errors that may occur during disk I/O to user files will
corrupt the filesystem containing vital system files as well.  It is
for this reason that / is generally kept on its own filesystem, where
it's basically considered "read only" by the system and hence a good
deal safer.

Swap space is a little tricker, and the rule of "2 * MEM" is simply a
best-guess approximation and not necessarily accurate for your
intended usage of the system.  If you intend to use the system heavily
in a server or multi-user application, you may be well advised to
increase this size.  You may also create swap space on multiple drives
for a larger "total" swap and this is, in fact, recommended if you
have multiple, fast drives for which such load-balancing can only help
overall I/O performance.

The /usr filesystem should be sized according to what kind of
distributions you're trying to load and how many packages you intend
to install in locations like /usr/local.  You can also make /usr/local
a separate filesystem if you don't want to risk filling up your /usr
by mistake.

Another useful filesystem to create is /var, which contains mail, news
printer spool files and other temporary items.  It is a popular
candidate for a separate paritition and should be sized according to
your estimates of the amount of mail, news or spooled print jobs that
may be stored there.

WARNING: If you do not create a separate filesystem for /var, space
for such files will be allocated out of the root (/) filesystem
instead.  You may therefore wish to make the / partition bigger if you
expect a lot of mail or news and do not want to make /var its own
partition.


If you're new to this installation, you should also first understand
how FreeBSD 2.0.5's new "slices" paradigm for looking at disk storage
works.  It's not very hard to grasp.  A "fully qualified slice name",
that is the name of the file we open in /dev to talk to the slice, is
optionally broken into 3 parts:

        First you have the disk name.  Assume we have two SCSI
        drives in our system, which gives us `sd0' and `sd1'.

        Next you have the "Slice" (or "FDISK Partition") number,
        as seen in the Partition Editor.  Assume that our sd0 contains
        two slices, a FreeBSD slice and a DOS slice.  This gives us
        sd0s1 and sd0s2.  Let's also say that sd1 is completely devoted
        to FreeBSD, so we have only one slice there: sd1s1.

        Next, if a slice is a FreeBSD slice, you have a number of
        (confusingly named) "partitions" you can put inside of it.
        These FreeBSD partitions are where various filesystems or swap
        areas live, and using our hypothetical two-SCSI-disk machine
        again, we might have something like the following layout on sd0:

                Name            Mountpoint
                ----            ----------
                sd0s1a          /
                sd0s1b          <swap space>
                sd0s1e          /usr

        Because of historical convention, there is also a short-cut,
        or "compatibility slice", that is maintained for easy access
        to the first FreeBSD slice on a disk for those programs which
        still don't know how to deal with the new slice scheme.
        The compatibility slice names for our filesystem above would
        look like:

                Name            Mountpoint
                ----            ----------
                sd0a            /
                sd0b            <swap space>
                sd0e            /usr

        FreeBSD automatically maps the compatibility slice to the first
        FreeBSD slice it finds (in this case, sd0s1).  You may have multiple
        FreeBSD slices on a drive, but only the first one may be the
        compatibility slice!

        The compatibility slice will eventually be phased out, but
        it is still important right now for several reasons:

                1. Some programs, as mentioned before, still don't work
                   with the slice paradigm and need time to catch up.

                2. The FreeBSD boot blocks are unable to look for
                   a root file system in anything but a compatibility
                   slice right now.  This means that our root will always
                   show up on "sd0a" in the above scenario, even though
                   it really lives over on sd0s1a and would otherwise be
                   referred to by its full slice name.

Once you understand all this, then the label editor becomes fairly
simple.  You're either carving up the FreeBSD slices displayed at the
top of the screen into smaller pieces (displayed in the middle of the
screen) and then putting FreeBSD file systems on them, Or you're just
mounting existing partitions/slices into your filesystem hierarchy;
this editor lets you do both.  Since a DOS partition is also just
another slice as far as FreeBSD is concerned, you can mount one into
in your filesystem hierarchy just as easily with this editor.  For
FreeBSD partitions you can also toggle the "newfs" state so that
the partitions are either (re)created from scratch or simply checked
and mounted (the contents are preserved).

When you're done, type `Q' to exit.

No actual changes will be made to the disk until you (C)ommit from the
Install menu!  You're working with what is essentially a copy of
the disk label(s), both here and in the FDISK Partition Editor.
