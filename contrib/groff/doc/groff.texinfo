\input texinfo   @c -*-texinfo-*-

@c
@c If you use texinfo.tex 1999-09-25.10 or earlier please convert this
@c manual with `texi2dvi -e groff.texinfo' due to a bug in expanding
@c user-defined macros.
@c

@c %**start of header (This is for running Texinfo on a region.)
@setfilename  groff
@settitle The GNU Troff Manual
@setchapternewpage odd
@footnotestyle separate
@c %**end of header (This is for running Texinfo on a region.)


@c We use the following indices:
@c
@c   cindex: concepts
@c   findex: requests, escapes, and functions
@c   vindex: registers
@c   kindex: commands in font files
@c   pindex: programs and files
@c   tindex: environment variables
@c   maindex: macros and strings
@c   glindex: glyph names
@c   opindex: operators
@c
@c tindex and cindex are merged.

@defcodeindex ma
@defcodeindex gl
@defcodeindex op
@syncodeindex tp cp


@macro Deffn{category, name, arg}
@deffn \category\ @t{\name\} \arg\
@end macro

@macro end_Deffn
@end deffn
@end macro

@macro Deffnx{category, name, arg}
@deffnx \category\ @t{\name\} \arg\
@end macro

@macro end_Deffnx
@end deffnx
@end macro

@macro Defmac{name, arg}
@defmac @t{\name\} \arg\
@end macro

@macro end_Defmac
@end defmac
@end macro

@macro Defmacx{name, arg}
@defmacx @t{\name\} \arg\
@end macro

@macro end_Defmacx
@end defmacx
@end macro


@c XXX comment all examples


@dircategory Miscellaneous
@direntry
* Groff: (groff).  The GNU troff document formatting system.
@end direntry


@smallbook


@iftex
@finalout
@end iftex


@ifinfo
This Info file documents GNU troff version 1.16.

Published by the Free Software Foundation
59 Temple Place, Suite 330
Boston, MA  02111-1307  USA

Copyright (C) 1994-2000 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Foundation.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License'' is included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU General Public License'' may be
included in a translation approved by the Free Software Foundation
instead of in the original English.
@end ifinfo


@titlepage
@title groff
@subtitle The GNU implementation of @code{troff}
@subtitle Edition 1.16
@subtitle Spring 2000
@author by Trent A.@w{ }Fisher
@author and Werner Lemberg

@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Copyright @copyright@w{ }1994-2000 Free Software Foundation,@w{ }Inc.
@sp 2
Version 1.16 of @code{groff}, @*
Spring 2000
@sp 2
Published by the Free Software Foundation @*
59 Temple Place, Suite 330 @*
Boston, MA  02111-1307  USA


Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License'' is included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU General Public License'' may be
included in a translation approved by the Free Software Foundation
instead of in the original English.

Cover art by Etienne Suvasa.
@end titlepage
@page



@node Top, Copying, (dir), (dir)

@ifinfo
This Info file documents groff version 1.16, the GNU implementation of
the troff typesetting system.

This is an in-progress document; contributions, comments, or
contributions are welcome.  Send them to bug-groff@@gnu.org.
@end ifinfo

@menu
* Copying::                     
* Introduction::                
* Invoking groff::              
* Tutorial for Macro Users::    
* Macro Packages::              
* Programming Tutorial::        
* Preprocessors::               
* Output Devices::              
* File formats::                
* Installation::                
* Request and Escape Index::    
* Operator Index::              
* Register Index::              
* Macro and String Index::      
* Glyph Name Index::            
* Font File Keyword Index::     
* Program and File Index::      
* Concept Index::               
@end menu



@node Copying, Introduction, Top, Top
@cindex copying
@unnumbered GNU GENERAL PUBLIC LICENSE
@center Version 2, June 1991

@display
Copyright @copyright{}@w{ }1989, 1991 Free Software Foundation, Inc.
59@w{ }Temple Place, Suite@w{ }330, Boston, MA@w{ }02111, USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@unnumberedsec Preamble

The licenses for most software are designed to take away your freedom to
share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free software --
to make sure the software is free for all its users.  This General
Public License applies to most of the Free Software Foundation's
software and to any other program whose authors commit to using it.
(Some other Free Software Foundation software is covered by the GNU
Library General Public License instead.)  You can apply it to your
programs, too.

When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for this
service if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs; and that you know you can do these things.

To protect your rights, we need to make restrictions that forbid anyone
to deny you these rights or to ask you to surrender the rights.  These
restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

For example, if you distribute copies of such a program, whether gratis
or for a fee, you must give the recipients all the rights that you have.
You must make sure that they, too, receive or can get the source code.
And you must show them these terms so they know their rights.

We protect your rights with two steps: (1)@w{ }copyright the software,
and (2)@w{ }offer you this license which gives you legal permission to
copy, distribute and/or modify the software.

Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

Finally, any free program is threatened constantly by software patents.
We wish to avoid the danger that redistributors of a free program will
individually obtain patent licenses, in effect making the program
proprietary.  To prevent this, we have made it clear that any patent
must be licensed for everyone's free use or not licensed at all.

The precise terms and conditions for copying, distribution and
modification follow.

@iftex
@unnumberedsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end iftex
@ifinfo
@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end ifinfo

@enumerate 0
@item
This License applies to any program or other work which contains a
notice placed by the copyright holder saying it may be distributed under
the terms of this General Public License.  The ``Program'', below,
refers to any such program or work, and a ``work based on the Program''
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it, either
verbatim or with modifications and/or translated into another language.
(Hereinafter, translation is included without limitation in the term
``modification''.)  Each licensee is addressed as ``you''.

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of running
the Program is not restricted, and the output from the Program is
covered only if its contents constitute a work based on the Program
(independent of having been made by running the Program).  Whether that
is true depends on what the Program does.

@item
You may copy and distribute verbatim copies of the Program's source code
as you receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice and
disclaimer of warranty; keep intact all the notices that refer to this
License and to the absence of any warranty; and give any other
recipients of the Program a copy of this License along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@item
You may modify your copy or copies of the Program or any portion of it,
thus forming a work based on the Program, and copy and distribute such
modifications or work under the terms of Section@w{ }1 above, provided
that you also meet all of these conditions:

@enumerate a
@item
You must cause the modified files to carry prominent notices stating
that you changed the files and the date of any change.

@item
You must cause any work that you distribute or publish, that in whole or
in part contains or is derived from the Program or any part thereof, to
be licensed as a whole at no charge to all third parties under the terms
of this License.

@item
If the modified program normally reads commands interactively when run,
you must cause it, when started running for such interactive use in the
most ordinary way, to print or display an announcement including an
appropriate copyright notice and a notice that there is no warranty (or
else, saying that you provide a warranty) and that users may
redistribute the program under these conditions, and telling the user
how to view a copy of this License.  (Exception: if the Program itself
is interactive but does not normally print such an announcement, your
work based on the Program is not required to print an announcement.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program, and
can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based on
the Program, the distribution of the whole must be on the terms of this
License, whose permissions for other licensees extend to the entire
whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of a
storage or distribution medium does not bring the other work under the
scope of this License.

@item
You may copy and distribute the Program (or a work based on it, under
Section@w{ }2) in object code or executable form under the terms of
Sections@w{ }1 and@w{ }2 above provided that you also do one of the
following:

@enumerate a
@item
Accompany it with the complete corresponding machine-readable source
code, which must be distributed under the terms of Sections@w{ }1 and@w{
}2 above on a medium customarily used for software interchange; or,

@item
Accompany it with a written offer, valid for at least three years, to
give any third party, for a charge no more than your cost of physically
performing source distribution, a complete machine-readable copy of the
corresponding source code, to be distributed under the terms of
Sections@w{ }1 and@w{ }2 above on a medium customarily used for software
interchange; or,

@item
Accompany it with the information you received as to the offer to
distribute corresponding source code.  (This alternative is allowed only
for noncommercial distribution and only if you received the program in
object code or executable form with such an offer, in accord with
Subsection@w{ }b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to control
compilation and installation of the executable.  However, as a special
exception, the source code distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies the
executable.

If distribution of executable or object code is made by offering access
to copy from a designated place, then offering equivalent access to copy
the source code from the same place counts as distribution of the source
code, even though third parties are not compelled to copy the source
along with the object code.

@item
You may not copy, modify, sublicense, or distribute the Program except
as expressly provided under this License.  Any attempt otherwise to
copy, modify, sublicense or distribute the Program is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this License
will not have their licenses terminated so long as such parties remain
in full compliance.

@item
You are not required to accept this License, since you have not signed
it.  However, nothing else grants you permission to modify or distribute
the Program or its derivative works.  These actions are prohibited by
law if you do not accept this License.  Therefore, by modifying or
distributing the Program (or any work based on the Program), you
indicate your acceptance of this License to do so, and all its terms and
conditions for copying, distributing or modifying the Program or works
based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further restrictions
on the recipients' exercise of the rights granted herein.  You are not
responsible for enforcing compliance by third parties to this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent license
would not permit royalty-free redistribution of the Program by all those
who receive copies directly or indirectly through you, then the only way
you could satisfy both it and this License would be to refrain entirely
from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is implemented
by public license practices.  Many people have made generous
contributions to the wide range of software distributed through that
system in reliance on consistent application of that system; it is up to
the author/donor to decide if he or she is willing to distribute
software through any other system and a licensee cannot impose that
choice.

This section is intended to make thoroughly clear what is believed to be
a consequence of the rest of this License.

@item
If the distribution and/or use of the Program is restricted in certain
countries either by patents or by copyrighted interfaces, the original
copyright holder who places the Program under this License may add an
explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions of
the General Public License from time to time.  Such new versions will be
similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and ``any
later version'', you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Program does not specify a version
number of this License, you may choose any version ever published by the
Free Software Foundation.

@item
If you wish to incorporate parts of the Program into other free programs
whose distribution conditions are different, write to the author to ask
for permission.  For software which is copyrighted by the Free Software
Foundation, write to the Free Software Foundation; we sometimes make
exceptions for this.  Our decision will be guided by the two goals of
preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

@iftex
@heading NO WARRANTY
@end iftex
@ifinfo
@center NO WARRANTY
@end ifinfo

@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW@.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE@.
THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
YOU@.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM
(INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED
INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF
THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR
OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@iftex
@heading END OF TERMS AND CONDITIONS
@end iftex
@ifinfo
@center END OF TERMS AND CONDITIONS
@end ifinfo


@page
@unnumberedsec How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively convey
the exclusion of warranty; and each file should have at least the
``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and an idea of what it does.}
Copyright (C) 19@var{yy} @var{name of author}

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

@smallexample
Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type
`show w'.  This is free software, and you are welcome to redistribute
it under certain conditions; type `show c' for details.
@end smallexample

The hypothetical commands @samp{show@w{ }w} and @samp{show@w{ }c} should
show the appropriate parts of the General Public License.  Of course,
the commands you use may be called something other than @samp{show@w{
}w} and @samp{show@w{ }c}; they could even be mouse-clicks or menu items
-- whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ``copyright disclaimer'' for the program, if
necessary.  Here is a sample; alter the names:

@smallexample
@group
Yoyodyne, Inc., hereby disclaims all copyright interest
in the program `Gnomovision' (which makes passes at compilers)
written by James Hacker.

@var{signature of Ty Coon}, 1 April 1989
Ty Coon, President of Vice
@end group
@end smallexample

This General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications
with the library.  If this is what you want to do, use the GNU Library
General Public License instead of this License.



@c =====================================================================
@c =====================================================================

@node Introduction, Invoking groff, Copying, Top
@chapter Introduction
@cindex introduction

GNU @code{troff} (or @code{groff}) is a system for typesetting
documents.  @code{troff} is very flexible and has been in existence (and
use) for about 3@w{ }decades.  It is quite widespread and firmly
entrenched in the @acronym{UNIX} community.

@menu
* What Is groff?::              
* History::                     
* groff Capabilities::          
* Macro Package Intro::         
* Preprocessor Intro::          
* Output device intro::         
* Credits::                     
@end menu


@c =====================================================================

@node What Is groff?, History, Introduction, Introduction
@section What Is @code{groff}?
@cindex what is @code{groff}?
@cindex @code{groff} -- what is it?

@code{groff} belongs to an older generation of document preparation
systems, which operate more like compilers than the more recent
interactive @acronym{WYSIWYG}@footnote{What You See Is What You Get}
systems.  @code{groff} and its contemporary counterpart, @TeX{}, both
work using a @dfn{batch} paradigm: The input (or @dfn{source}) files are
normal text files with embedded formatting commands.  These files can
then be processed by @code{groff} to produce a typeset document on a
variety of devices.

Likewise, @code{groff} should not be confused with a @dfn{word
processor}, since that term connotes an integrated system which includes
an editor and a text formatter.  Also, many word processors follow the
@acronym{WYSIWYG} paradigm which was discussed earlier.

Although @acronym{WYSIWYG} systems may be easier to use, they have a
number of disadvantages compared to @code{troff}:

@itemize @bullet
@item
They must be used on a graphics display to do any operations on a
document.

@item
Most of the @acronym{WYSIWYG} systems are either non-free or are not
very portable.

@item
@code{troff} is firmly entrenched in all @acronym{UNIX} systems.

@item
It is difficult to have a wide range of capabilities available within
the confines of a GUI/window system.

@item
It is more difficult to make global changes to a document.
@end itemize

@quotation
``GUIs normally make it simple to accomplish simple actions and
impossible to accomplish complex actions.''  --Doug Gwyn (22/Jun/91 in
@code{comp.unix.wizards})
@end quotation


@c =====================================================================

@node History, groff Capabilities, What Is groff?, Introduction
@section History
@cindex history

@cindex @code{runoff}
@cindex @code{rf}
@code{troff} can trace its origins back to a formatting program called
@code{runoff}, written by J.@w{ }E.@w{ }Saltzer, which ran on MIT's CTSS
operating system in the mid-sixties.  This name came from the common
phrase of the time ``I'll run off a document.''  Bob Morris ported it to
the 635 architecture and called the program @code{roff} (an abbreviation
of @code{runoff}).  It has then been rewritten as @code{rf} for the
PDP-7 (before having @acronym{UNIX}), and at the same time (1969), Doug
McIllroy rewrote an extended and simplified version of @code{roff} in
the @acronym{BCPL} programming language.

@cindex @code{roff}
The first version of @acronym{UNIX} was developed on a PDP-7 which was
sitting around Bell Labs.  In 1971 the developers wanted to get a PDP-11
for further work on the operating system.  In order to justify the cost
for this system, they proposed that they would implement a document
formatting system for the AT&T patents division.  This first formatting
program was a reimplementation of McIllroy's @code{roff}, written by
J.@w{ }F.@w{ }Ossanna.

@cindex @code{nroff}
When they needed a more flexible language, a new version of @code{roff}
called @code{nroff} (``Newer @code{roff}'') was written.  It had a much
more complicated syntax, but provided the basis for all future versions.
When they got a Graphic Systems CAT Phototypesetter, Ossanna wrote a
version of @code{nroff} which would drive it.  It was dubbed
@code{troff}, for ``typesetter @code{roff}'', although many people have
speculated that it actually means ``Times @code{roff}'' because of the
use of the Times font family in @code{troff} by default.  As such, the
name @code{troff} is pronounced `@w{t-roff}' rather than `trough'.

With @code{troff} came @code{nroff} (they were actually the same program
except for some @samp{#ifdef}s), which was for producing output for line
printers and character terminals.  It understood everything @code{troff}
did, and ignored the commands which were not applicable (e.g.@: font
changes).

Since there are several things which cannot be done easily in
@code{troff}, work on several preprocessors began.  These programs would
transform certain parts of a document into @code{troff}, which made a
very natural use of pipes in @acronym{UNIX}.

The @code{eqn} preprocessor allowed mathematical formul@ae{} to be
specified in a much simpler and more intuitive manner.  @code{tbl} is a
preprocessor for formatting tables.  The @code{refer} preprocessor (and
the similar program, @code{bib}) processes citations in a document
according to a bibliographic database.

Unfortunately, Ossanna's @code{troff} was written in PDP-11 assembly
language and produced output specifically for the CAT phototypesetter.
He rewrote it in C, although it was now 7000@w{ }lines of uncommented
code and still dependent on the CAT.  As the CAT became less common, and
was no longer supported by the manufacturer, the need to make it support
other devices became a priority.  However, before this could be done,
Ossanna was killed in an auto accident.

@pindex ditroff
@cindex @code{ditroff}
So, Brian Kernighan took on the task of rewriting @code{troff}.  The
newly rewritten version produced a device independent code which was
very easy for postprocessors to read and translate to the appropriate
printer codes.  Also, this new version of @code{troff} (called
@code{ditroff} for ``device independent @code{troff}'') had several
extensions, which included drawing functions.

Due to the additional abilities of the new version of @code{troff},
several new preprocessors appeared.  The @code{pic} preprocessor
provides a wide range of drawing functions.  Likewise the @code{ideal}
preprocessor did the same, although via a much different paradigm.  The
@code{grap} preprocessor took specifications for graphs, but, unlike
other preprocessors, produced @code{pic} code.

James Clark began work on a GNU implementation of @code{ditroff} in
early@w{ }1989.  The first version, @code{groff}@w{ }0.3.1, was released
June@w{ }1990.  @code{groff} included:

@itemize @bullet
@item
A replacement for @code{ditroff} with many extensions.

@item
The @code{soelim}, @code{pic}, @code{tbl}, and @code{eqn} preprocessors.

@item
Postprocessors for character devices, @acronym{PostScript}, @TeX{} DVI,
and X@w{ }windows.  GNU @code{troff} also eliminated the need for a
separate @code{nroff} program with a postprocessor which would produce
@acronym{ASCII} output.

@item
A version of the @file{me} macros and an implementation of the
@file{man} macros.
@end itemize

Also, a front-end was included which could construct the, sometimes
painfully long, pipelines required for all the post- and preprocessors.

Development of GNU @code{troff} progressed rapidly, and saw the
additions of a replacement for @code{refer}, an implementation of the
@file{ms} and @file{mm} macros, and a program to deduce how to format a
document (@code{grog}).

It was declared a stable (i.e.@: non-beta) package with the release of
version@w{ }1.04 around November@w{ }1991.

Beginning in@w{ }1999, @code{groff} has new maintainers (the package was
an orphan for a few years).  As a result, new features and programs like
@code{grn}, a preprocessor for gremlin images, and @code{grohtml}, an
output device to produce @acronym{HTML} output, have been added.


@c =====================================================================

@node groff Capabilities, Macro Package Intro, History, Introduction
@section @code{groff} Capabilities
@cindex @code{groff} capabilities
@cindex capabilities of @code{groff}

So what exactly is @code{groff} capable of doing?  @code{groff} provides
a wide range of low-level text formatting operations.  Using these, it
is possible to perform a wide range of formatting tasks, such as
footnotes, table of contents, multiple columns, etc.  Here's a list of
the most important operations supported by @code{groff}:

@itemize @bullet
@item
text filling, adjusting, and centering

@item
hyphenation

@item
page control

@item
font and character size control

@item
vertical spacing (i.e.@: double spacing)

@item
line length and indenting

@item
macros, strings, diversions, and traps

@item
number registers

@item
tabs, leaders, and fields

@item
input and output conventions and character translation

@item
overstrike, bracket, line drawing, and zero-width functions

@item
local horizontal and vertical motions and the width function

@item
three-part titles

@item
output line numbering

@item
conditional acceptance of input

@item
environment switching

@item
insertions from the standard input

@item
input/output file switching

@item
output and error messages
@end itemize


@c =====================================================================

@node Macro Package Intro, Preprocessor Intro, groff Capabilities, Introduction
@section Macro Packages
@cindex macro packages

Since @code{groff} provides such low-level facilities, it can be quite
difficult to use by itself.  However, @code{groff} provides a
@dfn{macro} facility to specify how certain routine operations (e.g.@w{
}starting paragraphs, printing headers and footers, etc.)@: should be
done.  These macros can be collected together into a @dfn{macro
package}.  There are a number of macro packages available; the most
common (and the ones described in this manual) are @file{man},
@file{mdoc}, @file{me}, @file{ms}, and @file{mm}.


@c =====================================================================

@node Preprocessor Intro, Output device intro, Macro Package Intro, Introduction
@section Preprocessors
@cindex preprocessors

Although @code{groff} provides most functions needed to format a
document, some operations would be unwieldy (e.g.@: to draw pictures).
Therefore, programs called preprocessors were written which understand
their own language and produce the necessary @code{groff} operations.
These preprocessors are able to differentiate their own input from the
rest of the document via markers.

To use a preprocessor, @acronym{UNIX} pipes are used to feed the output
from the preprocessor into @code{groff}.  Any number of preprocessors
may be used on a given document; in this case, the preprocessors are
linked together into one pipeline.  However, in @code{groff}, the user
does not need to construct the pipe, but only tell @code{groff} what
preprocessors to use.

@code{groff} currently has preprocessors for producing tables
(@code{tbl}), typesetting equations (@code{eqn}), drawing pictures
(@code{pic} and @code{grn}), and for processing bibliographies
(@code{refer}).  An associated program which is useful when dealing with
preprocessors is @code{soelim}.

A free implementation of @code{grap}, a preprocessor for drawing graphs,
can be obtained as an extra package; @code{groff} can use @code{grap}
also.

There are other preprocessors in existence, but, unfortunately, no free
implementations are available.  Among them are preprocessors for drawing
mathematical pictures (@code{ideal}) and chemical structures
(@code{chem}).


@c =====================================================================

@node Output device intro, Credits, Preprocessor Intro, Introduction
@section Output Devices
@cindex postprocessors
@cindex output devices
@cindex devices for output

@code{groff} actually produces device independent code which may be fed
into a postprocessor which will produce output for a particular device.
Currently, @code{groff} has postprocessors for @acronym{PostScript}
devices, character terminals, X@w{ }Windows (for previewing), @TeX{} DVI
format, HP LaserJet@w{ }4 and Canon LBP printers (which use
@acronym{CAPSL}), and @acronym{HTML}.


@c =====================================================================

@node Credits,  , Output device intro, Introduction
@section Credits
@cindex credits

Large portions of this manual were taken from existing documents, most
notably, the manual pages for the @code{groff} package by James Clark,
and Eric Allman's papers on the @file{me} macro package.

The section on the @file{man} macro package is partly based on Susan@w{
}G.@: Kleinmann's @file{groff_man} manual page written for the Debian
GNU/Linux system.



@c =====================================================================
@c =====================================================================

@node Invoking groff, Tutorial for Macro Users, Introduction, Top
@chapter Invoking @code{groff}
@cindex invoking @code{groff}
@cindex @code{groff} invocation

This section focuses on how to invoke the @code{groff} front end.  This
front end takes care of the details of constructing the pipeline among
the preprocessors, @code{gtroff} and the postprocessor.

It has become a tradition that GNU programs get the prefix @samp{g} to
distinguish it from its original counterparts provided by the host (see
@ref{Environment}, for more details).  Thus, for example, @code{geqn} is
GNU @code{eqn}.  On operating systems like Linux or the Hurd, which
don't contain proprietary software, and on MS-DOS/MS-Windows, where
@code{troff} and associated programs are not available at all, this
prefix is omitted since GNU @code{troff} is the only used incarnation of
@code{troff}.  Exception: @code{groff} is never replaced by @code{roff}.

@menu
* Groff Options::               
* Environment::                 
* Invocation Examples::         
@end menu


@c =====================================================================

@node Groff Options, Environment, Invoking groff, Invoking groff
@section Options
@cindex options

@pindex groff
@pindex gtroff
@pindex gpic
@pindex geqn
@pindex ggrn
@pindex grap
@pindex gtbl
@pindex grefer
@pindex gsoelim
@code{groff} normally runs the @code{gtroff} program and a postprocessor
appropriate for the selected device.  The default device is @samp{ps}
(but it can be changed when @code{groff} is configured and built).  It
can optionally preprocess with any of @code{gpic}, @code{geqn},
@code{gtbl}, @code{ggrn}, @code{grap}, @code{grefer}, or @code{gsoelim}.

This section only documents options to the @code{groff} front end.  Many
of the arguments to @code{groff} are passed on to @code{gtroff},
therefore those are also included.  Arguments to pre- or postprocessors
can be found in @ref{Invoking gpic}, @ref{Invoking geqn}, @ref{Invoking
gtbl}, @ref{Invoking ggrn}, @ref{Invoking grefer}, @ref{Invoking
gsoelim}, @ref{Invoking grotty}, @ref{Invoking grops}, @ref{Invoking
grohtml}, @ref{Invoking grodvi}, @ref{Invoking grolj4}, @ref{Invoking
grolbp}, and @ref{Invoking gxditview}.

The command line format for @code{groff} is:

@example
groff [ -abeghilpstvzCEGNRSUVXZ ] [ -F@var{dir} ] [ -m@var{name} ]
      [ -T@var{def} ] [ -f@var{fam} ] [ -w@var{name} ] [ -W@var{name} ]
      [ -M@var{dir} ] [ -d@var{cs} ] [ -r@var{cn} ] [ -n@var{num} ]
      [ -o@var{list} ] [ -P@var{arg} ] [ -L@var{arg} ] [ -I@var{dir} ]
      [ @var{files}@dots{} ]
@end example

The command line format for @code{gtroff} is as follows.

@example
gtroff [ -abivzCERU ] [ -w@var{name} ] [ -W@var{name} ] [ -d@var{cs} ]
       [ -f@var{fam} ] [ -m@var{name} ] [ -n@var{num} ]
       [ -o@var{list} ] [ -r@var{cn} ] [ -T@var{name} ]
       [ -F@var{dir} ] [ -M@var{dir} ] [ @var{files}@dots{} ]
@end example

@noindent
Obviously, many of the options to @code{groff} are actually passed
on to @code{gtroff}.

Options without an argument can be grouped behind a single @option{-}.
A filename of @file{-} denotes the standard input.  It is possible to
have whitespace between an option and its parameter.

The @code{grog} command can be used to guess the correct @code{groff}
command to format a file.

Here's the description of the command-line options:

@cindex command-line options
@table @samp
@item -h
Print a help message.

@item -e
Preprocess with @code{geqn}.

@item -t
Preprocess with @code{gtbl}.

@item -g
Preprocess with @code{ggrn}.

@item -G
Preprocess with @code{grap}.

@item -p
Preprocess with @code{gpic}.

@item -s
Preprocess with @code{gsoelim}.

@item -R
Preprocess with @code{grefer}.  No mechanism is provided for passing
arguments to @code{grefer} because most @code{grefer} options have
equivalent commands which can be included in the file.  @xref{grefer},
for more details.

@pindex troffrc
@pindex troffrc-end
Note that @code{gtroff} also accepts a @option{-R} option, which is not
accessible via @code{groff}.  This option prevents the loading of the
@file{troffrc} and @file{troffrc-end} files.

@item -v
Make programs run by @code{groff} print out their version number.

@item -V
Print the pipeline on stdout instead of executing it.

@item -z
Suppress output from @code{gtroff}.  Only error messages will be
printed.

@item -Z
Do not postprocess the output of @code{gtroff}.  Normally @code{groff}
will automatically run the appropriate postprocessor.

@item -P@var{arg}
Pass @var{arg} to the postprocessor.  Each argument should be passed
with a separate @option{-P} option.  Note that @code{groff} does not
prepend @samp{-} to @var{arg} before passing it to the postprocessor.

@item -l
Send the output to a printer.  The command used for this is specified by
the print command in the device description file.

@item -L@var{arg}
Pass @var{arg} to the spooler.  Each argument should be passed with a
separate @option{-L} option.  Note that @code{groff} does not prepend a
@samp{-} to @var{arg} before passing it to the postprocessor.

@item -T@var{dev}
Prepare output for device @var{dev}.  The default device is @samp{ps},
unless changed when @code{groff} was configured and built.  The
following are the output devices currently available:

@table @code
@item ps
For @acronym{PostScript} printers and previewers.

@item dvi
For @TeX{} DVI format.

@item X75
For a 75@dmn{dpi} X11 previewer.

@item X100
For a 100@dmn{dpi} X11 previewer.

@item ascii
For typewriter-like devices.

@item latin1
For typewriter-like devices that support the @w{Latin-1} (@w{ISO 8859-1})
character set.

@item utf8
For typewriter-like devices which use the Unicode (@w{ISO 10646})
character set with @w{UTF-8} encoding.

@item cp1047
@cindex @acronym{EBCDIC} encoding
@cindex cp1047
@cindex IBM cp1047
For typewriter-like devices which use the @acronym{EBCDIC} encoding IBM
cp1047.

@item lj4
For an HP LaserJet4-compatible (or other PCL5-compatible) printer.

@item lbp
For Canon @acronym{CAPSL} printers (@w{LBP-4} and @w{LBP-8} series laser
printers).

@item html
To produce @acronym{HTML} output.
@end table

@vindex .T
@maindex \*(.T
The predefined @code{gtroff} string register @code{.T} contains the
current output device; the read-only number register @code{.T} is set
to@w{ }1 if this option is used (which is always true if @code{groff} is
used to call @code{gtroff}).  @xref{Built-in Registers}.

The postprocessor to be used for a device is specified by the
@code{postpro} command in the device description file.  (@xref{Font
Files}, for more info.)  This can be overridden with the @option{-X}
option.

@item -X
Preview with @code{gxditview} instead of using the usual postprocessor.
This is unlikely to produce good results except with @option{-Tps}.

Note that this is not the same as using @option{-TX75} or
@option{-TX100} to view a document with @code{gxditview}: The former
will use the metrics of the specified device, whereas the latter will
use X-specific fonts and metrics.

@item -N
Don't allow newlines with @code{eqn} delimiters.  This is the same as
the @option{-N} option in @code{geqn}.

@item -S
Safer mode.  Pass the @option{-S} option to @code{gpic} and use the
@option{-msafer} macros with @code{gtroff} (enabled by default).

@item -U
Unsafe mode.  Reverts to the old unsafe behaviour.

@item -a
@vindex .A
Generate an @acronym{ASCII} approximation of the typeset output.  The
read-only register @code{.A} is then set to@w{ }1.  @xref{Built-in
Registers}.

@item -b
Print a backtrace with each warning or error message.  This backtrace
should help track down the cause of the error.  The line numbers given
in the backtrace may not always be correct: @code{gtroff} can get
confused by @code{as} or @code{am} requests while counting line numbers.

@item -i
Read the standard input after all the named input files have been
processed.

@item -w@var{name}
Enable warning @var{name}.  Available warnings are described in
@ref{Debugging}.  Multiple @option{-w} options are allowed.

@item -W@var{name}
Inhibit warning @var{name}.  Multiple @option{-W} options are allowed.

@item -E
Inhibit all error messages.

@item -C
Enable compatibility mode.  @xref{Implementation Differences}, for the
list of incompatibilites between @code{groff} and traditional Unix
@code{troff}.

@item -d@var{cs}
@itemx -d@var{name}=s
Define @var{c} or @var{name} to be a string @var{s}.  @var{c} must be a
one-letter name; @var{name} can be of arbitrary length.

@item -f@var{fam}
Use @var{fam} as the default font family.

@item -m@var{name}
Read in the file @file{tmac.@var{name}}.  Normally this will be searched
for in the library directory of @code{groff}.

@item -n@var{num}
Number the first page @var{num}.

@item -o@var{list}
@vindex .P
Output only pages in @var{list}, which is a comma-separated list of page
ranges; @samp{@var{n}} means print page @var{n}, @samp{@var{m}-@var{n}}
means print every page between @var{m} and @var{n}, @samp{-@var{n}}
means print every page up to @var{n}, @samp{@var{n}-} means print every
page beginning with @var{n}.  @code{gtroff} will exit after printing the
last page in the list.  All the ranges are inclusive on both ends.

Within @code{gtroff}, this information can be extracted with the
@samp{.P} register.  @xref{Built-in Registers}.

@item -r@var{cn}
@itemx -r@var{name}=@var{n}
Set number register @var{c} or @var{name} to the value @var{n}.  @var{c}
must be a one-letter name; @var{name} can be of arbitrary length.
@var{n} can be any @code{gtroff} numeric expression.

@item -F@var{dir}
Search @file{@var{dir}} for subdirectories @file{dev@var{name}}
(@var{name} is the name of the device), for the @file{DESC} file, and
for font files before looking in the standard directory.

@item -M@var{dir}
Search directory @file{@var{dir}} for macro files before the standard
directory.

@item -I@var{dir}
This option is as described in @ref{gsoelim}.  It implies the
@option{-s} option.
@end table


@c =====================================================================

@node Environment, Invocation Examples, Groff Options, Invoking groff
@section Environment
@cindex environment variables
@cindex variables in environment

There are also several environment variables (of the operating system,
not within @code{gtroff}) which can modify the behavior of @code{groff}.

@table @code
@item GROFF_COMMAND_PREFIX
@tindex GROFF_COMMAND_PREFIX, environment variable
If this is set to @var{X}, then @code{groff} will run
@code{@var{X}troff} instead of @code{gtroff}.  This also applies to
@code{tbl}, @code{pic}, @code{eqn}, @code{grn}, @code{refer}, and
@code{soelim}.  It does not apply to @code{grops}, @code{grodvi},
@code{grotty}, @code{grohtml}, @code{grolj4}, and @code{gxditview}.

@item GROFF_TMAC_PATH
@tindex GROFF_TMAC_PATH, environment variable
A colon-separated list of directories in which to search for macro
files.

@item GROFF_TYPESETTER
@tindex GROFF_TYPESETTER, environment variable
The default output device.

@item GROFF_FONT_PATH
@tindex GROFF_FONT_PATH, environment variable
A colon-separated list of directories in which to search for the
@code{dev}@var{name} directory.

@item PATH
@tindex PATH, environment variable
The search path for commands executed by @code{groff}.

@item GROFF_TMPDIR
@tindex GROFF_TMPDIR, environment variable
@tindex TMPDIR, environment variable
The directory in which temporary files will be created.  If this is not
set and @env{TMPDIR} is set, temporary files will be created in that
directory.  Otherwise temporary files will be created in a
system-dependent default directory (on Unix and GNU/Linux systems, this
is usually @file{/tmp}).  The @code{grops} and @code{grefer} commands
can create temporary files in this directory.
@end table

Note that MS-DOS and MS-Windows ports of @code{groff} use semi-colons,
rather than colons, to separate the directories in the lists described
above.


@c =====================================================================

@node Invocation Examples,  , Environment, Invoking groff
@section Invocation Examples
@cindex invocation examples
@cindex examples of invocation

This section will list several common uses of @code{groff} and the
command line which will accomplish it.

@example
groff file
@end example

@noindent
This command processes @file{file} without a macro package or a
preprocessor.  The output device is the default, @samp{ps}, and the
output is sent to stdout.

@example
groff -t -mandoc -Tascii file | less
@end example

@noindent
This is basically what a call to the @code{man} program does.  The
manual page @file{file} is processed with the @file{mandoc} macros
(which in turn either calls the @file{man} or the @file{mdoc} macro
package), using the @code{tbl} preprocessor and the @acronym{ASCII}
output device.  Finally, the result is displayed with the @code{less}
pager.

@example
groff -X -m me file
@end example

@noindent
Preview @file{file} with @code{gxditview}, using the @file{me} macro
package.  Since no @option{-T} option is specified, use the default
device (@samp{ps}).  Note that you can either say @w{@samp{-m me}} or
@w{@samp{-me}}; the latter is an anachronism from the early days of
@acronym{UNIX}.@footnote{The same is true for the other main macro
packages that come with @code{groff}: @file{man}, @file{mdoc},
@file{ms}, @file{mm}, and @file{mandoc}.  This won't work in general;
for example, to load @file{tmac.safer}, either @samp{-msafer} or
@w{@samp{-m safer}} must be used.}

@example
groff -man -rD1 -z file
@end example

@noindent
Check @file{file} with the @file{man} macro package, forcing
double-sided printing -- don't produce any output.

@c ---------------------------------------------------------------------

@menu
* grog::                        
@end menu

@node grog,  , Invocation Examples, Invocation Examples
@subsection @code{grog}

@pindex grog
@code{grog} reads files, guesses which of the @code{groff} preprocessors
and/or macro packages are required for formatting them, and prints the
@code{groff} command including those options on the standard output.
The options generated are one of @option{-e}, @option{-man},
@option{-me}, @option{-mm}, @option{-ms}, @option{-p}, @option{-R},
@option{-g}, @option{-G}, @option{-s}, and @option{-t}.

A special file name @file{-} is taken to refer to the standard input.
If no files are specified the standard input will be read.  Any
specified options will be included in the printed command.  No space is
allowed between options and their arguments.  For example,

@example
grog -Tdvi paper.ms
@end example

@noindent
will guess the appropriate command to print @file{paper.ms} and then
print it to the command line after adding the @option{-Tdvi} option.
For direct execution, enclose the call to @code{grog} in backquotes at
the @acronym{UNIX} shell prompt:

@example
`grog -Tdvi paper.ms` > paper.dvi
@end example

@noindent
As seen in the example, it is still necessary to redirect the output to
something meaningful (i.e.@: either a file or a pager program like
@code{less}).



@c =====================================================================
@c =====================================================================

@node Tutorial for Macro Users, Macro Packages, Invoking groff, Top
@chapter Tutorial for Macro Users
@cindex tutorial for macro users
@cindex macros, tutorial for users
@cindex user's tutorial for macros
@cindex user's macro tutorial

Most users tend to use a macro package to format their papers.  This
means that the whole breadth of @code{groff} is not necessary for most
people.  This chapter covers the material needed to efficiently use a
macro package.

@menu
* Basics::                      
* Common Features::             
@end menu


@c =====================================================================

@node Basics, Common Features, Tutorial for Macro Users, Tutorial for Macro Users
@section Basics
@cindex basics of macros
@cindex macro basics

This section covers some of the basic concepts necessary to understand
how to use a macro package.@footnote{This section is derived from
@cite{Writing Papers with nroff using -me} by Eric P.@w{ }Allman.}
References are made throughout to more detailed information, if desired.

@code{gtroff} reads an input file prepared by the user and outputs a
formatted document suitable for publication or framing.  The input
consists of text, or words to be printed, and embedded commands
(@dfn{requests} and @dfn{escapes}), which tell @code{gtroff} how to
format the output.  For more detail on this, see @ref{Embedded
Commands}.

The word @dfn{argument} is used in this chapter to mean a word or number
which appears on the same line as a request, and which modifies the
meaning of that request.  For example, the request

@example
.sp
@end example

@noindent
spaces one line, but

@example
.sp 4
@end example

@noindent
spaces four lines.  The number@w{ }4 is an argument to the @code{sp}
request which says to space four lines instead of one.  Arguments are
separated from the request and from each other by spaces.  More details
on this can be found in @ref{Request Arguments}.

The primary function of @code{gtroff} is to collect words from input
lines, fill output lines with those words, justify the right-hand margin
by inserting extra spaces in the line, and output the result.  For
example, the input:

@example
Now is the time
for all good men
to come to the aid
of their party.
Four score and seven
years ago,...
@end example

@noindent
will be read, packed onto output lines, and justified to produce:

@quotation
Now is the time for all good men to come to the aid of their party.
Four score and seven years ago,...
@end quotation

@cindex break
@cindex line break
Sometimes a new output line should be started even though the current
line is not yet full; for example, at the end of a paragraph.  To do
this it is possible to cause a @dfn{break}, which starts a new output
line.  Some requests cause a break automatically, as do blank input
lines and input lines beginning with a space.

Not all input lines are text to be formatted.  Some of the input lines
are requests which describe how to format the text.  Requests always
have a period (@samp{.}) or an apostrophe (@samp{'}) as the first
character of the input line.

The text formatter also does more complex things, such as automatically
numbering pages, skipping over page boundaries, putting footnotes in the
correct place, and so forth.

Here are a few hints for preparing text for input to @code{gtroff}.
First, keep the input lines short.  Short input lines are easier to
edit, and @code{gtroff} will pack words onto longer lines anyhow.  In
keeping with this, it is helpful to begin a new line after every period,
comma, or phrase, since common corrections are to add or delete
sentences or phrases.  Secondly, do not hyphenate words at the end of
lines -- @code{gtroff} is smart enough to hyphenate words for the user
as needed, but is not smart enough to take hyphens out and join a word
back together.  Also, words such as ``mother-in-law'' should not be
broken over a line, since then a space can occur where not wanted, such
as ``@w{mother- in}-law''.

@findex ls
@cindex double spacing
@cindex spacing
@code{gtroff} will double space output text automatically if you use the
request @w{@samp{.ls 2}}.  Single spaced mode can be reactivated by
typing @w{@samp{.ls 1}}.

A number of requests allow to change the way the output looks, sometimes
called the @dfn{layout} of the output page.  Most of these requests
adjust the placing of @dfn{white space} (blank lines or spaces).

@cindex new page
The @samp{.bp} request starts a new page, causing a line break.

@cindex blank lines
@cindex empty lines
@cindex lines, empty
The request @w{@samp{.sp @var{N}}} leaves @var{N}@w{ }lines of blank
space.  @var{N}@w{ }can be omitted (meaning skip a single line) or can
be of the form @var{N}i (for @var{N}@w{ }inches) or @var{N}c (for
@var{N}@w{ }centimeters).  For example, the input:

@example
.sp 1.5i
My thoughts on the subject
.sp
@end example

@noindent
leaves one and a half inches of space, followed by the line ``My
thoughts on the subject'', followed by a single blank line.

@findex ce
@cindex centering lines
@cindex lines, centering
Text lines can be centered by using the @code{ce} request.  The line
after @code{ce} is centered (horizontally) on the page.  To center more
than one line, use @w{@samp{.ce @var{N}}} (where @var{N} is the number
of lines to center), followed by the @var{N}@w{ }lines.  To center many
lines without counting them, type:

@example
.ce 1000
lines to center
.ce 0
@end example

@noindent
The @w{@samp{.ce 0}} request tells @code{groff} to center zero more
lines, in other words, stop centering.

@findex br
@cindex line break
@cindex break
All of these requests cause a break; that is, they always start a new
line.  To start a new line without performing any other action, use
@code{br}.


@c =====================================================================

@node Common Features,  , Basics, Tutorial for Macro Users
@section Common Features
@cindex common features
@cindex features, common

@code{gtroff} provides very low level operations for formatting a
document.  There are many common routine operations which are done in
all documents.  These common operations are written into @dfn{macros}
and collected into a @dfn{macro package}.

All macro packages provide certain common capabilities which fall into
the following categories.

@c ---------------------------------------------------------------------

@menu
* Paragraphs::                  
* Sections and Chapters::       
* Headers and Footers::         
* Page Layout Adjustment::      
* Displays::                    
* Footnotes and Annotations::   
* Table of Contents::           
* Indices::                     
* Paper Formats::               
* Multiple Columns::            
* Font and Size Changes::       
* Predefined Strings::          
* Preprocessor Support::        
* Configuration and Customization::  
@end menu

@node Paragraphs, Sections and Chapters, Common Features, Common Features
@subsection Paragraphs
@cindex paragraphs

One of the most common and most used capability is starting a paragraph.
There are a number of different types of paragraphs, any of which can be
initiated with macros supplied by the macro package.  Normally,
paragraphs start with a blank line and the first line indented, like the
text in this manual.  There are also block style paragraphs, which omit
the indentation:

@example
Some   men  look   at  constitutions   with  sanctimonious
reverence, and deem them like the ark of the covenant, too
sacred to be touched.
@end example

@noindent
And there are also indented paragraphs which begin with a tag or label
at the margin and the remaining text indented.

@example
one   This is  the first paragraph.  Notice  how the first
      line of  the resulting  paragraph lines up  with the
      other lines in the paragraph.
longlabel
      This  paragraph   had  a  long   label.   The  first
      character of text on the first line will not line up
      with  the  text  on  second  and  subsequent  lines,
      although they will line up with each other.
@end example

A variation of this is a bulleted list.

@c XXX description

@c ---------------------------------------------------------------------

@node Sections and Chapters, Headers and Footers, Paragraphs, Common Features
@subsection Sections and Chapters

Most macro packages supply some form of section headers.  The simplest
kind is simply the heading on a line by itself in bold type.  Others
supply automatically numbered section heading or different heading
styles at different levels.  Some, more sophisticated, macro packages
supply macros for starting chapters and appendices.

@c ---------------------------------------------------------------------

@node Headers and Footers, Page Layout Adjustment, Sections and Chapters, Common Features
@subsection Headers and Footers

Every macro package gives some way to manipulate the headers and
footers (or @dfn{titles}) on each page.  Some packages will allow for
different ones on the even and odd pages (for material printed in a book
form).

The titles are called three-part titles, that is, there is a
left-justified part, a centered part, and a right-justified part.  An
automatically generated page number may be put in any of these fields
with the @samp{%} character (see @ref{Page Layout}, for more details).

@c ---------------------------------------------------------------------

@node Page Layout Adjustment, Displays, Headers and Footers, Common Features
@subsection Page Layout

Most macro packages let the user specify top and bottom margins and
other details about the appearance of the printed pages.

@c ---------------------------------------------------------------------

@node Displays, Footnotes and Annotations, Page Layout Adjustment, Common Features
@subsection Displays
@cindex displays

Displays are sections of text to be set off from the body of the paper.
Major quotes, tables, and figures are types of displays, as are all the
examples used in this document.

@cindex quotes, major
@cindex major quotes
@dfn{Major quotes} are quotes which are several lines long, and hence
are set in from the rest of the text without quote marks around them.

@cindex list
A @dfn{list} is an indented, single spaced, unfilled display.  Lists
should be used when the material to be printed should not be filled and
justified like normal text, such as columns of figures or the examples
used in this paper.

@cindex keep
A @dfn{keep} is a display of lines which are kept on a single page if
possible.  An example for a keep might be a diagram.  Keeps differ from
lists in that lists may be broken over a page boundary whereas keeps
will not.

@cindex keep, floating
@cindex floating keep
Floating keeps move relative to the text.  Hence, they are good for
things which will be referred to by name, such as ``See figure@w{ }3''.
A floating keep will appear at the bottom of the current page if it will
fit; otherwise, it will appear at the top of the next page.  Meanwhile,
the surrounding text will `flow' around the keep, thus leaving now blank
areas.

@c ---------------------------------------------------------------------

@node Footnotes and Annotations, Table of Contents, Displays, Common Features
@subsection Footnotes and Annotations
@cindex footnotes
@cindex annotations

There are a number of requests to save text for later printing.

@dfn{Footnotes} are printed at the bottom of the current page.

@cindex delayed text
@dfn{Delayed text} is very similar to a footnote except that it is
printed when called for explicitly.  This allows a list of references to
appear (for example) at the end of each chapter, as is the convention in
some disciplines.

Most macro packages which supply this functionality also supply a means
of automatically numbering either type of annotation.

@c ---------------------------------------------------------------------

@node Table of Contents, Indices, Footnotes and Annotations, Common Features
@subsection Table of Contents
@cindex table of contents
@cindex contents, table of

@dfn{Tables of contents} are a type of delayed text having a tag
(usually the page number) attached to each entry after a row of dots.
The table accumulates throughout the paper until printed, usually after
the paper has ended.  Many macro packages will provide the ability to
have several tables of contents (i.e.@: one standard one, one for
tables, etc).

@c ---------------------------------------------------------------------

@node Indices, Paper Formats, Table of Contents, Common Features
@subsection Indices
@cindex index, in macro package

While some macro packages will use the term @dfn{index}, none actually
provide that functionality.  The facilities they call indices are
actually more appropriate for tables of contents.

@c ---------------------------------------------------------------------

@node Paper Formats, Multiple Columns, Indices, Common Features
@subsection Paper Formats
@cindex paper formats

Some macro packages provide stock formats for various kinds of
documents.  Many of them provide a common format for the title and
opening pages of a technical paper.  The @file{mm} macros in particular
provide formats for letters and memoranda.

@c ---------------------------------------------------------------------

@node Multiple Columns, Font and Size Changes, Paper Formats, Common Features
@subsection Multiple Columns

Some macro packages (but not @file{man}) provide the ability to have two
or more columns on a page.

@c ---------------------------------------------------------------------

@node Font and Size Changes, Predefined Strings, Multiple Columns, Common Features
@subsection Font and Size Changes

The built-in font and size functions are not always intuitive, so all
macro packages provide macros to make these operations simpler.

@c ---------------------------------------------------------------------

@node Predefined Strings, Preprocessor Support, Font and Size Changes, Common Features
@subsection Predefined Strings

Most macro packages provide various predefined strings for a variety of
uses; examples are sub- and superscripts, printable dates, quotes and
various special characters.

@c ---------------------------------------------------------------------

@node Preprocessor Support, Configuration and Customization, Predefined Strings, Common Features
@subsection Preprocessor Support

All macro packages provide support for the various preprocessors.

@c ---------------------------------------------------------------------

@node Configuration and Customization,  , Preprocessor Support, Common Features
@subsection Configuration and Customization

Some macro packages provide means of customizing many of the details of how
the package behaves.  This ranges from setting the default type size to
changing the appearance of section headers.



@c =====================================================================
@c =====================================================================

@node Macro Packages, Programming Tutorial, Tutorial for Macro Users, Top
@chapter Macro Packages
@cindex macro packages
@cindex packages, macros

This chapter documents the main macro packages that come with
@code{groff}.

@menu
* man::                         
* mdoc::                        
* ms::                          
* me::                          
* mm::                          
@end menu


@c =====================================================================

@node man, mdoc, Macro Packages, Macro Packages
@section @file{man}
@cindex @file{man}
@cindex manual pages
@pindex tmac.an
@pindex tmac.man

This is the most popular and probably the most important macro package
of @code{groff}.  It is easy to use, and a vast majority of manual pages
are based on it.

@menu
* Man options::                 
* Man usage::                   
* Man font macros::             
* Miscellaneous man stuff::     
@end menu

@c ---------------------------------------------------------------------

@node Man options, Man usage, man, man
@subsection Options

The command line format for using the @file{man} macros with
@code{groff} is:

@c XXX document @TMAC_AN_PREFIX@

@example
groff -m man [ -rC1 ] [ -rD1 ] [ -rP@var{nnn} ] [ -rS@var{xx} ]
      [ -rX@var{nnn} ] [ @var{files}@dots{} ] 
@end example

It is possible to use @samp{-man} instead of @w{@samp{-m man}}.

@table @code
@item -rC1
If more than one manual page is given on the command line, number the
pages continuously, rather than starting each at@w{ }1.

@item -rD1
Double-sided printing.  Footers for even and odd pages are formatted
differently.

@item -rP@var{nnn}
Enumeration of pages will start with @var{nnn} rather than with@w{ }1.

@item -rS@var{xx}
Use @var{xx} (which can be 10, 11, or@w{ }12@dmn{pt}) as the base
document font size instead of the default value of@w{ }10@dmn{pt}.

@item -rX@var{nnn}
After page @var{nnn}, number pages as @var{nnn}a, @var{nnn}b,
@var{nnn}c, etc.  For example, the option @option{-rX2} will produce the
following page numbers: 1, 2, 2a, 2b, 2c, etc.
@end table

@c ---------------------------------------------------------------------

@node Man usage, Man font macros, Man options, man
@subsection Usage
@cindex @code{man} macros
@cindex macros for manual pages

@pindex man.local
This section describes the available macros for manual pages.  For
further customization, put additional macros and requests into the file
@file{man.local} which will be loaded immediately after @file{tmac.an}.

@maindex TH
@Defmac{TH, title section [@var{extra1}] [@var{extra2}] [@var{extra3}]}
Sets the title of the man page to @var{title} and the section to
@var{section}, which must have a value between 1 and@w{ }8.  The value
of @var{section} may also have a string appended, e.g.@: @samp{.pm}, to
indicate a specific subsection of the man pages.

Both @var{title} and @var{section} are positioned at the left and right
in the header line (with @var{section} in parentheses immediately
appended to @var{title}.  @var{extra1} will be positioned in the middle
of the footer line.  @var{extra2} will be positioned at the left in the
footer line (resp.@: at the left on even pages and at the right on odd
pages if double-sided printing is active).  @var{extra3} is centered in
the header line.

For @acronym{HTML} output, headers and footers are completely suppressed.

Additionally, this macro starts a new page; the new line number is@w{ }1
again (except if the @option{-rC1} option is given on the command line)
-- this feature is intended only for formatting multiple man pages; a
single man page should contain exactly one @code{TH} macro at the
beginning of the file.
@end_Defmac

@maindex SH
@Defmac{SH, [@var{heading}]}
Sets up an unnumbered section heading sticking out to the left.  Prints
out all the text following @code{SH} up to the end of the line (resp.@:
the text in the next line if there is no argument to @code{SH}) in bold
face, one size larger than the base document size.  Additionally, the
left margin for the following text is reset to its default value.
@end_Defmac

@maindex SS
@Defmac{SS, [@var{heading}]}
Sets up an unnumbered section heading.  Prints out all the text
following @code{SS} up to the end of the line (resp.@: the text in the
next line if there is no argument to @code{SS}) in bold face, at the
same size as the base document size.  Additionally, the left margin for
the following text is reset to its default value.
@end_Defmac

@maindex TP
@Defmac{TP, [@var{nnn}]}
Sets up an indented paragraph with label.  The indentation is set to
@var{nnn} if that argument is supplied (the default unit is @samp{n} if
omitted), otherwise it is set to the default indentation value.

The first line of text following this macro is interpreted as a string
to be printed flush-left, as it is appropriate for a label.  It is not
interpreted as part of a paragraph, so there is no attempt to fill the
first line with text from the following input lines.  Nevertheless, if
the label is not as wide as the indentation, then the paragraph starts
at the same line (but indented), continuing on the following lines.  If
the label is wider than the indentation, then the descriptive part of
the paragraph begins on the line following the label, entirely indented.
Note that neither font shape nor font size of the label is set to a
default value; on the other hand, the rest of the text will have default
font settings.
@end_Defmac

@maindex LP
@maindex PP
@maindex P
@Defmac{LP}
@Defmacx{PP}
@Defmacx{P}
These macros are mutual aliases.  Any of them causes a line break at the
current position, followed by a vertical space downwards by the amount
specified by the @code{PD} macro.  The font size and shape are reset to
the default value (10@dmn{pt} resp.@: Roman).  Finally, the current left
margin is restored.
@end_Defmac

@maindex IP
@Defmac{IP, [@var{designator}] [@var{nnn}]}
Sets up an indented paragraph, using @var{designator} as a tag to mark
its beginning.  The indentation is set to @var{nnn} if that argument is
supplied (default unit is @samp{n}), otherwise the default indentation
value is used.  Font size and face of the paragraph (but not the
designator) are reset to their default values.  To start an indented
paragraph with a particular indentation but without a designator, use
@samp{""} (two double quotes) as the first argument of @code{IP}.

For example, to start a paragraph with bullets as the designator and
4@dmn{en} indentation, write

@example
.IP \(bu 4
@end example
@end_Defmac

@maindex HP
@cindex hanging indentation, in manual pages
@Defmac{HP, [@var{nnn}]}
Sets up a paragraph with hanging left indentation.  The indentation is
set to @var{nnn} if that argument is supplied (default unit is
@samp{n}), otherwise the default indentation value is used.  Font size
and face are reset to their default values.
@end_Defmac

@maindex RS
@cindex left margin, how to move, in manual pages
@Defmac{RS, [@var{nnn}]}
This macro moves the left margin to the right by the value @var{nnn} if
specified (default unit is @samp{n}); otherwise the default indentation
value is used.  Calls to the @code{RS} macro can be nested.
@end_Defmac

@maindex RE
@Defmac{RE, [@var{nnn}]}
This macro moves the left margin back to level @var{nnn}; if no argument
is given, it moves one level back.  The first level (i.e., no call to
@code{RS} yet) has number@w{ }1, and each call to @code{RS} increases
the level by@w{ }1.
@end_Defmac

@maindex SH
@maindex SS
@maindex TP
@maindex LP
@maindex PP
@maindex P
@maindex IP
@maindex HP
To summarize, the following macros cause a line break with the insertion
of vertical space (which amount can be changed with the @code{PD}
macro): @code{SH}, @code{SS}, @code{TP}, @code{LP} (@code{PP},
@code{P}), @code{IP}, and @code{HP}.

@maindex RS
@maindex RE
The macros @code{RS} and @code{RE} also cause a break but do not insert
vertical space.

@c ---------------------------------------------------------------------

@node Man font macros, Miscellaneous man stuff, Man usage, man
@subsection Macros to set fonts
@cindex fonts in manual pages
@cindex @code{man}, how to set fonts

The standard font is Roman; the default text size is 10@w{ }point.

@maindex SM
@Defmac{SM, [@var{text}]}
Causes the text on the same line or the text on the next line to appear
in a font that is one point size smaller than the default font.
@end_Defmac

@maindex SB
@cindex boldface, in manual pages
@Defmac{SB, [@var{text}]}
Causes the text on the same line or the text on the next line to appear
in boldface font, one point size smaller than the default font.
@end_Defmac

@maindex BI
@Defmac{BI, text}
Causes text on the same line to appear alternately in bold face and
italic.  The text must be on the same line as the macro call.  Thus,

@example
.BI this "word and" that
@end example

@noindent
would cause ``this'' and ``that'' to appear in bold face, while ``word
and'' appears in italics.
@end_Defmac

@maindex IB
@Defmac{IB, text}
Causes text to appear alternately in italic and bold face.  The text
must be on the same line as the macro call.
@end_Defmac

@maindex RI
@Defmac{RI, text}
Causes text on the same line to appear alternately in roman and italic.
The text must be on the same line as the macro call.
@end_Defmac

@maindex IR
@Defmac{IR, text}
Causes text on the same line to appear alternately in italic and roman.
The text must be on the same line as the macro call.
@end_Defmac

@maindex BR
@Defmac{BR, text}
Causes text on the same line to appear alternately in bold face and
roman.  The text must be on the same line as the macro call.
@end_Defmac

@maindex RB
@Defmac{RB, text}
Causes text on the same line to appear alternately in roman and bold
face.  The text must be on the same line as the macro call.
@end_Defmac

@maindex R
@Defmac{R, [@var{text}]}
Causes @var{text} to appear in roman font.  If no text is present on the
line where the macro is called, then the text of the next line appears
in roman.  This is the default font to which text is returned at the end
of processing of the other macros.
@end_Defmac

@maindex B
@Defmac{B, [@var{text}]}
Causes @var{text} to appear in bold face.  If no text is present on the
line where the macro is called, then the text of the next line appears
in bold face.
@end_Defmac

@maindex I
@cindex italic, in manual pages
@Defmac{I, [@var{text}]}
Causes @var{text} to appear in italic.  If no text is present on the
line where the macro is called, then the text of the next line appears
in italic.
@end_Defmac

@c ---------------------------------------------------------------------

@node Miscellaneous man stuff,  , Man font macros, man
@subsection Miscellaneous

@pindex grohtml
@cindex @file{man}, default indentation
@cindex default indentation, @file{man}
The default indentation is 7.2@dmn{n} for all output devices except for
@code{grohtml} which uses 1.2@dmn{i} instead.

@maindex DT
@maindex TH
@cindex tab stops, in manual pages
@Defmac{DT}
Sets tabs every 0.5@w{ }inches.  Since this macro is always called
during a @code{TH} request, it makes sense to call it only if the tab
positions have been changed.
@end_Defmac

@maindex PD
@cindex empty space before a paragraph, in manual pages
@Defmac{PD, [@var{nnn}]}
Adjusts the empty space before a new paragraph (resp.@: section).  The
optional argument gives the amount of space (default units are
@samp{v}); without parameter, the value is reset to its default value
(1@w{ }line for tty devices, 0.4@dmn{v}@w{ }otherwise).
@end_Defmac

@maindex SH
@maindex SS
@maindex TP
@maindex LP
@maindex PP
@maindex P
@maindex IP
@maindex HP
This affects the macros @code{SH}, @code{SS}, @code{TP}, @code{LP}
(resp.@: @code{PP} and @code{P}), @code{IP}, and @code{HP}.

The following strings are defined:

@maindex \*S
@Defmac{\\*S}
Switch back to the default font size.
@end_Defmac

@maindex \*R
@Defmac{\\*R}
The `registered' sign.
@end_Defmac

@maindex \*(Tm
@Defmac{\\*(Tm}
The `trademark' sign.
@end_Defmac

@maindex \*(lq
@maindex \*(rq
@glindex lq
@glindex rq
@Defmac{\\*(lq}
@Defmacx{\\*(rq}
Left and right quote.
This is equal to @code{\(lq} and @code{\(rq}, respectively.
@end_Defmac

@cindex preprocessor, calling convention
@cindex calling convention of preprocessors
If a preprocessor like @code{gtbl} or @code{geqn} is needed, it has
become common usage to make the first line of the man page look like
this:

@example
.\" @var{word}
@end example

@pindex geqn@r{, invocation in manual pages}
@pindex grefer@r{, invocation in manual pages}
@pindex gtbl@r{, invocation in manual pages}
@pindex man@r{, invocation of preprocessors}
Note the single space character after the double quote.  @var{word}
consists of letters for the needed preprocessors: @samp{e} for
@code{geqn}, @samp{r} for @code{grefer}, @samp{t} for @code{gtbl}.
Modern implementations of the @code{man} program read this first line
and automatically call the right preprocessor(s).


@c =====================================================================

@node mdoc, ms, man, Macro Packages
@section @file{mdoc}
@cindex @file{mdoc}

@c XXX documentation


@c =====================================================================

@node ms, me, mdoc, Macro Packages
@section @file{ms}
@cindex @file{ms}

@c XXX documentation


@c =====================================================================

@node me, mm, ms, Macro Packages
@section @file{me}
@cindex @file{me}

@c XXX documentation


@c =====================================================================

@node mm,  , me, Macro Packages
@section @file{mm}
@cindex @file{mm}

@c XXX documentation



@c =====================================================================
@c =====================================================================

@node Programming Tutorial, Preprocessors, Macro Packages, Top
@chapter Programming Tutorial
@cindex programming tutorial
@cindex tutorial for programming

This chapter covers @strong{all} of the facilities of @code{gtroff}.
Users of macro packages may skip it if not interested in details.


@menu
* Text::                        
* Input Conventions::           
* Measurements::                
* Expressions::                 
* Identifiers::                 
* Embedded Commands::           
* Registers::                   
* Manipulating Filling and Adjusting::  
* Manipulating Hyphenation::    
* Manipulating Spacing::        
* Tabs and Fields::             
* Character Translations::      
* Troff and Nroff Mode::        
* Line Layout::                 
* Page Layout::                 
* Page Control::                
* Fonts::                       
* Sizes::                       
* Strings::                     
* Conditionals and Loops::      
* Writing Macros::              
* Page Motions::                
* Drawing Requests::            
* Traps::                       
* Diversions::                  
* Environments::                
* I/O::                         
* Postprocessor Access::        
* Miscellaneous::               
* Debugging::                   
* Implementation Differences::  
* Summary::                     
@end menu


@c =====================================================================

@node Text, Input Conventions, Programming Tutorial, Programming Tutorial
@section Text
@cindex text, @code{gtroff} processing

@code{gtroff} input files contain text with control commands
interspersed throughout.  But, even without control codes, @code{gtroff}
will still do several things with the input text: filling and adjusting,
adding additional space after sentences, hyphenating and inserting
implicit line breaks.

@menu
* Filling and Adjusting::       
* Hyphenation::                 
* Sentences::                   
* Tab Stops::                   
* Implicit Line Breaks::        
@end menu

@c ---------------------------------------------------------------------

@node Filling and Adjusting, Hyphenation, Text, Text
@subsection Filling and Adjusting
@cindex filling
@cindex adjusting

When @code{gtroff} reads in text it collects words from input and fits
as many of them together on one output line as it can.  This is known as
@dfn{filling}.

@cindex leading spaces
@cindex spaces, leading and trailing
@cindex extra spaces
@cindex trailing spaces
Once @code{gtroff} has a @dfn{filled} line it will try to @dfn{adjust}
it.  This means it will widen the spacing between words until the text
reaches the right margin (in the default adjustment mode).  Extra spaces
between words are preserved, but spaces at the end of lines are ignored.
Spaces at the front of a line will cause a @dfn{break} (breaks will be
explained in @ref{Implicit Line Breaks})

@xref{Manipulating Filling and Adjusting}.

@c ---------------------------------------------------------------------

@node Hyphenation, Sentences, Filling and Adjusting, Text
@subsection Hyphenation
@cindex hyphenation

Since the odds are not great for finding a set of words, for every
output line, which will fit nicely on a line without inserting excessive
amounts of space between words, @code{gtroff} will hyphenate words so
that lines can be justified without there being too much space between
words.  It uses an internal hyphenation algorithm (a simplified version
of the algorithm used within @TeX{}) to indicate which words can be
hyphenated and how to do so.  When a word is hyphenated the first part
of the word will be added to the current filled line being output (with
an attached hyphen), and the other portion will be added to the next
line to be filled.

@xref{Manipulating Hyphenation}.

@c ---------------------------------------------------------------------

@node Sentences, Tab Stops, Hyphenation, Text
@subsection Sentences
@cindex sentences

Although it is often debated, some typesetting rules say there should be
different amounts of space after various punctuation marks.  For
example, the @cite{Chicago typsetting manual} says that a period at the
end of a sentence should have twice as much space following it as would
a comma or a period as part of an abbreviation.

@c XXX exact citation of Chicago manual

@cindex sentence space
@cindex space between sentences
@cindex french-spacing
@code{gtroff} does this by flagging certain characters (normally
@samp{!}, @samp{?} and @samp{.}) as @dfn{end of sentence} characters.
When @code{gtroff} encounters one of these characters at the end of a
line it will append two @dfn{sentence spaces} in the formatted output.
(This justifies one of the conventions mentioned in @ref{Input
Conventions}.)

@cindex transparent characters
@cindex character, transparent
@glindex dg
@glindex rq
@cindex "
@cindex '
@cindex )
@cindex ]
@cindex *
In addition, the following characters resp.@: glyphs are treated
transparently while handling end of sentence characters: @samp{"},
@samp{'}, @samp{)}, @samp{]}, @samp{*}, @code{dg}, and @code{rq}.

See the @code{cflags} request in @ref{Using Symbols}, for more details.

@findex \&
To prevent the insertion of extra space after an end of sentence
character (at the end of a line), append @code{\&}.

@c ---------------------------------------------------------------------

@node Tab Stops, Implicit Line Breaks, Sentences, Text
@subsection Tab Stops
@cindex tab stops
@cindex stops, tabulator
@cindex tab character
@cindex character, tabulator

@cindex @acronym{EBCDIC} encoding
@code{gtroff} translates @dfn{tabulator characters}, also called
@dfn{tabs} (normally code point @acronym{ASCII} @code{0x09} resp.@:
@acronym{EBCDIC} @code{0x05}), in the input into movements to the next
tabulator stop.  These tab stops are initially located every half inch
across the page.  Using this, simple tables can easily be made.
However, it can often be deceptive as the appearance (and width) of the
text on a terminal and the results from @code{gtroff} can vary greatly.

Also, a possible sticking point is that lines beginning with tab
characters will still be filled, again producing unexpected results.
For example, the following input

@multitable {12345678} {12345678} {12345678} {12345678}
@item
@tab 1 @tab 2 @tab 3
@item
@tab   @tab 4 @tab 5
@end multitable

@noindent
will produce

@multitable {12345678} {12345678} {12345678} {12345678} {12345678} {12345678} {12345678}
@item
@tab 1 @tab 2 @tab 3 @tab   @tab 4 @tab 5
@end multitable

@xref{Tabs and Fields}.

@c ---------------------------------------------------------------------

@node Implicit Line Breaks,  , Tab Stops, Text
@subsection Implicit Line Breaks
@cindex implicit line breaks
@cindex implicit breaks of lines
@cindex line, implicit breaks
@cindex break, implicit
@cindex line break

An important concept in @code{gtroff} is the @dfn{break}.  When a break
occurs, @code{gtroff} will output the partially filled line
(unjustified), and resume collecting and filling text on the next output
line.

@cindex blank line
@cindex empty line
@cindex line, blank
There are several ways to cause a break in @code{gtroff}.  A blank line
will not only cause a break, but it will also cause a one line vertical
space (effectively a blank line) to be output.

@cindex fill mode
@cindex mode, fill
A line which begins with a space will cause a break and the space will
be output at the beginning of the next line.  Note that this space isn't
adjusted, even in fill mode.

The end of file will also cause a break -- otherwise the last line of
the document may vanish!

Certain requests also cause breaks, implicitly or explicitly.  This will
be discussed in @ref{Manipulating Filling and Adjusting}.


@c =====================================================================

@node Input Conventions, Measurements, Text, Programming Tutorial
@section Input Conventions
@cindex input conventions
@cindex conventions for input

Since @code{gtroff} does filling automatically, it is traditional in
@code{groff} not to try and type things in as nicely formatted
paragraphs.  These are some conventions commonly used when typing
@code{gtroff} text:

@itemize @bullet
@item
Break lines after punctuation, particularly at the end of a sentence,
and in other logical places.  Keep separate phrases on lines by
themselves, as entire phrases are often added or deleted when editing.

@item
Try to keep lines less than 40-60@w{ }characters, to allow space for
inserting more text.

@item
Do not try to do any formatting in a @acronym{WYSIWYG} manner (i.e.,
don't try and use spaces to get proper indentation).
@end itemize


@c =====================================================================

@node Measurements, Expressions, Input Conventions, Programming Tutorial
@section Measurements
@cindex measurements

@cindex units of measurement
@cindex basic units
@cindex machine units
@cindex measurement units
@cindex @code{u} unit
@cindex unit, @code{u}
@code{gtroff} (like any other programs) requires numeric parameters to
specify various measurements.  Most numeric parameters@footnote{those
that specify vertical or horizontal motion or a type size} may have a
@dfn{measurement unit} attached.  These units are specified as a single
character which immediately follows the number or expression.  Each of
these units are understood, by @code{gtroff}, to be a multiple of its
@dfn{basic unit}.  So, whenever a different measurement unit is
specified @code{gtroff} converts this into its @dfn{basic units}.  This
basic unit, represented by a @samp{u}, is a device dependent measurement
which is quite small, ranging from 1/75th to 1/72000th of an inch.  The
values may be given as fractional numbers; however, fractional basic
units are always rounded to integers.

Some of the measurement units are completely independent of any of the
current settings (e.g.@: type size) of @code{gtroff}.

@table @code
@item i
@cindex inch
@cindex @code{i} unit
@cindex unit, @code{i}
Inches.  An antiquated measurement unit still in use in certain
backwards countries.  One inch is equal to@w{ }2.54@dmn{cm}.

@item c
@cindex centimeter
@cindex @code{c} unit
@cindex unit, @code{c}
Centimeters.  One centimeter is equal to@w{ }0.3937@dmn{in}.

@item p
@cindex points
@cindex @code{p} unit
@cindex unit, @code{p}
Points.  This is a typesetter's measurement used for measure type size.
It is 72@w{ }points to an inch.

@item P
@cindex pica
@cindex @code{P} unit
@cindex unit, @code{P}
Pica.  Another typesetting measurement.  6@w{ }Picas to an inch (and
12@w{ }points to a pica).

@item s
@itemx z
@cindex @code{s} unit
@cindex unit, @code{s}
@cindex @code{z} unit
@cindex unit, @code{z}
@xref{Fractional Type Sizes}, for a discussion of these units.
@end table

The other measurements understood by @code{gtroff} are dependent on
settings currently in effect in @code{gtroff}.  These are very useful
for specifying measurements which should look proper with any size of
text.

@table @code
@item m
@cindex em unit
@cindex @code{m} unit
@cindex unit, @code{m}
Ems.  This unit is equal to the current font size in points.  So called
because it is @emph{approximately} the width of the letter@w{ }@samp{m}
in the current font.

@item n
@cindex en unit
@cindex @code{n} unit
@cindex unit, @code{n}
Ens.  This is half of an em.

@item v
@cindex vertical space
@cindex space, vertical
@cindex @code{v} unit
@cindex unit, @code{v}
Vertical space.  This is equivalent to the current line spacing.
@xref{Sizes}, for more information about this.

@item M
@cindex @code{M} unit
@cindex unit, @code{M}
100ths of an em.
@end table

@menu
* Default Units::               
@end menu

@c ---------------------------------------------------------------------

@node Default Units,  , Measurements, Measurements
@subsection Default Units
@cindex default units
@cindex units, default

Many requests take a default unit.  While this can be helpful at times,
it can cause strange errors in some expressions.  For example, the line
length request expects em units.  Here are several attempts to get a
line length of 3.5@w{ }inches and their results:

@example
3.5i      @result{}   3.5i
7/2       @result{}   0i
7/2i      @result{}   0i
7i/2      @result{}   0.1i
7i/2u     @result{}   3.5i
@end example

@noindent
Everything will be converted to basic units first.  In the above example
it is assumed that 1@dmn{i} equals@w{ }240@dmn{u}, and 1@dmn{m}
equals@w{ }10@dmn{p} (thus 1@dmn{m} equals@w{ }33@dmn{u}).  The value
7i/2 will be first handled as 7i/2m, then converted to 1680u/66u which
is 25@dmn{u}, and this is approximately 0.1@dmn{i}.

@cindex measurements, specifying safely
As a conclusion, the safest way to specify measurements is to always
attach a scaling indicator.  If you want to multiply or divide by a
certain scalar value, use @samp{u} as the unit for that value.


@c =====================================================================

@node Expressions, Identifiers, Measurements, Programming Tutorial
@section Expressions
@cindex expressions

@code{gtroff} has most of operators common to other languages:

@c XXX more details; examples

@itemize @bullet
@item
@cindex arithmetic operators
@cindex operators, arithmetic
@opindex +
@opindex -
@opindex /
@opindex *
@opindex %
Arithmetic: @samp{+} (addition), @samp{-} (subtraction), @samp{/}
(division), @samp{*} (multiplication), @samp{%} (modulo).

@code{gtroff} only provides integer arithmetic.  The internal type used
for computing results is @samp{int}, which is usually a 32@dmn{bit}
signed integer.

@item
@cindex comparison operators
@cindex operators, comparison
@opindex <
@opindex >
@opindex >=
@opindex <=
@opindex =
@opindex ==
Comparison: @samp{<} (less than), @samp{>} (greater than), @samp{<=}
(less than or equal), @samp{>=} (greater than or equal), @samp{=}
(equal), @samp{==} (the same as @samp{=}).

@item
@cindex logical operators
@cindex operators, logical
@opindex &
@opindex :
Logical: @samp{&} (logical and), @samp{:} (logical or).

@item
@cindex unary operators
@cindex operators, unary
@opindex -
@opindex +
@opindex !
@findex if@r{, and the @samp{!} operator}
@findex while@r{, and the @samp{!} operator}
Unary operators: @samp{-} (negating, i.e.@: changing the sign), @samp{+}
(just for completeness; does nothing in expressions), @samp{!} (logical
not; this works only within @code{if} and @code{while} requests).  See
below for the use of unary operators in motion requests.

@item
@cindex extremum operators
@cindex operators, extremum
@opindex >?
@opindex <?
Extrema: @samp{>?} (maximum), @samp{<?} (minimum).  For example,
@samp{5>?3} yields@w{ }@samp{5}.

@c XXX add examples

@item
@cindex scaling operator
@cindex operator, scaling
Scaling: @code{(@var{c};@var{e})}.  Evaluate @var{e} using @var{c} as
the default scaling indicator.  If @var{c} is missing, ignore scaling
indicators in the evaluation of @var{e}.
@end itemize

@cindex parentheses
@cindex order of evaluation in expressions
@cindex expression, order of evaluation
@opindex (
@opindex )
Parentheses may be used as in any other language.  However, in
@code{gtroff} they are necessary to ensure order of evaluation.
@code{gtroff} has no operator precedence; expressions are evaluated left
to right.  This means that @samp{3+5*4} is evaluated as if it were
parenthesized like @samp{(3+5)*4}, not as @samp{3+(5*4)}, as might be
expected.

@opindex +@r{, and page motion}
@opindex -@r{, and page motion}
@opindex |@r{, and page motion}
@cindex motion operators
@cindex operators, motion
For many requests which cause a motion on the page, the unary operators
work differently.  The @samp{+} and @samp{-} operators then indicate a
motion relative to the current position (down or up, respectively), and
the @samp{|} operator indicates an absolute position on the page or
input line.
@c XXX xref
@samp{+} and @samp{-} are also treated differently by the following
requests and escapes: @code{bp}, @code{in}, @code{ll}, @code{lt},
@code{nm}, @code{nr}, @code{pl}, @code{pn}, @code{po}, @code{ps},
@code{rt}, @code{ti}, @code{\R}, and @code{\s}.  Here the plus and minus
signs indicate increments resp.@: decrements.

@c XXX add more xref
@xref{Setting Registers}.

@cindex space characters in expressions
@cindex expressions and space characters
Due to the way arguments are parsed, spaces are not allowed in
expressions, unless the entire expression is surrounded by parentheses.

@xref{Request Arguments}, and @ref{Conditionals and Loops}.


@c =====================================================================

@node Identifiers, Embedded Commands, Expressions, Programming Tutorial
@section Identifiers
@cindex identifiers

Like any other language, @code{gtroff} has rules for properly formed
@dfn{identifiers}.  In @code{gtroff}, an identifier can be made up of
almost any printable character, with the exception of the following
characters:

@itemize @bullet
@item
@cindex whitespace characters
@cindex newline character
@cindex character, whitespace
Whitespace characters (space, tabs, and newlines).

@item
@cindex character, backspace
@cindex backspace character
@cindex @acronym{EBCDIC} encoding of backspace
Backspace (@acronym{ASCII}@w{ }@code{0x08} resp.@: @acronym{EBCDIC}@w{
}@code{0x16}) and character code @code{0x01}.

@item
@cindex invalid input characters
@cindex input characters, invalid
@cindex characters, invalid input
@cindex unicode
The following input characters are invalid and will be ignored if
@code{groff} runs on a machine based on @acronym{ASCII}, causing a
warning message of type @samp{input} (see @ref{Debugging}, for more
details): @code{0x00}, @code{0x0B}, @code{0x0D}-@code{0x1F},
@code{0x80}-@code{0x9F}.

And here are the invalid input characters if @code{groff} runs on an
@acronym{EBCDIC} host: @code{0x00}, @code{0x08}, @code{0x09},
@code{0x0B}, @code{0x0D}-@code{0x14}, @code{0x17}-@code{0x1F},
@code{0x30}-@code{0x3F}.

Currently, some of these reserved codepoints are used internally, thus
making it non-trivial to extend @code{gtroff} to cover Unicode or other
character sets resp.@: encodings which use characters of these ranges.

Note that invalid characters will be removed before parsing; an
identifier @code{foo}, followed by an invalid character, followed by
@code{bar} will be treated as @code{foobar}.
@end itemize

For example, any of the following is valid.

@example
br
PP
(l
end-list
@@_
@end example

@findex ]
Note that identifiers longer than two characters with a closing bracket
(@samp{]}) in its name can't be accessed with escape sequences which
expect an identifier as a parameter.  For example, @samp{\[foo]]} will
access the glyph @samp{foo}, followed by @samp{]}, whereas
@samp{\C'foo]'} really asks for glyph @samp{foo]}.

@c XXX xref

@Deffn{Escape, \\A, ident}
Whether an identifier @var{ident} is valid in @code{gtroff} can be
tested with the @code{\A} escape.  It expands to the character@w{ }1
or@w{ }0 according to whether its argument (usually delimited by quotes)
is or is not acceptable as the name of a string, macro, diversion,
number register, environment, or font.  It will return@w{ }0 if no
argument is given.  This is useful for looking up user input in some
sort of associative table.

@example
\A'end-list'
    @result{} 1
@end example
@end_Deffn

@xref{Escapes}, for details on parameter delimiting characters.

@c XXX add xrefs above

Identifiers in @code{gtroff} can be any length, but, in some contexts,
@code{gtroff} needs to be told where identifiers end and text begins
(and in different ways depending on their length):

@findex (
@findex [
@findex ]
@itemize @bullet
@item
Single character.

@item
Two characters.  Must be prefixed with @samp{(} in some situations.

@item
Arbitrary length (@code{gtroff} only).  Must be bracketed with @samp{[}
and@w{ }@samp{]} in some situations.  Any length identifier can be put
in brackets.
@end itemize

@cindex undefined identifiers
@cindex indentifiers, undefined
Unlike many other programming languages, undefined identifiers are
silently ignored or expanded to nothing.

@c XXX add info about -ww command line option.

@xref{Interpolating Registers}, and @ref{Strings}.


@c =====================================================================

@node Embedded Commands, Registers, Identifiers, Programming Tutorial
@section Embedded Commands
@cindex embedded commands
@cindex commands, embedded

Most documents need more functionality beyond filling, adjusting and
implicit line breaking.  In order to gain further functionality,
@code{gtroff} allows commands to be embedded into the text, in two ways.

The first is a @dfn{request} which takes up an entire line, and does
some large scale operation (e.g.@: break lines, start new pages).

The other is an @dfn{escape} which can be embedded anywhere in the text,
or even as an argument to a request.
@c XXX (Not always?)
Escapes generally do more minor operations like sub- and superscripts,
print a symbol, etc.

@menu
* Requests::                    
* Macros::                      
* Escapes::                     
@end menu

@c ---------------------------------------------------------------------

@node Requests, Macros, Embedded Commands, Embedded Commands
@subsection Requests
@cindex requests

@cindex control character
@cindex character, control
@cindex no-break control character
@cindex character, no-break control
@cindex control character, no-break
@findex '
@findex .
A request line begins with a control character, which is either a single
quote (@samp{'}, the @dfn{no-break control character}) or a period
(@samp{.}, the normal @dfn{control character}).  These can be changed;
see @ref{Character Translations}, for details.  After this there may be
optional tabs or spaces followed by an identifier which is the name of
the request.  This may be followed by any number of space-separated
arguments.

@cindex zero width space character
@cindex character, zero width space
@cindex space character, zero width
@findex \&@r{, escaping control characters}
To begin a line with a control character without it being interpreted,
precede it with @code{\&}.  This represents a zero width space, which
means it will not affect the output.

In most cases the period is used as a control character.  Several
requests will cause a break implicitly; using the single quote control
character will prevent this.

@menu
* Request Arguments::           
@end menu

@node Request Arguments,  , Requests, Requests
@subsubsection Request Arguments
@cindex request arguments
@cindex arguments to requests

Arguments to requests (and macros) are processed much like the shell:
The line is split into arguments according to spaces.  An argument which
is intended to contain spaces can either be enclosed in quotes (single
or double), or have the spaces @dfn{escaped} with backslashes.

Here are a few examples:

@example
.uh The Mouse Problem
.uh "The Mouse Problem"
.uh The\ Mouse\ Problem
@end example

@findex \~
@findex \@key{SP}
@noindent
The first line is the @code{uh} macro being called with 3 arguments,
@samp{The}, @samp{Mouse}, and @samp{Problem}.  The latter two have the
same effect or calling the @code{uh} macro with one argument, @samp{The
Mouse Problem}.@footnote{The last solution, i.e., using escaped spaces,
is ``classical'' in the sense that it can be found in most @code{troff}
documents.  Nevertheless, it is not optimal in all situations, since
@w{@samp{\ }} inserts a fixed-width, non-breaking space character which
can't stretch.  @code{gtroff} provides a different command @code{\~} to
insert a stretchable, non-breaking space.}

@findex ds
Note, however, that the @code{ds} request works differently.
@xref{Strings}, for more details.

@c ---------------------------------------------------------------------

@node Macros, Escapes, Requests, Embedded Commands
@subsection Macros
@cindex macros

@code{gtroff} has a @dfn{macro} facility for defining a series of lines
which can be invoked by name.  They are called in the same manner as
requests -- arguments also may be passed in the same manner.

@xref{Writing Macros}, and @ref{Request Arguments}.

@c ---------------------------------------------------------------------

@node Escapes,  , Macros, Embedded Commands
@subsection Escapes
@cindex escapes

Escapes may occur anywhere in the input to @code{gtroff}.  They usually
begin with a backslash and are followed by a single character which
indicates the function to be performed.  The escape character can be
changed; see @ref{Character Translations}.

@findex (
@findex [
@findex ]
Escape sequences which require an identifier as a parameter accept three
possible syntax forms.

@itemize @bullet
@item
The next single character is the identifier.

@item
If this single character is an opening parenthesis, take the following
two characters as the identifier.  Note that there is no closing
parenthesis after the identifier.

@item
If this single character is an opening bracket, take all characters
until a closing bracket as the identifier.
@end itemize

@noindent
Examples:

@example
\fB
\n(XX
\*[TeX]
@end example

@findex '
@cindex argument delimiting characters
@cindex characters, argument delimiting
@cindex delimiting characters for arguments
Other escapes may require several arguments and/or some special format.
In such cases the argument is traditionally enclosed in single quotes
(and quotes are always used in this manual for the definitions of escape
sequences).  The enclosed text is then processed according to what that
escape expects.  Example:

@example
\l'1.5i\(bu'
@end example

@findex \o
@findex \b
@findex \X
Note that the quote character can be replaced with any other character
which does not occur in the argument (even a newline or a space
character) in the following escapes: @code{\o}, @code{\b}, and
@code{\X}.  This makes e.g.

@example
A caf
\o
e\'


in Paris
  @result{} A caf@'e in Paris
@end example

@noindent
possible, but it is better not to use this feature to avoid confusion.

@findex \%
@findex \@key{SP}
@findex \|
@findex \^
@findex \@{
@findex \@}
@findex \'
@findex \`
@findex \-
@findex \_
@findex \!
@findex \?
@findex \@@
@findex \)
@findex \/
@findex \,
@findex \&
@findex \~
@findex \0
@findex \a
@findex \c
@findex \d
@findex \e
@findex \E
@findex \p
@findex \r
@findex \t
@findex \u
The following escapes sequences (which are handled similarly to
characters since they don't take a parameter) are also allowed as
delimiters: @code{\%}, @w{@samp{\ }}, @code{\|}, @code{\^}, @code{\@{},
@code{\@}}, @code{\'}, @code{\`}, @code{\-}, @code{\_}, @code{\!},
@code{\?}, @code{\@@}, @code{\)}, @code{\/}, @code{\,}, @code{\&},
@code{\~}, @code{\0}, @code{\a}, @code{\c}, @code{\d}, @code{\e},
@code{\E}, @code{\p}, @code{\r}, @code{\t}, and @code{\u}.  Again, don't
use these if possible.

@findex \A
@findex \Z
@findex \C
@findex \w
No newline characters as delimiters are allowed in the following
escapes: @code{\A}, @code{\Z}, @code{\C}, and @code{\w}.

@findex \D
@findex \h
@findex \H
@findex \l
@findex \L
@findex \N
@findex \R
@findex \s
@findex \S
@findex \v
@findex \x
Finally, the escapes @code{\D}, @code{\h}, @code{\H}, @code{\l},
@code{\L}, @code{\N}, @code{\R}, @code{\s}, @code{\S}, @code{\v}, and
@code{\x} can't use the following characters as delimiters:

@itemize @bullet
@item
@cindex numbers
@cindex digits
The digits @code{0}-@code{9}.

@item
@cindex operators
@opindex +
@opindex -
@opindex /
@opindex *
@opindex %
@opindex <
@opindex >
@opindex =
@opindex &
@opindex :
@opindex (
@opindex )
@opindex .
The (single-character) operators @samp{+-/*%<>=&:().}.

@item
@cindex space character
@cindex character, space
@cindex tab character
@cindex character, tab
@cindex newline character
@cindex character, newline
The space, tab, and newline characters.

@item
@findex \%
@findex \@{
@findex \@}
@findex \'
@findex \`
@findex \-
@findex \_
@findex \!
@findex \@@
@findex \/
@findex \c
@findex \e
@findex \p
All escape sequences except @code{\%}, @code{\@{}, @code{\@}},
@code{\'}, @code{\`}, @code{\-}, @code{\_}, @code{\!}, @code{\@@},
@code{\/}, @code{\c}, @code{\e}, and @code{\p}.
@end itemize

@findex \\
@findex \e
@findex \E
To have a backslash (resp.@: the current escape character) appear in the
output several escapes are defined: @code{\\}, @code{\e} or @code{\E}.
These are very similar, and only differ with respect to being used in
macros or diversions.  @xref{Copy-in Mode}, and @ref{Diversions}, for
more information.

@c XXX explanation of \E

@xref{Identifiers}, and @ref{Character Translations}.

@menu
* Comments::                    
@end menu

@node Comments,  , Escapes, Escapes
@subsubsection Comments
@cindex comments

Probably one of the most@footnote{Unfortunately, this is a lie.  But
hopefully future @code{gtroff} hackers will believe it @code{:-)}}
common forms of escapes is the comment.

@Deffn{Escape, \\"}
Start a comment.  Everything to the end of the input line is ignored.

This may sound simple, but it can be tricky to keep the comments from
interfering with the appearance of the final output.

@findex ds
If the escape is to the right of some text or a request, that portion of
the line will be ignored, but the space leading up to it will be noticed
by @code{gtroff}.  This only affects the @code{.ds} request.
@c XXX (any others?)

@cindex tabs before comments
@cindex comments, lining up with tabs
One possibly irritating idiosyncracy is that tabs must not be used to
line up comments.  Tabs are not treated as white space between the
request and macro arguments.

@cindex undefined request
@cindex request, undefined
A comment on a line by itself will be treated as a blank line, because
after eliminating the comment, that is all that remains:

@example
Test
\" comment
Test
@end example

@noindent
will produce

@example
Test

Test
@end example

As a consequence, it is common to start the line with @code{.\"} which
will cause the line to be treated as an undefined request and thus
ignored completely.

@findex '
Another commenting scheme seen sometimes is three consecutive single
quotes (@code{'''}) at the beginning of a line.  This works, but
@code{gtroff} will give a warning about an undefined macro (namely
@code{''}), which is harmless, but irritating.
@end_Deffn

@Deffn{Escape, \\#}
To avoid all this, @code{gtroff} has a new comment mechanism using
the @code{\#} escape.  This escape works the same as @code{\"} except
that the newline is also ignored:

@example
Test
\# comment
Test
@end example

@noindent
will produce

@example
Test Test
@end example

@noindent
as expected.
@end_Deffn

@findex ig
For commenting away large blocks of text, the @code{ig} request may be
useful.

@c XXX definition of .ig

@xref{Strings}.


@c =====================================================================

@node Registers, Manipulating Filling and Adjusting, Embedded Commands, Programming Tutorial
@section Registers
@cindex registers

Numeric variables in @code{gtroff} are called @dfn{registers}.  There
are a number of built-in registers, supplying anything from the date to
details of formatting parameters.

@xref{Identifiers}, for details on register identifiers.

@menu
* Setting Registers::           
* Interpolating Registers::     
* Auto-increment::              
* Assigning Formats::           
* Built-in Registers::          
@end menu

@c ---------------------------------------------------------------------

@node Setting Registers, Interpolating Registers, Registers, Registers
@subsection Setting Registers
@cindex setting registers
@cindex registers, setting

Registers are defined resp.@: set via the @code{nr} request or the
@code{\R} escape.

@Deffn{Request, nr, ident value}
@Deffnx{Escape, \\R, ident value}
Set number register @var{ident} to @var{value}.  If @var{ident} doesn't
exist, it will be created.

The argument to @code{\R} has to be enclosed in quotes usually.
@xref{Escapes}, for details on parameter delimiting characters.
@end_Deffn

For example, the following two lines are equivalent:

@example
.nr a 1
\R'a 1'
@end example

Both @code{nr} and @code{\R} have two additional special forms to
increment resp.@: decrement a register.

@Deffn{Request, nr, ident +value}
@Deffnx{Request, nr, ident -value}
@Deffnx{Escape, \\R, ident +value}
@Deffnx{Escape, \\R, ident -value}
Increment (decrement) register @var{ident} by @var{value}.

@example
.nr a 1
.nr a +1
\na
    @result{} 2
@end example

@cindex negating register values
To assign the negated value of a register to another register, some care
must be taken to get the desired result:

@example
.nr a 7
.nr b 3
.nr a -\nb
\na
    @result{} 4
.nr a (-\nb)
\na
    @result{} -3
@end example

@noindent
The surrounding parentheses prevent the interpretation of the minus sign
as a decrementing operator.  An alternative is to start the assignment
with a @samp{0}:

@example
.nr a 7
.nr b -3
.nr a \nb
\na
    @result{} 4
.nr a 0\nb
\na
    @result{} -3
@end example
@end_Deffn

@Deffn{Request, rr, ident}
Remove number register @var{ident}.  If @var{ident} doesn't exist, the
request is ignored.
@end_Deffn

@Deffn{Request, rnn, ident1 ident2}
Rename number register @var{ident1} to @var{ident2}.  If either
@var{ident1} or @var{ident2} doesn't exist, the request is ignored.
@end_Deffn

@Deffn{Request, aln, ident1 ident2}
This request creates an alias @var{ident1} for a number register
@var{ident2}.  The new name and the old name will be exactly equivalent.
If @var{ident1} is undefined, a warning of type @samp{reg} will be
generated, and the request will be ignored.  @xref{Debugging}, for
information about warnings.
@end_Deffn

@c ---------------------------------------------------------------------

@node Interpolating Registers, Auto-increment, Setting Registers, Registers
@subsection Interpolating Registers
@cindex interpolating registers
@cindex registers, interpolating

Numeric registers can be accessed via the @code{\n} escape.

@Deffn{Escape, \\n, ident}
@c XXX is the following correct?
Interpolate number register @var{ident}.  This means that the value of
the register is expanded in-place while @code{gtroff} is parsing the
input line.

@example
.nr a 5
.nr as \na+\na
\n(as
    @result{} 10
@end example
@end_Deffn

@c ---------------------------------------------------------------------

@node Auto-increment, Assigning Formats, Interpolating Registers, Registers
@subsection Auto-increment
@cindex auto-increment
@cindex increment, automatic

Number registers can also be auto-incremented and auto-decremented.  The
increment resp.@: decrement factor can be specified with a third
argument to the @code{nr} request or @code{\R} escape.

@findex \R
@Deffn{Request, nr, ident value incr}
Set number register @var{ident} to @var{value}; the increment for
auto-incrementing is set to @var{incr}.  Note that the @code{\R} escape
doesn't support this notation.
@end_Deffn

To activate auto-incrementing, the escape @code{\n} has a special syntax
form.

@Deffn{Escape, \\n, +ident}
@Deffnx{Escape, \\n, -ident}
Before interpolating, increment resp.@: decrement @var{ident} by the
auto-increment value as specified with the @code{nr} request (or the
@code{\R} escape).  If no auto-increment value has been specified, both
syntax forms are identical to @code{\n}.
@end_Deffn

For example,

@example
.nr a 0 1
.nr xx 0 5
.nr foo 0 -2
\n+a, \n+a, \n+a, \n+a, \n+a
.br
\n-(xx, \n-(xx, \n-(xx, \n-(xx, \n-(xx
.br
\n+[foo], \n+[foo], \n+[foo], \n+[foo], \n+[foo]
@end example

@noindent
produces

@example
1, 2, 3, 4, 5
-5, -10, -15, -20, -25
-2, -4, -6, -8, -10
@end example

@cindex increment value without changing the register
To change the increment value without changing the value of a register,
the following can be used:

@example
.nr a \na 10
@end example

@c ---------------------------------------------------------------------

@node Assigning Formats, Built-in Registers, Auto-increment, Registers
@subsection Assigning Formats
@cindex assigning formats
@cindex formats, assigning

When a register is used in the text of an input file (as opposed to part
of an expression), it is textually replaced (or interpolated) with a
representation of that number.  This output format can be changed to a
variety of formats (numbers, Roman numerals, etc.).  This is done using
the @code{af} request.

@Deffn{Request, af, ident format}
Change the output format of a number register.  The first argument
@var{ident} is the name of the number register to be changed, and the
second argument @var{format} is the output format.  The following output
formats are available:

@table @code
@item 1
Decimal arabic numbers.  This is the default format: 1, 2, 3,@w{
}@enddots{}

@item 0@dots{}0
Decimal numbers with as many digits as specified.  So, @samp{00} would
result in printing numbers as 01, 02, 03,@w{ }@enddots{}

In fact, any digit instead of zero will do; @code{gtroff} only counts
how many digits are specified.  As a consequence, @code{af}'s default
format @samp{1} could be specified as @samp{0} also (and exactly this is
returned by the @code{\g} escape, see below).

@item I
@cindex roman numerals
@cindex numerals, Roman
Upper-case Roman numerals: 0, I, II, III, IV,@w{ }@enddots{}

@item i
Lower-case Roman numerals: 0, i, ii, iii, iv,@w{ }@enddots{}

@item A
Upper-case letters: A, B, C, @dots{},@w{ }Z, AA, AB,@w{ }@enddots{}

@item a
Lower-case letters: a, b, c, @dots{},@w{ }z, aa, ab,@w{ }@enddots{}
@end table

Omitting the number register format will cause a warning of type
@samp{missing}.  @xref{Debugging}, for more details.  Specifying a
nonexistent format causes an error.

The following example will produce @samp{10, X, j, 010}:

@example
.nr a 10
.af a 1           \" the default format
\na,
.af a I
\na,
.af a a
\na,
.af a 001
\na
@end example

@cindex roman numerals, maximum and minimum
@cindex maximum values of Roman numerals
@cindex minimum values of Roman numerals
The largest number representable for the @samp{i} and @samp{I} formats
is 39999 (resp.@: -39999); @acronym{UNIX} @code{troff} uses @samp{z} and
@samp{w} to represent 10000 and 5000 in Roman numerals, and so does
@code{gtroff}.  Currently, the correct glyphs of Roman numeral five
thousand and Roman numeral ten thousand (Unicode code points
@code{U+2182} and @code{U+2181}, respectively) are not available.

If @var{ident} doesn't exist, it will be created.

@cindex read-only register, changing format
@cindex changing format, read-only register
Changing the output format of a read-only register causes an error.  It
is necessary to first copy the register's value to a writeable register,
then apply the @code{af} request to this other register.
@end_Deffn

@cindex format of register
@cindex register, format
@Deffn{Escape, \\g, ident}
Return the current format of the specified register @var{ident}.  For
example, @samp{\ga} after the previous example would produce the string
@samp{000}.  If the register hasn't been defined yet, nothing is
returned.
@end_Deffn

@c ---------------------------------------------------------------------

@node Built-in Registers,  , Assigning Formats, Registers
@subsection Built-in Registers
@cindex built-in registers
@cindex registers, built-in

The following lists some built-in registers which are not described
elsewhere in this manual.  Any register which begins with a @samp{.} is
read-only.  A complete listing of all built-in registers can be found in
@ref{Register Index}.

@table @code
@item .H
@cindex horizontal resolution register
@cindex resolution, horizontal, register
@vindex .H
Horizontal resolution in basic units.

@item .V
@cindex vertical resolution register
@cindex resolution, vertical, register
@vindex .V
Vertical resolution in basic units.

@item dw
@cindex day of the week register
@cindex date, day of the week register
@vindex dw
Day of the week (1-7).

@item dy
@cindex day of the month register
@cindex date, day of the month register
@vindex dy
Day of the month (1-31).

@item mo
@cindex month of the year register
@cindex date, month of the year register
@vindex mo
Current month (1-12).

@item year
@cindex date, year register
@cindex year, current, register
@vindex year
The current year.

@item yr
@vindex yr
The current year minus@w{ }1900.  Unfortunately, the documentation of
@acronym{UNIX} Version@w{ }7's @code{troff} had a year@w{ }2000 bug: It
incorrectly claimed that @code{yr} contains the last two digits of the
year.  That claim has never been true of either traditional @code{troff}
or GNU @code{troff}.  Old @code{troff} input that looks like this:

@example
'\" The following line stopped working after 1999
This document was formatted in 19\n(yr.
@end example

@noindent
can be corrected as follows:

@example
This document was formatted in \n[year].
@end example

@noindent
or, to be portable to older @code{troff} versions, as follows:

@example
.nr y4 1900+\n(yr
This document was formatted in \n(y4.
@end example

@item .c
@vindex .c
@itemx c.
@vindex c.
@cindex input line number register
@cindex line number, input, register
The current @emph{input} line number.  Register @samp{.c} is read-only,
whereas @samp{c.} (a @code{gtroff} extension) is writable also,
affecting both @samp{.c} and @samp{c.}.

@item ln
@vindex ln
@findex nm
@cindex output line number register
@cindex line number, output, register
The current @emph{output} line number after a call to the @code{nm}
request to activate line numbering.

@c XXX xref nm request

@item .x
@vindex .x
@cindex major version number register
@cindex version number, major, register
The major version number.  For example, if the version number is@w{
}1.03 then @code{.x} will contain@w{ }@samp{1}.

@item .y
@vindex .y
@cindex minor version number register
@cindex version number, minor, register
The minor version number.  For example, if the version number is@w{
}1.03 then @code{.y} will contain@w{ }@samp{03}.

@item .Y
@vindex .Y
@cindex revision number register
The revision number of @code{groff}.

@item .g
@vindex .g
@cindex @code{gtroff} identification register
@cindex GNU-specific register
Always@w{ }1.  Macros should use this to determine whether they are
running under GNU @code{troff}.

@item .A
@vindex .A
@cindex @acronym{ASCII} approximation output register
If the command line option @option{-a} is used to produce an
@acronym{ASCII} approximation of the output, this is set to@w{ }1, zero
otherwise.  @xref{Groff Options}.

@item .P
@vindex .P
This register is set to@w{ }1 (and to@w{ }0 otherwise) if the current
page is actually being printed, i.e., if the @option{-o} option is being
used to only print selected pages.  @xref{Groff Options}, for more
information.

@item .T
@vindex .T
If @code{gtroff} is called with the @option{-T} command line option, the
number register @code{.T} is set to@w{ }1, and zero otherwise.
@xref{Groff Options}.

@maindex \*(.T
@cindex output device register
Additionally, @code{gtroff} predefines a single (read/write) string
register @code{.T} which contains the current output device (for
example, @samp{latin1} or @samp{ps}).
@end table


@c =====================================================================

@node Manipulating Filling and Adjusting, Manipulating Hyphenation, Registers, Programming Tutorial
@section Manipulating Filling and Adjusting
@cindex manipulating filling and adjusting
@cindex filling and adjusting, manipulating
@cindex adjusting and filling, manipulating
@cindex justifying text
@cindex text, justifying

@cindex break
@cindex line break
@findex bp
@findex ce
@findex cf
@findex fi
@findex fl
@findex in
@findex nf
@findex rj
@findex sp
@findex ti
@findex trf
Various ways of causing @dfn{breaks} were given in @ref{Implicit Line
Breaks}.  The @code{br} request will likewise cause a break.  Several
other requests will also cause breaks, but implicitly.  These are
@code{bp}, @code{ce}, @code{cf}, @code{fi}, @code{fl}, @code{in},
@code{nf}, @code{rj}, @code{sp}, @code{ti}, and @code{trf}.

@Deffn{Request, br, }
Break the current line, i.e., the input collected so far will be emitted
without adjustment.

If the no-break control character is used, no break will happen:

@example
a
'br
b
    @result{} a b
@end example
@end_Deffn

Initially, @code{gtroff} will fill and adjust text to both margins.
Filling can be disabled via the @code{nf} request and re-enabled with
the @code{fi} request.

@cindex fill mode
@cindex mode, fill
@vindex .u
@Deffn{Request, fi, }
Activate fill mode (which is the default).  This request implicitly
enables adjusting; it will also cause a break in the text currently
being filled.  The number register @code{.u} is set to@w{ }1.

The fill mode status is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@cindex no-fill mode
@cindex mode, no-fill
@Deffn{Request, nf, }
Activate no-fill mode.  Input lines are output as-is, retaining line
breaks.  The current line length will be ignored.  This command
implicitly disables adjusting; it also causes a break.  The number
register @code{.u} will be set to@w{ }0.

The fill mode status is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@Deffn{Request, ad, [@var{mode}]}
Set adjusting mode.

Activation and deactivation of adjusting will be implicitly done with
calls to the @code{fi} resp.@: @code{nf} requests.

@var{mode} can have one of the following values:

@table @code
@item l
@cindex ragged-right
Adjust text to the left margin.  This produces what is traditionally
called ragged-right text.

@item r
@cindex ragged-left
Adjust text to the right margin, producing ragged-left text.

@item c
@cindex centered text
@findex ce
Center filled text.  This is different to the @code{ce} request which
only centers text without filling.

@item b
@itemx n
Justify to both margins.  This is the default used by @code{gtroff}.
@end table

With no argument, @code{gtroff} will adjust lines in the same way it did
before adjusting has been deactivated (with a call to @code{na}, for
example).

@example
text
.ad r
text
.ad c
text
.na
text
.ad  \" back to centering
text
@end example

@vindex .j
@cindex current adjustment mode register
The current adjustment mode is available in the number register
@code{.j}; it can be stored and subsequently used to set adjustment.

The adjustment mode status is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@Deffn{Request, na, }
Disable adjusting.  This request won't change the current adjustment
mode: A call to @code{ad} afterwards will use the previous adjustment
setting.

The adjustment mode status is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@Deffn{Escape, \\p, }
Adjust the current line and cause a break.

In most cases this will produce very ugly results, since @code{gtroff}
doesn't have a sophisticated paragraph building algorithm (as @TeX{}
does, for example); instead, @code{gtroff} fills and adjusts a paragraph
line by line:

@example
  This is an uninteresting sentence.
  This is an uninteresting sentence.\p
  This is an uninteresting sentence.
@end example

is formatted as

@example
  This is  an uninteresting  sentence.   This  is an
  uninteresting                            sentence.
  This is an uninteresting sentence.
@end example
@end_Deffn

@cindex word space size
@cindex size of word space
@cindex space between words
@cindex sentence space size
@cindex size of sentence space
@cindex space between sentences
@Deffn{Request, ss, word_space_size [@var{sentence_space_size}]}
Change the minimum size of a space between filled words.  It takes its
units as one twelfth of the space width parameter for the current font.
Initially both the @var{word_space_size} and @var{sentence_space_size}
are@w{ }12.

@cindex fill mode
@cindex mode, fill
If two arguments are given to the @code{ss} request, the second argument
sets the sentence space size.  If the second argument is not given,
sentence space size will be set to @var{word_space_size}.  The sentence
space size is used in two circumstances: if the end of a sentence occurs
at the end of a line in fill mode, then both an inter-word space and a
sentence space will be added; if two spaces follow the end of a sentence
in the middle of a line, then the second space will be a sentence space.
Note that the behaviour of @acronym{UNIX} @code{troff} will be exactly
that exhibited by GNU @code{troff} if a second argument is never given
to the @code{ss} request.  In GNU @code{troff}, as in @acronym{UNIX}
@code{troff}, a sentence should always be followed by either a newline
or two spaces.

@vindex .ss
@vindex .sss
The number registers @code{.ss} and @code{.sss} hold the values of the
parameters set by the first and second arguments of the @code{ss}
request.

The word space and sentence space values are associated with the current
environment (@pxref{Environments}).

This request is ignored in nroff mode; it is also ignored if there is no
parameter.
@end_Deffn

@cindex centering lines
@cindex lines, centering
@Deffn{Request, ce, [@var{nnn}]}
Center text.  While the @w{@samp{.ad c}} request will also center text,
it has the side effect of filling the text.  @code{ce} will not fill the
text it affects.  This request causes a break.

With no arguments, @code{ce} will center the next line of text.
@var{nnn} specifies the number of lines to be centered.  If
the argument is zero or negative, centering is disabled.

@findex ll
@findex in
@findex ti
The basic length for centering text is the line length (as set with the
@code{ll} request) minus the indentation (as set with the @code{in}
request).  Temporary indentation is ignored.

A common idiom is to turn on centering for a large number of lines, and
to turn off centering after text to be centered.  This is useful for any
request which takes a number of lines as an argument.

@example
.ce 1000
replace this
with
something
more interesting
@dots{}
.ce 0
@end example

@vindex .ce
The @code{.ce} number register contains the number of lines remaining to
be centered, as set by the @code{ce} request.
@end_Deffn

@cindex justifying text
@cindex text, justifying
@cindex right-justifying
@vindex .rj
@Deffn{Request, rj, [@var{nnn}]}
Justify unfilled text to the right margin.  Arguments are identical to
the @code{ce} request.  The @code{.rj} number register is the number of
lines to be right-justified as set by the @code{rj} request.  This
request causes a line break.
@end_Deffn


@c =====================================================================

@node Manipulating Hyphenation, Manipulating Spacing, Manipulating Filling and Adjusting, Programming Tutorial
@section Manipulating Hyphenation
@cindex manipulating hyphenation
@cindex hyphenation, manipulating

As discussed in @ref{Hyphenation}, @code{gtroff} will hyphenate words.
There are a number of ways to influence hyphenation.

@Deffn{Request, hy, [@var{mode}]}
Enable hyphenation.  The request has an optional numeric argument,
@var{mode}, to restrict hyphenation if necessary:

@table @code
@item 1
The default argument if @var{mode} is omitted.  Hyphenate without
restrictions.  This is also the start-up value of @code{gtroff}.

@item 2
Do not hyphenate the last word on a page or column.

@item 4
Do not hyphenate the last two characters of a word.

@item 8
Do not hyphenate the first two characters of a word.
@end table

Values in the previous table are additive.  For example, the value@w{
}12 causes @code{gtroff} to neither hyphenate the last two nor the first
two characters of a word.

@vindex .hy
@cindex hyphenation restrictions register
The current hyphenation restrictions can be found in the number register
@samp{.hy}.

The hyphenation mode is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@Deffn{Request, nh, }
Disable hyphenation (i.e., set the hyphenation mode to zero).  Note that
the hyphenation mode of the last call to @code{hy} is not remembered.

The hyphenation mode is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@vindex .hlc
@vindex .hlm
@findex \%
@cindex explicit hyphens
@cindex hyphen, explicit
@cindex consecutive hyphenated lines
@cindex lines, consecutive hyphenated
@cindex hyphenated lines, consecutive
@Deffn{Request, hlm, [@var{nnn}]}
Set the maximum number of consecutive hyphenated lines to @var{nnn}.  If
this number is negative, there is no maximum.  The default value is@w{
}-1 if @var{nnn} is omitted.  This value is associated with the current
environment (@pxref{Environments}).  Only lines output from a given
environment count towards the maximum associated with that environment.
Hyphens resulting from @code{\%} are counted; explicit hyphens are not.

The current setting of @code{hlm} is available in the @code{.hlm}
register.  Also the number of immediately preceding consecutive
hyphenated lines are available in the number register @samp{.hlc}.
@end_Deffn

@Deffn{Request, hw, word1 word2 @dots{}}
Define how @var{word1}, @var{word2}, etc.@: are to be hyphenated.  The
words must be given with hyphens at the hyphenation points.  For
example:

@example
.hw in-sa-lub-rious
@end example

@noindent
Besides the space character, any character whose hyphenation code value
is zero can be used to separate the arguments of @code{hw} (see the
documentation for the @code{hcode} request below for more information).
In addition, this request can be used more than once.

Hyphenation exceptions specified with the @code{hw} request are
associated with the current hyphenation language; it will cause an error
if there is no current hyphenation language.

This request is ignored if there is no parameter.

In old versions of @code{troff} there was a limited amount of space to
store such information; fortunately, with @code{gtroff}, this is no
longer a restriction.
@end_Deffn

@cindex hyphenation character
@cindex character, hyphenation
@cindex disabling hyphenation
@cindex hyphenation, disabling
@Deffn{Escape, \\%, }
To tell @code{gtroff} how to hyphenate words on the fly, the @code{\%}
escape, also known as the @dfn{hyphenation character}, can be used.
Preceding a word with this character will prevent it from being
hyphenated, putting it in a word will indicate to @code{gtroff} that the
word may be hyphenated at that point.  Note that this mechanism will
only affect that one occurrence of the word; to change the hyphenation
of a word for the entire document, use the @code{hw} request.
@end_Deffn

@Deffn{Request, hc, [@var{char}]}
Change the hyphenation character to @var{char}.  This character will
then work the same as the @code{\%} escape, and thus, no longer appear
in the output.  Without an argument, @code{hc} will reset the
hyphenation character to be @code{\%} (the default) only.

The hyphenation character is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@cindex hyphenation patterns
@cindex patterns for hyphenation
@Deffn{Request, hpf, pattern_file}
Read in a file of hyphenation patterns.  This file will be searched for
in the same way as @file{tmac.@var{name}} is searched for if the
@option{-m@var{name}} option is specified.

It should have the same format as the argument to the @code{\patterns}
primitive in @TeX{} (without using @TeX{}'s macro expansion); the
letters appearing in this file are interpreted as hyphenation codes.  A
@samp{%} character in the patterns file introduces a comment that
continues to the end of the line.

If no @code{hpf} request is specified (either in the document or in a
macro package), @code{gtroff} won't hyphenate at all.

@findex hla
@pindex troffrc
@pindex troffrc-end
@pindex hyphen.us
The set of hyphenation patterns is associated with the current language
set by the @code{hla} request.  The @code{hpf} request is usually
invoked by the @file{troffrc} or @file{troffrc-end} file; by default,
@file{troffrc} loads hyphenation patterns for American English (in file
@file{hyphen.us}).

@code{hpf} will cause an error if there is no current hyphenation
language.
@end_Deffn

@cindex hyphenation code
@cindex code, hyphenation
@Deffn{Request, hcode, c1 code1 c2 code2 @dots{}}
Sets the hyphenation code of character @var{c1} to @var{code1}, that of
@var{c2} to @var{code2}, etc.  A hyphenation code must be a single input
character (not a special character) other than a digit or a space.
Initially each lower-case letter (@samp{a}-@samp{z}) has its hyphenation
set to itself, and each upper-case letter (@samp{A}-@samp{Z}) has a
hyphenation code which is the lower-case version of itself.

This request will be ignored if it has no parameter.
@end_Deffn

@cindex hyphenation margin
@cindex margin for hyphenation
@findex ad
@Deffn{Request, hym, [@var{length}]}
Set the (right) hyphenation margin to @var{length}.  If the current
adjustment mode is not@w{ }@samp{b}, the line will not be hyphenated if
it is shorter than @var{length}.  Without argument, the hyphenation
margin will be reset to its default value, which is@w{ }0.  The default
scaling indicator for this request is@w{ }@code{m}.  The hyphenation
margin is associated with the current environment
(@pxref{Environments}).

A negative argument will reset the hyphenation margin to zero, emitting
a warning of type @samp{range}.

@vindex .hym
@cindex current hyphenation margin register
The current hyphenation margin is available in the @code{.hym} register.
@end_Deffn

@cindex hyphenation space
@findex ad
@Deffn{Request, hys, [@var{hyphenation_space}]}
Set the hyphenation space to @var{hyphenation_space}.  If the current
adjustment mode is@w{ }@samp{b}, don't hyphenate the line if it
can be justified by adding no more than @var{hyphenation_space} extra
space to each word space.  Without argument, the hyphenation space is
set to its default value, which is@w{ }0.  The default scaling indicator
for this request is@w{ }@code{m}.  The hyphenation space is associated
with the current environment (@pxref{Environments}).

A negative argument will reset the hyphenation space to zero, emitting a
warning of type @samp{range}.

@vindex .hys
@cindex current hyphenation space register
The current hyphenation space is available in the @code{.hys} register.
@end_Deffn

@cindex soft hyphen character
@cindex character, soft hyphen
@glindex hy
@findex char
@findex tr
@Deffn{Request, shc, [@var{char}]}
Set the soft hyphen character to @var{char}.  If the argument is
omitted, the soft hyphen character will be set to the default character
@code{\(hy} (this is the start-up value of @code{gtroff} also).  The
soft hyphen character is the character which will be inserted when a
word is hyphenated at a line break.  If the soft hyphen character does
not exist in the font of the character immediately preceding a potential
break point, then the line will not be broken at that point.  Neither
definitions (specified with the @code{char} request) nor translations
(specified with the @code{tr} request) are considered when finding the
soft hyphen character.
@end_Deffn

@findex hpf
@findex hw
@pindex troffrc
@pindex troffrc-end
@Deffn{Request, hla, language}
Set the current hyphenation language to the string @var{language}.
Hyphenation exceptions specified with the @code{hw} request and
hyphenation patterns specified with the @code{hpf} request are both
associated with the current hyphenation language.  The @code{hla}
request is usually invoked by the @file{troffrc} or the
@file{troffrc-end} files; @file{troffrc} sets the default language to
@samp{us}.

@vindex .hla
@cindex current hyphenation language register
The current hyphenation language is available as a string in the
read-only number register @samp{.hla}.

@example
.ds curr_language \n[.hla]
\*[curr_language]
    @result{} us
@end example
@end_Deffn


@c =====================================================================

@node Manipulating Spacing, Tabs and Fields, Manipulating Hyphenation, Programming Tutorial
@section Manipulating Spacing
@cindex manipulating spacing
@cindex spacing, manipulating

@Deffn{Request, sp, [@var{distance}]}
Space downwards @var{distance}.  With no argument it will advance 1@w{
}line.  A negative argument will cause @code{gtroff} to move up the page
the specified distance.  If the argument is preceded by a @samp{|}
@code{gtroff} will move that distance from the top of the page.  This
request causes a line break.  The default scaling indicator is@w{
}@code{v}.
@end_Deffn

@cindex double-spacing
@Deffn{Request, ls, [@var{nnn}]}
Output @w{@var{nnn}-1} blank lines after each line of text.  With no
argument @code{gtroff} will use the previous value before the last
@code{ls} call.

@example
.ls 2    \" This causes double-spaced output
.ls 3    \" This causes triple-spaced output
.ls      \" Again double spaced
@end example

The line spacing is associated with the current environment
(@pxref{Environments}).

@vindex .L
@cindex current line spacing register
The number register @code{.L} contains the current line spacing setting.
@end_Deffn

@Deffn{Escape, \\x, spacing}
Sometimes, extra vertical spacing is only needed occasionally, e.g.@: to
allow space for a tall construct (like an equation).  The @code{\x}
escape will do this.  The escape is given a numerical argument, usually
enclosed in quotes (like @samp{\x'3p'}); the default scaling indicator
is@w{ }@code{v}.  If this number is positive extra vertical space will
be inserted below the current line.  A negative number will add space
above.  If this escape is used multiple times on the same line, the
maximum of the values is used.

@xref{Escapes}, for details on parameter delimiting characters.

@vindex .a
@cindex extra vertical line space register
The @code{.a} number register contains the most recent (nonnegative)
extra vertical line space.

@c XXX
@ignore
@example
... example of inline equation ...
@end example
@end ignore
@end_Deffn

@findex sp
@cindex no-space mode
@cindex mode, no-space
@cindex blank lines, disabling
@cindex lines, blank, disabling
@Deffn{Request, ns, }
Enable @dfn{no-space mode}.  In this mode, spacing (either via @code{sp}
or via blank lines) is disabled.  The @code{bp} request to advance to
the next page is also disabled, except if it is accompanied by a page
number (see @ref{Page Control}, for more information).  This mode will
end when actual text is output or the @code{rs} request is encountered.

This request is useful for macros which want to avoid that subsequent
macros inadvertently insert some vertical space before the text starts
(for example, to set up the first paragraph after a section header).  It
is associated with the current diversion level.

@c XXX xref
@end_Deffn

@Deffn{Request, rs, }
Disable no-space mode.  This request is associated with the current
diversion level.

@c XXX xref
@end_Deffn


@c =====================================================================

@node Tabs and Fields, Character Translations, Manipulating Spacing, Programming Tutorial
@section Tabs and Fields
@cindex tabs and fields
@cindex fields and tabs

@cindex @acronym{EBCDIC} encoding of a tab
A tab character (@acronym{ASCII} char@w{ }9, @acronym{EBCDIC} char@w{
}5) causes a horizontal movement to the next tab stop (much
like it did on a typewriter).

@Deffn{Escape, \\t, }
This escape is a non-interpreted tab character.  In copy mode
(@pxref{Copy-in Mode}), @code{\t} is the same as a real tab character.
@end_Deffn

@Deffn{Request, ta, [@var{n1} @var{n2} @dots{} @var{nn} @t{T} @var{r1} @var{r2} @dots{} @var{rn}]}
Change tab stop positions.  This request takes a series of tab
specifiers as arguments (optionally divided into two groups with the
letter @samp{T}) which indicate where each tab stop is to be (overriding
any previous settings).

Tab stops can be specified absolutely, i.e., as the distance from the
left margin.  For example, the following will set 6@w{ }tab stops every
one inch.

@example
.ta 1i 2i 3i 4i 5i 6i
@end example

Tab stops can also be specified relatively (using a leading @samp{+})
which means that the specified tab stop will be set that distance from
the previous tab stop.  For example, the following is equivalent to the
previous example.

@example
.ta 1i +1i +1i +1i +1i +1i
@end example

@code{gtroff} supports an extended syntax to specify repeat values after
the @samp{T} mark (these values are always taken as relative) -- this is
the usual way to specify tabs set at equal intervals.  The following is,
yet again, the same as the previous examples.  It does even more since
it defines an infinite number of tab stops separated by one inch.

@example
.ta T 1i
@end example

Now we are ready to interpret the full syntax given at the beginning:
Set tabs at positions @var{n1}, @var{n2}, @dots{}, @var{nn} and then set
tabs at @var{nn}+@var{r1}, @var{nn}+@var{r2}, @dots{}, @var{nn}+@var{rn}
and then at @var{nn}+@var{rn}+@var{r1}, @var{nn}+@var{rn}+@var{r2},
@dots{}, @var{nn}+@var{rn}+@var{rn}, and so on.

Example: @samp{4c +6c T 3c 5c 2c} is equivalent to @samp{4c 10c 13c 18c
20c 23c 28c 30c @dots{}}.

The material in each tab column (i.e., the column between two tab stops)
may be justified to the right or left or centered in the column.  This
is specified by appending @samp{R}, @samp{L}, or @samp{C} to the tab
specifier.  The default justification is @samp{L}.  Example:

@example
.ta 1i 2iC 2iR
@end example

Some notes:

@itemize @bullet
@item
The default unit of the @code{ta} request is @samp{m}.

@item
A tab stop is converted into a non-breakable horizontal movement which
can be neither stretched nor squeezed.  For example,

@example
.ds foo a\tb\tc
.ta T 5i
\*[foo]
@end example

@noindent
creates a single line which is a bit longer than 10@w{ }inches (a string
is used to show exactly where the tab characters are).  Now consider the
following:

@example
.ds bar a\tb b\tc
.ta T 5i
\*[bar]
@end example

@noindent
@code{gtroff} first converts the tab stops of the line into unbreakable
horizontal movements, then splits the line after the second @samp{b}
(assuming a sufficiently short line length).  Usually, this isn't what
the user wants.

@item
Superfluous tabs (i.e., tab characters which do not correspond to a tab
stop) are ignored except the first one which delimits the characters
belonging to the last tab stop for right-justifying resp.@: centering.
Consider the following example

@example
.ds Z   foo\tbar\tfoo
.ds ZZ  foo\tbar\tfoobar
.ds ZZZ foo\tbar\tfoo\tbar
.ta 2i 4iR
\*[Z]
.br
\*[ZZ]
.br
\*[ZZZ]
.br
@end example

@noindent
which produces the following output:

@example
foo                 bar              foo
foo                 bar           foobar
foo                 bar              foobar
@end example

@noindent
The first line right-justifies the second `foo' relative to the tab
stop.  The second line right-justifies `foobar'.  The third line finally
right-justifies only `foo' because of the additional tab character which
marks the end of the string belonging to the last defined tab stop.

@item
Tab stops are associated with the current environment
(@pxref{Environments}).

@item
Calling @code{ta} without an argument will unset all tab stops.

@item
@cindex tab stops, in nroff mode
The start-up value of @code{gtroff} is @w{@samp{T 0.5i}}.  This value is
used even in nroff mode (contrary to @acronym{UNIX} @code{nroff} which
has tab stops preset every 0.8@dmn{i}).
@end itemize

@vindex .tabs
@cindex current tab settings register
The number register @code{.tabs} contains a string representation of the
current tab settings suitable for use as an argument to the @code{ta}
request.

@example
.ds tab-string \n[.tabs]
\*[tab-string]
    @result{} T120u
@end example
@end_Deffn

@cindex tab repitition character
@cindex character, tab repitition
@Deffn{Request, tc, [@var{fill-char}]}
Normally @code{gtroff} will fill the space to the next tab stop with
space.  This can be changed with the @code{tc} request.  With no
argument @code{gtroff} will revert to using space, which is the default.
The value of this @dfn{tab repitition} character is associated with the
current environment (@pxref{Environments}).
@end_Deffn

@menu
* Leaders::                     
* Fields::                      
@end menu

@c ---------------------------------------------------------------------

@node Leaders, Fields, Tabs and Fields, Tabs and Fields
@subsection Leaders
@cindex leaders

Sometimes it may may be desirable to use the @code{tc} request to fill a
particular tab stop with a given character (for example dots in a table
of contents), but also normal tab stops on the rest of the line.  For
this @code{gtroff} provides an alternate tab mechanism, called
@dfn{leaders} which will do just that.

@cindex leader character
A leader character (character code@w{ }1) behaves similarly to a tab
character: It moves to the next tab stop.  The only difference is that
for this movement, the fill character defaults to a period character and
not to space.

@Deffn{Escape, \\a, }
This escape is a non-interpreted leader character.  In copy mode
(@pxref{Copy-in Mode}), @code{\a} is the same as a real leader
character.
@end_Deffn

@cindex leader repitition character
@cindex character, leader repitition
@Deffn{Request, lc, [@var{fill-char}]}
The character that will be repeated can be declared with the @code{lc}
request.  Without an argument, leaders will act the same as tabs (i.e.,
using space for filling).  @code{gtroff}'s start-up value is @samp{.}.
The value of this @dfn{leader repitition} character is associated with
the current environment (@pxref{Environments}).
@end_Deffn

@cindex table of contents
@cindex contents, table of
For a table of contents, to name an example, tab stops may be defined so
that the section number is one tab stop, the title is the second with
the remaining space being filled with a line of dots, and then the page
number slightly separated from the dots.

@example
.ds entry 1.1\tFoo\a\t12
.lc .
.ta 1i 5i +.25i
\*[entry]
@end example

@noindent
This produces

@example
1.1  Foo..........................................  12
@end example

@c ---------------------------------------------------------------------

@node Fields,  , Leaders, Tabs and Fields
@subsection Fields
@cindex fields

@cindex field delimiting character
@cindex delimiting character for fields
@cindex character, field delimiting
@cindex field padding character
@cindex padding character for fields
@cindex character, field padding
@dfn{Fields} are a more general way of laying out tabular data.  A field
is defined as the data between a pair of @dfn{delimiting characters}.
It contains substrings which are separated by @dfn{padding characters}.
The width of a field is the distance on the @emph{input} line from the
position where the field starts to the next tab stop.  A padding
character inserts stretchable space similar to @TeX{}'s @code{\hss}
command (thus it can even be negative) to make the sum of all substring
lengths plus the stretchable space equal to the field width.  If more
than one padding character is inserted, the available space is evenly
distributed among them.

@Deffn{Request, fc, [@var{delim-char} [@var{padding-char}]]}
Define a delimiting and a padding character for fields.  If the latter
is missing, the padding character defaults to a space character.  If
there is no argument at all, the field mechanism is disabled (which is
the default).  Note that contrary to e.g.@: the tab repitition
character, delimiting and padding characters are not associated to the
current environment (@pxref{Environments}).

Example:

@example
.fc # ^
.ta T 3i
#foo^bar^smurf#
.br
#foo^^bar^smurf#
@end example

@noindent
and here the result:

@example
foo         bar          smurf
foo            bar       smurf
@end example
@end_Deffn


@c =====================================================================

@node Character Translations, Troff and Nroff Mode, Tabs and Fields, Programming Tutorial
@section Character Translations
@cindex character translations
@cindex translations of characters

@findex .
@findex '
@cindex control character
@cindex character, control
@cindex no-break control character
@cindex character, no-break control
@cindex control character, no-break
The control character (@samp{.}) and the no-break control character
(@samp{'}) can be changed with the @code{cc} and @code{c2} requests,
respectively.

@Deffn{Request, cc, [@var{c}]}
Set the control character to @var{c}.  With no argument the default
control character @samp{.} is restored.  The value of the control
character is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@Deffn{Request, c2, [@var{c}]}
Set the no-break control character to @var{c}.  With no argument the
default control character @samp{'} is restored.  The value of the
no-break control character is associated with the current environment
(@pxref{Environments}).
@end_Deffn

@findex \
@Deffn{Request, eo, }
Disable the escape mechanism completely.  After executing this request,
the backslash character @samp{\} no longer starts an escape sequence.

This request can be very helpful in writing macros since it is not
necessary then to double the escape character.  Here an example:

@example
.\" This is a simplified version of the
.\" .BR request from the man macro package
.eo
.de BR
.  ds result \&
.  while (\n[.$] >= 2) \@{\
.    as result \fB\$1\fR\$2
.    shift 2
.  \@}
.  if \n[.$] .as result \fB\$1
\*[result]
.  ft R
..
.ec
@end example
@end_Deffn

@cindex escape character
@cindex character, escape
@Deffn{Request, ec, [@var{c}]}
Set the escape character to @var{c}.  With no argument the default
escape character @samp{\} is restored.  It can be also used to re-enable
the escape mechanism after an @code{eo} request.

Note that changing the escape character globally will likely break macro
packages since @code{gtroff} has no mechanism (like @TeX{}) to `intern'
macros, i.e., to convert a macro definition into an internal form which
is independent of its representation.  If a macro is called, it will be
executed literally.
@end_Deffn

@Deffn{Escape, \\e, }
This escape sequence prints the current escape character (which is the
backslash character @samp{\} by default).
@end_Deffn

A @dfn{translation} is a mapping of an input character to an output
character.  The default mappings are given in the font definition files
for the specific output device (@pxref{Font Files}); all mappings (both
with @code{tr} and in the font definition files) occur at output time,
i.e., the input character gets assigned the metric information of the
mapped output character.

@Deffn{Request, tr, @var{a}@var{b}@var{c}@var{d}@dots{}}
Translate character @var{a} to @var{b}, character @var{c} to @var{d},
etc.  If there is an odd number of arguments, the last one will be
translated to the space character.

Some notes:

@itemize @bullet
@item
@findex \(
@findex \[
@findex \'
@findex \`
@findex \-
@findex \_
@findex \C
@findex \N
@findex char
@cindex special character
@cindex character, special
@cindex numbered character
@cindex character, numbered
Special characters (@code{\(@var{xx}}, @code{\[@var{xxx}]},
@code{\C'@var{xxx}'}, @code{\'}, @code{\`}, @code{\-}, @code{\_}),
characters defined with the @code{char} request, and numbered characters
(@code{\N'@var{xxx}'}) can be translated also.

@item
@findex \e
The @code{\e} escape can be translated also.

@item
@findex \%
Characters can be mapped onto the @code{\%} escape (but @code{\%} can't
be mapped onto another character).

@item
@cindex backspace character
@cindex character, backspace
@cindex leader character
@cindex character, leader
@cindex newline character
@cindex character, newline
@cindex tab character
@cindex character, tab
@findex \a
@findex \t
The following characters can't be translated: space (with one exception,
see below), backspace, newline, leader (and @code{\a}), tab (and
@code{\t}).

@item
@findex shc
Translations are not considered for finding the soft hyphen character
set with the @code{shc} request.

@item
@findex \&
The character pair @samp{@var{c}\&} (this is an arbitrary character@w{
}@var{c} followed by the zero width space character) will map this
character to nothing.

@example
.tr a\&
foo bar
    @result{} foo br
@end example

@noindent
It is even possible to map the space character to nothing:

@example
.tr aa \&
foo bar
    @result{} foobar
@end example

@noindent
As shown in the example, the space character can't be the first
character pair as an argument of @code{tr}.  Additionally, it is not
possible to map the space character to any other character; requests
like @w{@samp{.tr aa x}} will undo @w{@samp{.tr aa \&}} instead.

If justification is active, lines will be justified inspite of the
`empty' space character (but there is no minimal distance, i.e.@: the
space character, between words).

@item
After an output character has been constructed (this happens at the
moment immediately before the character is appended to an output
character list, either by direct output, in a macro, diversion, or
string), it is no longer affected by @code{tr}.

@c XXX xref

@item
Without an argument, the @code{tr} request is ignored.
@end itemize
@end_Deffn

@findex \!@r{, and @code{trnt}}
@Deffn{Request, trnt, @var{a}@var{b}@var{c}@var{d}@dots{}}
@code{trnt} is the same as the @code{tr} request except that the
translations do not apply to text that is transparently throughput into
a diversion with @code{\!}.  @xref{Diversions}, for more information.

For example,

@example
.tr ab
.di x
\!.tm a
.di
.x
@end example

@noindent
will print @samp{b}; if @code{trnt} is used instead of @code{tr} it will
print @samp{a}.
@end_Deffn


@c =====================================================================

@node Troff and Nroff Mode, Line Layout, Character Translations, Programming Tutorial
@section Troff and Nroff Mode
@cindex troff mode
@cindex mode, troff
@cindex nroff mode
@cindex mode, nroff

Originally, @code{nroff} and @code{troff} were two separate programs,
the former for tty output, the latter for everything else.  With GNU
@code{troff}, both programs are merged into one executable.

Usually, a macro package can be used with both @code{nroff} and
@code{troff}.  Nevertheless, it is sometimes necessary to make a
distinction between the two programs (resp.@: modes), and @code{gtroff}
provides two built-in conditions @samp{n} and @samp{t} for the
@code{if}, @code{ie}, and @code{while} requests to decide whether
@code{gtroff} shall behave like @code{nroff} or like @code{troff}.

@pindex troffrc
@pindex troffrc-end
@Deffn{Request, troff, }
Make the @samp{t} built-in condition true (and the @samp{n} built-in
condition false) for @code{if}, @code{ie}, and @code{while} conditional
requests.  This is the default if @code{gtroff} (@emph{not}
@code{groff}) is started with the @option{-R} switch to avoid loading of
the start-up files @file{troffrc} and @file{troffrc-end}.  Without
@option{-R}, @code{gtroff} stays in troff mode if the output device is
not a tty (e.g.@: `ps').
@end_Deffn

@pindex tmac.tty
@Deffn{Request, nroff, }
Make the @samp{n} built-in condition true (and the @samp{t} built-in
condition false) for @code{if}, @code{ie}, and @code{while} conditional
requests.  This is the default if @code{gtroff} uses a tty output
device; the code for switching to nroff mode is in the file
@file{tmac.tty} which will be loaded by the start-up file
@code{troffrc}.
@end_Deffn

@xref{Conditionals and Loops}, for more details on built-in conditions.


@c =====================================================================

@node Line Layout, Page Layout, Troff and Nroff Mode, Programming Tutorial
@section Line Layout
@cindex line layout
@cindex layout, line

@cindex dimensions, line
@cindex line dimensions
The following drawing shows the dimensions which @code{gtroff} uses for
placing a line of output onto the page.  They are labeled with the
request which manipulates each dimension.

@example
@group
                -->| in |<--
                   |<-----------ll------------>|
              +----+----+----------------------+----+
              |    :    :                      :    |
              +----+----+----------------------+----+
           -->| po |<--
              |<--------paper width---------------->|
@end group
@end example

@noindent
These dimensions are:

@ftable @code
@item po
@cindex left margin
@cindex margin, left
@cindex page offset
@cindex offset, page
@dfn{Page offset} -- this is the leftmost position of text on the final
output, defining the @dfn{left margin}.

@item in
@cindex indentation
@cindex line indentation
@dfn{Indentation} -- this is the distance from the left margin where
text will be printed.

@item ll
@cindex line length
@cindex length of line
@dfn{Line length} -- this is the distance from the left margin to right
margin.
@end ftable

@c XXX improve example

@example
.in +.5i
.ll -.5i
A bunch of really boring text which should
be indented from both margins.
Replace me with a better (and more) example!
.in -.5i
.ll +.5i
@end example

@cindex troff mode
@cindex mode, troff
@cindex nroff mode
@cindex mode, nroff
@Deffn{Request, po, [@var{offset}]}
@Deffnx{Request, po, +offset}
@Deffnx{Request, po, -offset}
Set horizontal page offset to @var{offset} (resp.@: increment or
decrement the current value by @var{offset}).  Note that this request
does not cause a break, so changing the page offset in the middle of
text being filled may not yield the expected result.  The initial value
is 1@dmn{i} if in troff mode, and 0 if in nroff mode (@pxref{Troff and
Nroff Mode}); the default scaling indicator is@w{ }@code{m} (and not@w{
}@code{v} as incorrectly documented in the original @acronym{UNIX} troff
manual).

@vindex .o
The current page offset can be found in the built-in number register
@samp{.o}.

If @code{po} is called without an argument, the page offset is reset to
the previous value before the last call to @code{po}.

@example
.po 3i
\n[.o]
    @result{} 720
.po -1i
\n[.o]
    @result{} 480
.po
\n[.o]
    @result{} 720
@end example
@end_Deffn

@Deffn{Request, in, [@var{indent}]}
@Deffnx{Request, in, +indent}
@Deffnx{Request, in, -indent}
Set indentation to @var{indent} (resp.@: increment or decrement the
current value by @var{indent}).  This request causes a break.
Initially, there is no indentation.

If @code{in} is called without an argument, the indentation is reset to
the previous value before the last call to @code{in}.  The default
scaling indicator is@w{ }@code{m}.

The indentation is associated with the current environment.

If a negative indentation value is specified (which is not allowed),
@code{gtroff} emits a warning of type @samp{range} and sets the
indentation to zero.

The effect of @code{in} is delayed until a partially collected line (if
it exists) is output.

@vindex .i
The current indentation (as set by @code{in}) can be found in the
built-in number register @samp{.i}.
@end_Deffn

@Deffn{Request, ti, offset}
@Deffnx{Request, ti, +offset}
@Deffnx{Request, ti, -offset}
Temporarily indent the next output line by @var{offset}.  If an
increment or decrement value is specified, adjust the temporary
indentation relative to the value set by the @code{in} request.

This request causes a break; its value is associated with the current
environment.  The default scaling indicator is@w{ }@code{m}.  A call of
@code{ti} without an argument is ignored.

If the total indentation value is negative (which is not allowed),
@code{gtroff} emits a warning of type @samp{range} and sets the
temporary indentation to zero.  `Total indentation' is either
@var{offset} if specified as an absolute value, or the temporary plus
normal indentation, if @var{offset} is given as a relative value.

The effect of @code{ti} is delayed until a partially collected line (if
it exists) is output.

@vindex .in
The number register @code{.in} is the indentation that applies to the
current output line.

The difference between @code{.i} and @code{.in} is that the latter takes
into account whether a partially collected line still uses the old
indentation value resp.@: a temporary indentation value is active.
@end_Deffn

@Deffn{Request, ll, [@var{length}]}
@Deffnx{Request, ll, +length}
@Deffnx{Request, ll, -length}
Set the line length to @var{length} (resp.@: increment or decrement the
current value by @var{length}).  Initially, the line length is set to
6.5@dmn{i}.  The effect of @code{ll} is delayed until a partially
collected line (if it exists) is output.  The default scaling indicator
is@w{ }@code{m}.

If @code{ll} is called without an argument, the line length is reset to
the previous value before the last call to @code{ll}.  If a negative
line length is specified (which is not allowed), @code{gtroff} emits a
warning of type @samp{range} and sets the line length to zero.

The line length is associated with the current environment.

@vindex .l
@vindex .ll
@cindex current line length register
The current line length (as set by @code{ll}) can be found in the
built-in number register @code{.l}.  The number register @code{.ll} is
the line length that applies to the current output line.

Similar to @code{.i} and @code{.in}, the difference between @code{.l}
and @code{.ll} is that the latter takes into account whether a partially
collected line still uses the old line length value.
@end_Deffn


@c =====================================================================

@node Page Layout, Page Control, Line Layout, Programming Tutorial
@section Page Layout
@cindex page layout
@cindex layout, page

@code{gtroff} provides some very primitive operations for controlling
page layout.

@cindex page length
@cindex length of page
@Deffn{Request, pl, [@var{length}]}
@Deffnx{Request, pl, +length}
@Deffnx{Request, pl, -length}
Set the @dfn{page length} to @var{length} (resp.@: increment or
decrement the current value by @var{length}).  This is the length of the
physical output page.  The default scaling indicator is@w{ }@code{v}.

@vindex .p
@cindex current page length register
The current setting can be found in the built-in number register
@samp{.p}.

@cindex top margin
@cindex margin, top
@cindex bottom margin
@cindex margin, bottom
Note that this only specifies the size of the page, not the top and
bottom margins.  Those are not set by groff directly.  @xref{Traps}, for
further information on how to do this.

Negative @code{pl} values are possible also, but not very useful: No
trap is sprung, and each line is output on a single page (thus
suppressing all vertical spacing).
@end_Deffn

@cindex headers
@cindex footers
@cindex titles
@code{gtroff} provides several operations which help in setting up top
and bottom titles (or headers and footers).

@cindex title line
@cindex three-part title
@findex tl
@vindex %
The @code{tl} request will print a @dfn{title line}, which consists of
three parts: a left justified portion, a centered portion and a right
justified portion.  The argument to @code{tl} is specified as
@code{'@var{left}'@var{center}'@var{right}'}.  The @samp{%} character is
replaced with the current page number.  This character can be changed
with the @code{pc} request (see below).

@cindex length of title line
@cindex title line, length
@findex lt
@vindex .lt
@cindex current title line length register
The title line is printed using its own line length, which is specified
with the @code{lt} request.  The current setting of this is available in
the @code{.lt} number register.

@cindex page number
@cindex number, page
@findex pn
The @code{pn} request will change the page number of the @emph{next}
page.  The only argument is the page number.

@vindex %
@vindex .pn
@cindex current page number register
The current page number is stored in the number register @code{%}.  The
number register @code{.pn} contains the number of the next page: either
the value set by a @code{pn} request, or the number of the current page
plus@w{ }1.

@cindex changing the page number character
@cindex page number character, changing
@findex pc
The @code{pc} request will change the page number character (used by the
@code{tl} request) to a different character.  With no argument, this
mechanism is disabled.

@xref{Traps}.


@c =====================================================================

@node Page Control, Fonts, Page Layout, Programming Tutorial
@section Page Control
@cindex page control
@cindex control, page

@findex bp
@findex pn
@cindex new page
To stop processing the current page, and move to the next page, invoke
the @code{bp} request.  This request will also cause a break.  It can
also take an argument of what the next page should be numbered.  The
only difference between @code{bp} and @code{pn} is that @code{pn} does
not cause a break or actually eject a page.

@example
.de newpage
'bp
'sp .5i
.tl 'left top'center top'right top'
'sp .3i
..
@end example

@cindex orphan
@findex ne
It is often necessary to force a certain amount of space before a new
page occurs.  This is most useful to make sure that there is not a
single @dfn{orphan} line left at the bottom of a page.  The @code{ne}
request will ensure that there is a certain distance, specified by the
first argument, before the next page is triggered (see @ref{Traps}, for
further information).  The default unit for @code{ne} is @code{v} and
the default argument is@w{ }1@dmn{v}.

For example, to make sure that no fewer than 2@w{ }lines get orphaned,
do the following before each paragraph:

@example
.ne 2
.ti +5n
text
@end example

@findex sv
@findex os
@findex ne
@code{sv} is similar to the @code{ne} request; it reserves the specified
amount of vertical space.  If the desired amount of space exists before
the next trap (bottom page boundary), the space will be output
immediately.  If there is not enough space, it is stored for later
output via the @code{os} request.  The default argument is@w{ }1@dmn{v}
and the default unit is @code{v}.


@c =====================================================================

@node Fonts, Sizes, Page Control, Programming Tutorial
@section Fonts
@cindex fonts

@findex ft
@findex \f
@code{gtroff} has the ability to switch fonts at any point in the text.
There are two ways to do this, via the @code{ft} request and the
@code{\f} escape.

Fonts are generally specified as upper-case strings, which are usually
1@w{ }to 4 characters representing an abbreviation or acronym of the font
name.

The basic set of fonts are @samp{R}, @samp{I}, @samp{B}, and @samp{BI}.
These are Times Roman, Italic, Bold, and Bold Italic.  There is also at
least one symbol font which contains various special symbols (Greek,
mathematics).  Such symbols fonts cannot be used directly, but should be
used via an escape.

@menu
* Changing Fonts::              
* Font Families::               
* Font Positions::              
* Using Symbols::               
* Artificial Fonts::            
* Ligatures and Kerning::       
@end menu

@c ---------------------------------------------------------------------

@node Changing Fonts, Font Families, Fonts, Fonts
@subsection Changing Fonts
@cindex changing fonts
@cindex fonts, changing

@findex ft
@cindex previous font
@cindex font, previous
Font changes can be done either with the @code{ft} request or the
@code{\f} request.  With no arguments, it will switch to the previous
font (also known as @samp{P}).

@example
eggs, bacon,
.ft B
spam
.ft
and sausage.
@end example

@findex \f
The @code{\f} escape is useful for changing fonts in the middle of
words:

@example
eggs, bacon, \fBspam\fP and sausage.
@end example

@noindent
Both of the above examples will produce the same output.  Note the usage
of @samp{P} to indicate the previous font -- using @code{\f} it is not
possible to omit this parameter.

Sometimes, when putting letters of different fonts, more or less space at
such boundaries are needed.  There are two escapes to help with this.

@findex \/
@cindex italic correction
@cindex correction, italic
The @code{\/} escape increases the width of the preceding character so
that the spacing between that character and the following character will
be correct if the following character is a Roman character.  For
example, if an italic@w{ }f is immediately followed by a Roman right
parenthesis, then in many fonts the top right portion of the f will
overlap the top left of the right parenthesis.  It is a good idea to use
this escape sequence whenever an italic character is immediately
followed by a Roman character without any intervening space.  This small
amount of space is also called @dfn{italic correction}.

@c XXX example
@c producing @i{f}), which is ugly.  Inserting \/ produces f) and avoids
@c this problem.

@findex \,
@cindex left italic correction
@cindex correction, left italic
The @code{\,} escape modifies the spacing of the following character so
that the spacing between that character and the preceding character will
be correct if the preceding character is a Roman character.  It is a
good idea to use this escape sequence whenever a Roman character is
immediately followed by an italic character without any intervening
space.  In analogy to above, this space could be called @dfn{left italic
correction}, but this term isn't used widely.

@c XXX example
@c For example, inserting \, between the parenthesis and the f changes
@c (f to (f.

@findex ftr
@findex ft
@findex ul
@findex bd
@findex \f
@findex cs
@findex tkf
@findex special
@findex fspecial
@findex fp
@findex code
The @code{ftr} request will translate fonts; its syntax is

@example
.ftr @var{F} @var{G}
@end example

@noindent
which translates font@w{ }@var{F} to font@w{ }@var{G}.  Whenever a font
named @var{F} is referred to in a @code{\f} escape sequence, or in the
@code{ft}, @code{ul}, @code{bd}, @code{cs}, @code{tkf}, @code{special},
@code{fspecial}, @code{fp}, or @code{code} requests, font@w{ }@var{G}
will be used.  If @var{G} is missing, or equal to @var{F} then font@w{
}@var{F} will not be translated.

@c ---------------------------------------------------------------------

@node Font Families, Font Positions, Changing Fonts, Fonts
@subsection Font Families
@cindex font families
@cindex families, font

Due to the variety of fonts available, @code{gtroff} has added the
concept of font families.  Each of these families has four styles
(@samp{R}, @samp{I}, @samp{B} and @samp{BI}).

The fonts are specified as the concatenation of the font family and
style.  Specifying a font without the family part will cause
@code{gtroff} to use that style of the current family.  By default,
@code{gtroff} uses the Times family.

This way, it is possible to use the basic four fonts and to select a
different font family on the command line.

@findex fam
@vindex .fam
Font families can be switched with the @code{fam} request.  The current
font family is available in the number register @code{.fam}.  This is a
string-valued register.

@example
spam,
.fam H
spam,
.ft B
spam,
.fam T
spam,
.ft AR
baked beans,
.ft R
and spam.
@end example

@c ---------------------------------------------------------------------

@node Font Positions, Using Symbols, Font Families, Fonts
@subsection Font Positions
@cindex font positions
@cindex positions, font

For the sake of old phototypesetters and compatability with old versions
of @code{troff}, @code{gtroff} has the concept of font @dfn{positions},
on which various fonts are mounted.  The last one or two are reserved
for the symbol font(s).

@findex fp
New fonts can be mounted with the @code{fp} request.  These numeric
positions can then be referred to with font changing commands.  When
@code{gtroff} starts it is using font number one.

@example
.fp 1 H
.fp 2 HI
.fp 3 HB
wink, wink,
.ft 2
nudge, nudge,
.ft
.ft 3
say no more!
.ft
@end example

@noindent
Note that after these font changes have taken place, the original font
is restored.

@vindex .f
@cindex current font position register
The current font in use, as a font position, is available in number
register @code{.f}.  This can be useful to remember the current font,
for later recall.

@example
.nr save-font \n(.f
... lots 'o text ...
.ft \n[save-font]
@end example

@vindex .fp
@cindex next free font position register
The number of the next free font position is available in the number
register @code{.fp}.  This is useful when mounting a new font, like so:

@example
.fp \n[.fp] NEATOFONT
@end example

@pindex DESC@r{, and font mounting}
Fonts not listed in the @file{DESC} file are automatically mounted on
the next available font position when they are referenced.  If a font is
to be mounted explicitly with the @code{fp} request on an unused font
position, it should be mounted on the first unused font position, which
can be found in the @code{.fp} register.  Although @code{gtroff} does
not enforce this strictly, it will not allow a font to be mounted at a
position whose number is much greater than that of any currently used
position.

@findex fp
The @code{fp} request has an optional third argument.  This argument
gives the external name of the font, which is used for finding the font
description file.  The second argument gives the internal name of the
font which is used to refer to the font in @code{gtroff} after it has
been mounted.  If there is no third argument then the internal name will
be used as the external name.  This feature make it possible to use
fonts with long names in compatibility mode.

@c ---------------------------------------------------------------------

@node Using Symbols, Artificial Fonts, Font Positions, Fonts
@subsection Using Symbols
@cindex using symbols
@cindex symbols, using

@findex \(
@findex \[
Symbols can be inserted by using a special escape sequence.  This escape
is simply the escape character (usually a backslash) followed by an
identifier.  The symbol identifiers have to be two or more characters,
since single characters conflict with all the other escapes.  The
identifier can be either preceded by a parenthesis if it is two
characters long, or surrounded by square brackets.  So, the symbol for
the mathematical Greek letter `pi' can be produced either by @code{\(*p}
or @code{\[*p]}.

@example
area = \(*p\fIr\fP\u2\d
@end example

@findex \C
The escape @code{\C'@var{xxx}'} will typeset the character named
@var{xxx}.  Normally it is more convenient to use @code{\[@var{xxx}]}.
But @code{\C} has the advantage that it is compatible with recent
versions of @code{ditroff} and is available in compatibility mode.

@findex \N
@findex char
The escape @code{\N'@var{n}'} will typeset the character with code@w{
}@var{n} in the current font.  @var{n} can be any integer.  Most devices
only have characters with codes between 0 and@w{ }255.  If the current
font does not contain a character with that code, special fonts will
@emph{not} be searched.  The @code{\N} escape sequence can be
conveniently used on conjunction with the @code{char} request:

@example
.char \[phone] \f(ZD\N'37'
@end example

@noindent
@pindex DESC
@cindex unnamed characters
@cindex characters, unnamed
The code of each character is given in the fourth column in the font
description file after the charset command.  It is possible to include
unnamed characters in the font description file by using a name of
@samp{---}; the @code{\N} escape sequence is the only way to use these.

@c XXX should be `glyph', not `character'

@findex cflags
@cindex character properties
@cindex properties of characters
Each character has certain properties associated with it.  These
properties can be modified with the @code{cflags} request.  The first
argument is the the sum of the desired flags and the remaining arguments
are the characters to have those properties.

@table @code
@item 1
@cindex end of sentence characters
@cindex characters, end of sentence
the character ends sentences (initially characters @samp{.?!} have this
property)

@item 2
@cindex hyphenating characters
@cindex characters, hyphenation
lines can be broken before the character (initially no characters have
this property)

@item 4
@glindex hy
@glindex em
lines can be broken after the character (initially the characters
@samp{-\(hy\(em} have this property)

@item 8
@cindex overlapping characters
@cindex characters, overlapping
@glindex ul
@glindex rn
@glindex ru
the character overlaps horizontally (initially the characters
@samp{\(ul\(rn\(ru} have this property)

@item 16
@glindex br
the character overlaps vertically (initially character @samp{\(br} has
this property)

@item 32
@cindex transparent characters
@cindex character, transparent
@cindex '
@cindex "
@cindex ]
@cindex )
@cindex *
@glindex dg
@glindex rq
an end of sentence character followed by any number of characters with
this property will be treated as the end of a sentence if followed by a
newline or two spaces; in other words the character is @dfn{transparent}
for the purposes of end of sentence recognition -- this is the same as
having a zero space factor in @TeX{} (initially characters
@samp{"')]*\(dg\(rq} have this property).
@end table

@findex char
@cindex defining characters
@cindex characters, defining
@cindex creating new characters
New characters can be created with the @code{char} request.  It is
called as

@example
.char @var{c} @var{string}
@end example

@findex tr
@findex lc
@findex \l
@findex \L
@findex hcode
@noindent
This defines character@w{ }@var{c} to be @var{string}.  Every time
character@w{ }@var{c} needs to be printed, @var{string} will be
processed in a temporary environment and the result will be wrapped up
into a single object.  Compatibility mode will be turned off and the
escape character will be set to @samp{\} while @var{string} is being
processed.  Any emboldening, constant spacing or track kerning will be
applied to this object rather than to individual characters in
@var{string}.  A character defined by this request can be used just like
a normal character provided by the output device.  In particular other
characters can be translated to it with the @code{tr} request; it can be
made the leader character by the @code{lc} request; repeated patterns
can be drawn with the character using the @code{\l} and @code{\L} escape
sequences; words containing the character can be hyphenated correctly,
if the @code{hcode} request is used to give the character a hyphenation
code.  There is a special anti-recursion feature: use of character
within the character's definition will be handled like normal characters
not defined with @code{char}.

@findex rchar
@cindex removing character definition
@cindex character, removing definition
A character definition can be removed with the @code{rchar} request.
Its arguments are the characters to be removed.  This undoes the effect
of a @code{char} request.

@xref{Special Characters}.

@c ---------------------------------------------------------------------

@node Artificial Fonts, Ligatures and Kerning, Using Symbols, Fonts
@subsection Artificial Fonts
@cindex artificial fonts
@cindex fonts, artificial

There are a number of requests for artificially creating fonts.  These
are largely vestigial remains from the days when output devices did not
have a wide variety of fonts, and when @code{nroff} and @code{troff}
were separate programs.  These are no longer necessary in GNU
@code{troff}.

@findex ul
@cindex underlining
The @code{ul} request will print subsequent lines in italics on a device
capable of it, or underline the text on a character output device.  The
single argument is the number of lines to be ``underlined,'' with no
argument, the next line will be underlined.

@findex cu
@cindex continuous underlining
@cindex underlining, continuous
The @code{cu} request is similar to @code{ul} ...

@c XXX more info

@findex uf
@cindex underline font
@cindex font for underlining
The @code{uf} request will set the underline font used by @code{ul} and
@code{cu}.

@findex bd
@cindex imitating bold face
@cindex bold face, imitating
The @code{bd} request artificially creates a bold font by printing each
character twice, slightly offset.  The first argument specifies the font
to embolden, and the second is the number of basic units, minus one, by
which the two characters will be offset.  If the second argument is
missing, emboldening will be turned off.

@c ---------------------------------------------------------------------

@node Ligatures and Kerning,  , Artificial Fonts, Fonts
@subsection Ligatures and Kerning
@cindex ligatures and kerning
@cindex kerning and ligatures

@c XXX What are ligatures?

@c XXX more info

@findex lg
@vindex .lg
@cindex ligatures enabled register
The ligature mechanism can be switched on or off with the @code{lg}
request; if the parameter is non-zero or missing, ligatures are enabled,
otherwise disabled.  Default is on.  The current ligature mode can be
found in the number register @code{.lg} (set to@w{ }1 if ligatures are
enabled, 0@w{ }otherwise).

@c XXX What is kerning?

@c XXX more info

@cindex zero width space character
@cindex character, zero width space
@cindex space character, zero width
If the font description file contains pairwise kerning information,
characters from that font will be kerned.  Kerning between two
characters can be inhibited by placing @code{\&} between them.

@findex kern
@vindex .kern
@cindex kerning enabled register
Kerning can be activated with the @code{kern} request.  If the parameter
is non-zero or missing, enable pairwise kerning, otherwise disable it.
The number register @code{.kern} is set to@w{ }1 if pairwise kerning is
enabled, 0@w{ }otherwise.

@findex tkf
@cindex track kerning
@cindex kerning, track

@c XXX What is track kerning?

@c XXX more info

Track kerning must be used with great care since it is usually
considered bad typography if the reader notices the effect.  The syntax
of the @code{tkf} request is like this:

@example
.tkf @var{f} @var{s1} @var{n1} @var{s2} @var{n2}
@end example

@noindent
Enable track kerning for font@w{ }@var{f}.  If the current font is@w{
}@var{f} the width of every character will be increased by an amount
between @var{n1} and @var{n2}; if the current point size is less than or
equal to @var{s1} the width will be increased by @var{n1}; if it is
greater than or equal to @var{s2} the width will be increased by
@var{n2}; if the point size is greater than or equal to @var{s1} and
less than or equal to @var{s2} the increase in width is a linear
function of the point size.


@c =====================================================================

@node Sizes, Strings, Fonts, Programming Tutorial
@section Sizes
@cindex sizes

@cindex baseline
@cindex type size
@cindex size of type
@cindex vertical spacing
@cindex spacing, vertical
@code{gtroff} uses two dimensions with each line of text, type size and
vertical spacing.  The @dfn{type size} is the height from the text
@dfn{baseline} to the top of the tallest character (descenders may drop
below this baseline).  @dfn{Vertical spacing} is the amount of space
@code{gtroff} allows for a line of text; normally, this is about 20%@w{
}larger than the current type size.  Ratios smaller than this can result
in hard-to-read text; larger that this, it will spread the text out more
vertically (useful for term papers).  By default, @code{gtroff} uses
10@w{ }point type on 12@w{ }point spacing.

@cindex leading
The difference between type size and vertical spacing is known, by
typesetters, as @dfn{leading}.

@menu
* Changing Type Sizes::         
* Fractional Type Sizes::       
@end menu

@c ---------------------------------------------------------------------

@node Changing Type Sizes, Fractional Type Sizes, Sizes, Sizes
@subsection Changing Type Sizes
@cindex changing type sizes
@cindex type sizes, changing

@findex ps
@findex vs
@findex \s
@vindex .s
@vindex .v
@cindex current type size register
@cindex current vertical spacing register
Using the @code{ps} request and the @code{\s} escape the type size can
be changed.  The @code{vs} request will change the vertical spacing.
The default unit for the @code{ps} and @code{vs} requests are points.
The number registers @code{.s} and @code{.v} contain the current type
size and vertical spacing.

These requests take parameters in units of points.  It is possible to
specify sizes as an absolute size, or as a relative change from the
current size.  The size@w{ }0 means go back to the previous size.  With
no argument it will also revert to the previous size.

@example
snap, snap,
.ps +2
grin, grin,
.ps +2
wink, wink, \s+2nudge, nudge,\s+8 say no more!
.ps 10
@end example

The @code{\s} escape may be called in a variety of ways.  Much like
other escapes there must be a way to determine where the argument ends
and the text begins.  Any of the following forms are valid:

@table @code
@item \s@var{n}
Set the point size to @var{n}@w{ }points.  @var{n}@w{ }must be either 0
or in the range 4 to@w{ }39.

@item \s+@var{n}
@itemx \s-@var{n}
Increase resp.@: decrease the point size by @var{n}@w{ }points.
@var{n}@w{ }must be exactly one digit.

@item \s(@var{nn}
Set the point size to @var{nn}@w{ }points.  @var{nn} must be exactly two
digits.

@item \s+(@var{nn}
@itemx \s-(@var{nn}
@itemx \s(+@var{nn}
@itemx \s(-@var{nn}
Increase resp.@: decrease the point size by @var{nn}@w{ }points.
@var{nn} must be exactly two digits.
@end table

@xref{Fractional Type Sizes}, for yet another syntactical form of using
the @code{\s} escape.

Some devices may only have certain permissible sizes, in which case
@code{gtroff} will round to the nearest permissible size.

@c XXX example

@ignore
@example
... .sz macro example?? ...
@end example
@end ignore

@c ---------------------------------------------------------------------

@node Fractional Type Sizes,  , Changing Type Sizes, Sizes
@subsection Fractional Type Sizes
@cindex fractional type sizes
@cindex type sizes, fractional

@cindex @code{s} unit
@cindex unit, @code{s}
@cindex @code{z} unit
@cindex unit, @code{z}
@findex ps
@findex cs
@findex tkf
@findex \H
@findex \s
A @dfn{scaled point} is equal to 1/@var{sizescale} points, where
@var{sizescale} is specified in the @file{DESC} file (1@w{ }by default.)
There is a new scale indicator @samp{z} which has the effect of
multiplying by @var{sizescale}.  Requests and escape sequences in
@code{gtroff} interpret arguments that represent a point size as being
in units of scaled points, but they evaluate each such argument using a
default scale indicator of @samp{z}.  Arguments treated in this way are
the argument to the @code{ps} request, the third argument to the
@code{cs} request, the second and fourth arguments to the @code{tkf}
request, the argument to the @code{\H} escape sequence, and those
variants of the @code{\s} escape sequence that take a numeric expression
as their argument (see below).

For example, suppose @var{sizescale} is@w{ }1000; then a scaled point
will be equivalent to a millipoint; the request @w{@samp{.ps 10.25}} is
equivalent to @w{@samp{.ps 10.25z}} and thus sets the point size to
10250@w{ }scaled points, which is equal to 10.25@w{ }points.

It would make no sense to use the @samp{z} scale indicator in a numeric
expression whose default scale indicator was neither @samp{u} nor
@samp{z}, and so @code{gtroff} disallows this.  Similarly it would make
no sense to use a scaling indicator other than @samp{z} or @samp{u} in a
numeric expression whose default scale indicator was @samp{z}, and so
@code{gtroff} disallows this as well.

There is also new scale indicator @samp{s} which multiplies by the
number of units in a scaled point.  So, for example, @samp{\n[.ps]s} is
equal to @samp{1m}.  Be sure not to confuse the @samp{s} and @samp{z}
scale indicators.

@vindex .s
@vindex .ps
The number register @code{.s} returns the point size in points as decimal
fraction.  There is also a new number register @code{.ps} that returns
the point size in scaled points.

@vindex .psr
@vindex .sr
@cindex last-requested point size register
The last-requested point size in scaled points is contained in the
@code{.psr} number register.  The last requested point size in points as
a decimal fraction can be found in @code{.sr}.  This is a string-valued
register.

@table @code
@item \s[@var{n}]
@itemx \s'@var{n}'
Set the point size to @var{n} scaled points; @var{n}@w{ }is a numeric
expression with a default scale indicator of @samp{z}.

@item \s[+@var{n}]
@itemx \s[-@var{n}]
@itemx \s+[@var{n}]
@itemx \s-[@var{n}]
@itemx \s'+@var{n}'
@itemx \s'-@var{n}'
@itemx \s+'@var{n}'
@itemx \s-'@var{n}'
Increase or resp.@: decrease the point size by @var{n} scaled points;
@var{n} is a numeric expression with a default scale indicator of
@samp{z}.
@end table

@xref{Font Files}.


@c =====================================================================

@node Strings, Conditionals and Loops, Sizes, Programming Tutorial
@section Strings
@cindex strings

@findex ds
@code{gtroff} has string variables, which are entirely for user
convenience (i.e.@: there are no built-in strings).  They are defined
via the @code{ds} request.

@example
.ds UX \s-1UNIX\s0\u\s-3tm\s0\d
@end example

@findex \*
@cindex string interpolation
@cindex string expansion
@cindex interpolation of strings
@cindex expansion of strings
They are interpolated, or expanded in-place, via the @code{\*} escape:

@example
The \*(UX Operating System
@end example

If the string named by the @code{\*} does not exist, the escape will be
replaced by nothing.

@cindex comments, with @code{ds}
@strong{Caution:} Unlike other requests, the second argument to the
@code{ds} request takes up the entire line including trailing spaces.
This means that comments on a line with such a request can introduce
unwanted space into a string.

@example
.ds UX \s-1UNIX\s0\u\s-3tm\s0\d \" UNIX trademark
@end example

@noindent
Instead the comment should be put on another line or have the comment
escape adjacent with the end of the string.

@example
.ds UX \s-1UNIX\s0\u\s-3tm\s0\d\"  UNIX trademark
@end example

@cindex trailing quotes
@cindex quotes, trailing
@cindex leading spaces with @code{ds}
@cindex spaces with @code{ds}
To produce leading space the string can be started with a double quote.
No trailing quote is needed; in fact, any trailing quote is included in
your string.

@example
.ds sign "           Yours in a white wine sauce,
@end example

@findex as
@cindex appending to strings
@cindex strings, appending
The @code{as} request will append a string to another string.  It works
similar to the @code{ds} request except that it appends the second
argument onto the string named by the first argument.

@example
.as sign " with shallots, onions and garlic,
@end example

@findex \@key{RET}
@cindex multi-line strings
@cindex strings, multi-line
@cindex newline character in strings, escaping
@cindex escaping newline characters in strings
Strings are not limited to a single line of text.  A string can span
several lines by escaping the newlines with a backslash.  The resulting
string will be stored @emph{without} the newlines.

@example
.ds foo lots and lots \
of text are on these \
next several lines
@end example

@findex substring
@cindex substrings
Rudimentary string manipulation routines are given with the
@code{substring} and @code{length} requests.  The former has the
following syntax:

@example
.substring @var{xx} @var{n1} [@var{n2}]
@end example

@noindent
It replaces the string in register@w{ }@var{xx} with the substring
defined by the indices @var{n1} and@w{ }@var{n2}.  The first character
in the string has index one.  If @var{n2} is omitted, it is taken to be
equal to the string's length.  If the index value @var{n1} or @var{n2}
is negative or zero, it will be counted from the end of the string,
going backwards: The last character has index@w{ }0, the character
before the last character has index@w{ }-1, etc.

@findex length
@cindex length of a string
@cindex string, length of
Here the syntax of the @code{length} request:

@example
.length @var{xx} @var{string}
@end example

@noindent
It computes the length of @var{string} and returns it in the number
register@w{ }@var{xx} (which is not necessarily defined before).

@ignore
@findex rn
@code{rn}

@c XXX

@findex rm
@code{rm}

@c XXX

@findex als
@code{als}

@c XXX

@findex chop
@code{chop}

@c XXX
@end ignore


@xref{Identifiers}, and @ref{Comments}.


@c =====================================================================

@node Conditionals and Loops, Writing Macros, Strings, Programming Tutorial
@section Conditionals and Loops
@cindex conditionals and loops
@cindex loops and conditionals

@findex if@r{, operators to use with it}
@findex while@r{, operators to use with it}
In @code{if} and @code{while} requests, there are several more operators
available:

@table @code
@item e
@itemx o
True if the current page is even or odd numbered (respectively).

@item n
@findex nroff
True if the document is being processed in nroff mode.

@item t
@findex troff
True if the document is being processed in troff mode.

@item '@var{xxx}'@var{yyy}'
True if the string @var{xxx} is equal to the string @var{yyy}.  Other
characters can be used in place of the single quotes.
@c XXX (Which?)
The strings are ``formatted'' before being compared.
@c XXX (?)

@item r@var{xxx}
True if there is a number register named @var{xxx}.

@item d@var{xxx}
True if there is a string, macro, diversion, or request named @var{xxx}.

@item c@var{ch}
@findex char
True if there is a character @var{ch} available; @var{ch} is either an
@acronym{ASCII} character or a special character (@code{\(@var{ch}} or
@code{\[@var{ch}]}); the condition will also be true if @var{ch} has
been defined by the @code{char} request.
@end table

@menu
* if-else::                     
* while::                       
@end menu

@c ---------------------------------------------------------------------

@node if-else, while, Conditionals and Loops, Conditionals and Loops
@subsection if-else
@cindex if-else

@code{gtroff} has if-then-else constructs like other languages, although
the formatting can be painful.

@findex if
The @code{if} request has the following syntax:

@example
.if @var{expr} @var{anything}
@end example

@noindent
where @var{expr} is the expression to be evaluated; @var{anything} (the
remainder of the line) will be executed if @var{expr} evaluates to
non-zero (true).  @var{anything} will be interpreted as though it was on
a line by itself.  @xref{Expressions}, for more info.

Here are some examples:

@example
.if t .ls 2				\" double spacing in troff
.if 0 .ab how'd this happen?
@end example

@findex ie
@findex el
An if-then-else is written using two requests @code{ie} and @code{el}.
The first request is the `if' part and the latter is the `else' part.

@c XXX example

@example
.ie
.el
@end example

@findex \@{
@findex \@}
In many cases more than one request is to be executed as a result of any
of these requests.  This can be done using the @code{\@{} and @code{\@}}
escapes.  The following example shows the possible ways to use these
escapes (note the position of the opening and closing braces).

@example
.ie t \@{\
.    ds lq ``
.    ds rq ''
.\@}
.el \
.\@{\
.    ds lq "
.    ds rq "\@}
.ds qq "
@end example

@xref{Expressions}.

@c ---------------------------------------------------------------------

@node while,  , if-else, Conditionals and Loops
@subsection while
@cindex while

@findex while
@code{gtroff} provides a looping construct using the @code{while}
request, which is used much like the @code{if} (and related) requests.
The first argument is an expression which will be evaluated.  The
@code{while} request will interpret the remainder of the line until the
expression evaluates to 0 or false.

@example
.nr a 0 1
.while (\na<9) \&\n+a,
\&\n+a
@end example

@noindent
The preceding example produces:

@example
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
@end example

@cindex zero width space character
@cindex character, zero width space
@cindex space character, zero width
@findex \&
@noindent
Note the usage of the @code{\&} escape to avoid a control character at
the beginning of a line.

@findex break@r{, in a @code{while} loop}
@findex continue@r{, in a @code{while} loop}
The @code{break} request will @dfn{break} out of a while loop.  Be sure
not to confuse this with the @code{br} request (causing a line break).
The @code{continue} request will finish the current iteration of a while
loop, immediately restarting the next iteration.

@xref{Expressions}.


@c =====================================================================

@node Writing Macros, Page Motions, Conditionals and Loops, Programming Tutorial
@section Writing Macros
@cindex writing macros
@cindex macros, writing

@findex de
A @dfn{macro} is a collection of text and embedded commands which can be
invoked multiple times.  Macros are used for defining common operations.
Macros are defined using the @code{de} request.  This request takes a
name for the macro as the first argument.  Subsequent lines are copied
into an internal buffer until the line @code{..} is encountered.  The
optional second argument to @code{de} can change this ending token.

Here a small example macro called @samp{P} which will cause a break and
the insertion of some vertical space.  It could be used to separate
paragraphs.

@example
.de P
.br
.sp .8v
..
@end example

@findex am
@cindex appending, to a macro
The @code{am} request works similarly to @code{de} except it appends
onto the macro named by the first argument.  So, to make the previously
defined @samp{P} macro actually do indented instead of block paragraphs,
is is possible to add the necessary code to the existing macro like
this:

@example
.am P
.ti +5n
..
@end example

@findex als
@cindex aliases, macro
@cindex macro aliases
Macros can be aliased with the @code{als} request.

@c XXX example

@menu
* Copy-in Mode::                
* Parameters::                  
@end menu

@c ---------------------------------------------------------------------

@node Copy-in Mode, Parameters, Writing Macros, Writing Macros
@subsection Copy-in Mode
@cindex copy-in mode
@cindex mode, copy-in

@findex \n@r{, when reading test for a macro}
@findex \$@r{, when reading test for a macro}
@findex \*@r{, when reading test for a macro}
@findex \\@r{, when reading test for a macro}
@findex \@key{RET}@r{, when reading test for a macro}
When @code{gtroff} reads in the text for a macro or diversion it copies
the text (including request lines, but excluding escapes) into an
internal buffer.  Escapes will be converted into an internal form,
except for @code{\n}, @code{\$}, @code{\*}, @code{\\} and
@code{\@key{RET}} which are evaluated and inserted into the text where
the escape was located.  This is known as @dfn{copy-in} mode or
@dfn{copy} mode.

What this means is that you can specify when these escapes are to be
evaluated (either at copy-in time or at the time of use) by insulating
the escapes with an extra backslash.  Compare this to the @code{\def}
and @code{\edef} commands in @TeX{}.

For example, the following will result in the numbers 20 and@c{ }10
being printed:

@example
.nr x 20
.de y
.nr x 10
\&\nx
\&\\nx
..
.y
@end example

@c ---------------------------------------------------------------------

@node Parameters,  , Copy-in Mode, Writing Macros
@subsection Parameters
@cindex parameters

@findex \$
@vindex .$
The arguments to a macro can be examined using a variety of escapes.
The number of arguments is available in the @code{.$} number register.
Any individual argument can be retrieved with one of the following
escapes:

@cindex copy-in mode, and macro arguments
The escapes @code{\$@var{n}}, @code{\$(@var{nn}} and
@code{\$[@var{nnn}]} will result in the @var{n}th, @var{nn}th or
@var{nnn}th argument.  As usual, the first form only accepts a single
number (larger than zero), the second only a two-digit number (larger or
equal to@w{ }10), and the third any positive integer value (larger than
zero).  Macros can have an unlimited number of arguments.  Note that due
to copy-in mode, two backslashes should be used on these in actual use
to prevent interpolation until the macro is actually invoked.

@findex shift
The request @code{shift} will shift the arguments 1@w{ }position, or as
many positions as specified by its argument.  After executing this
request, argument@w{ }@var{i} will become argument @var{i}-@var{n};
arguments 1 to@w{ }@var{n} will no longer be available.  Shifting by
negative amounts is currently undefined.

@findex \$*
@findex \$@@
In some cases it is convenient to use all of the arguments at once (for
example, to pass the arguments along to another macro).  The @code{\$*}
escape is the concatenation of all the arguments separated by spaces.  A
similar escape is @code{\$@@}, which is the concatenation of all the
arguments with each surrounded by double quotes, and separated by
spaces.

@findex \$0
@findex als@r{, use with @code{\$0}}
The @code{\$0} escape is the name by which the current macro was
invoked.  The @code{als} request can make a macro have more than one
name.

@example
.de vl
.ie \\n(.$=1 .ds Vl Pre-Release Version
.el          .ds Vl Version \\$3, \\$4.
..
@end example

This would be called as

@example
.vl $Id: groff.texinfo,v 1.40 2000/06/18 10:13:51 wlemb Exp $
@end example

@xref{Request Arguments}.


@c =====================================================================

@node Page Motions, Drawing Requests, Writing Macros, Programming Tutorial
@section Page Motions
@cindex page motions
@cindex motions, page

@findex sp@r{, as vertical page motion}
Motions up and down the page can be done with the @code{sp} request.
However, this causes a break so that the actual effect is to move to the
left margin and then to the specified location.

@findex mk
@findex rt
The request @code{mk} can be used to mark a location on a page, for
movement to later.  This request takes a register name as an argument in
which to store the current page location.  With no argument it will
store the location in an internal register.  The results of this can be
used later by the @code{rt} or the @code{sp} request.  The @code{rt}
request will return @emph{upwards} to the location given in the register
name given as an argument, with no argument it will return to the
location marked with the @code{mk} request

@c XXX example
@ignore
@example
... dual column example ...
@end example
@end ignore

The following escapes give fine control of movements about the page.

@findex \v
@cindex vertical motion
@cindex motion, vertical
The @code{\v'@var{e}'} enables arbitrary vertical motion from the
current location on the page.  The argument@w{ }@var{e} specifies the
distance to move; positive is downwards and negative upwards.  The
default unit for this escape is vertical spaces, @code{v}'s.  Beware,
however, that @code{gtroff} will leave text processing to continue
wherever the motion ends, so to avoid interference with text processing,
motions should be balanced.

There are some special case escapes for vertical motion.

@ftable @code
@item \r
move upwards@w{ }1@dmn{v}.

@item \u
move upwards@w{ }.5@dmn{v}.

@item \d
move down@w{ }.5@dmn{v}.
@end ftable

@findex \h
@cindex inserting horizontal space
@cindex horizontal space
@cindex space, horizontal
Horizontal motions can be done via the @code{\h'@var{e}'} escape.  The
expression@w{ }@var{e} indicates how far to move: positive is rightwards
and negative leftwards.

There are a number of special case escapes for horizontal motion:

@ftable @code
@item \@key{SP}
an unbreakable and unpaddable (i.e.@: not expanded during filling)
space.  (Note: This is a backslash followed by a space.)

@item \~
an unbreakable space that stretches like a normal inter-word space when
a line is adjusted.

@item \|
a 1/6th em space.

@item \^
a 1/12th em space.

@item \0
a space the size of a digit.

@item \&
@cindex zero width space character
@cindex character, zero width space
@cindex space character, zero width
A zero width space.

@item \)
Like @code{\&} except that it behaves like a character declared with the
@code{cflags} request to be transparent for the purposes of end of
sentence recognition.
@end ftable

@c XXX example

@ignore
@example
... tex logo example ...
@end example
@end ignore

@findex \w
@cindex width escape
@cindex escape, width
A frequent need is to do horizontal movement based on the width of some
arbitrary text (e.g.@: given as an argument to a macro).  For that,
there is the escape @code{\w'@var{text}'} which will interpolate to the
width of the given @var{text} in basic units.

@c XXX example

@ignore
@example
... strlen example ...
@end example
@end ignore

Font changes may occur in @var{text} which don't affect current
settings.

After use, @code{\w} sets several registers:

@table @code
@item st
@itemx sb
@vindex st
@vindex sb
The highest and lowest point, respectively, in @var{text}.

@item rst
@itemx rsb
@vindex rst
@vindex rsb
Like the @code{st} and @code{sb} registers, but takes account of the
heights and depths of characters.

@item ct
@vindex ct
is set according to what kinds of characters occur in @var{text}:

@table @asis
@item 0
only short characters, no descenders or tall characters.

@item 1
descender.

@item 2
tall character.

@item 3
both a descender and a tall character.
@end table

@item ssc
@vindex ssc
The amount of horizontal space (possibly negative) that should be added
to the last character before a subscript.

@item skw
@vindex skw
How far to right of the center of the last character in the @code{\w}
argument, the center of an accent from a Roman font should be placed
over that character.
@end table

@findex \k
@vindex .k
@code{\k}

@code{.k}

@c XXX documentation


@c =====================================================================

@node Drawing Requests, Traps, Page Motions, Programming Tutorial
@section Drawing Requests
@cindex drawing requests
@cindex requests for drawing

@code{gtroff} provides a number of ways to draw lines and other figures
on the page.  Used in combination with the page motion commands (see
@ref{Page Motions}, for more info), a wide variety of figures can be
drawn.  However, for complex drawings these operations can be quite
cumbersome, and it may be wise to use graphic preprocessors like
@code{gpic} or @code{ggrn}.  @xref{gpic}, and @ref{ggrn}, for more
information.

All drawing is done via escapes.

@findex \l
@cindex drawing horizontal lines
@cindex horizontal line, drawing
@cindex line, horizontal, drawing
The @code{\l} escape will draw a line rightwards from the current
location.  The full syntax for this escape is like this:

@example
\l'@var{l}@var{c}'
@end example

@noindent
where @var{l} is the length of the line to be drawn, starting at the
current location; positive numbers will draw to the right, and negative
will draw towards the left.  This can also be specified absolutely
(i.e.@: with a leading @samp{|}) which will draw back to the beginning
of the line.

@cindex underscore character
@cindex character, underscore
@cindex line drawing character
@cindex character for line drawing
The optional second parameter @var{c} is a character to draw the line
with.  If this second argument is not specified, @code{gtroff} will use
the underscore character.

@cindex zero width space character
@cindex character, zero width space
@cindex space character, zero width
@findex \&
To separate the two arguments (to prevent @code{gtroff} from
interpreting a drawing character as a scaling indicator) use @code{\&}.

Here a small useful example:

@example
.de box
\(br\\$*\(br\l'|0\(rn'\l'|0\(ul'
..
@end example

@noindent
@opindex |
Note that this works by outputting a box rule (a vertical line), then
the text given as an argument and then another box rule.  Then the line
drawing escapes both draw from the current location to the beginning of
the @emph{input} line.

@findex \L
@cindex drawing vertical lines
@cindex vertical line drawing
@cindex line, vertical, drawing
@cindex line drawing character
@cindex character for line drawing
@cindex box rule character
@cindex character, box rule
Vertical lines are drawn using the @code{\L} escape.  Its parameters are
specified similar to the @code{\l} escape.  If the length is positive,
the movement will be downwards, and upwards for negative values.  The
default character is the box rule character.  As with the vertical
motion escapes, text processing will blindly continue where the line
ends.

@c XXX example

@ignore
@example
...box macro...
@end example
@end ignore

@findex \D
More flexible drawing functions are available via the @code{\D} escape.
While the previous escapes will work on a character device, these
escapes will not.

@table @code
@item \D'l @var{dx} @var{dy}'
Draw a line from the current location to the relative point specified by
(@var{dx},@var{dy}).

@c XXX example

@ignore
@example
...revised box macro...
@end example
@end ignore

@item \D'c @var{d}'
@cindex circle drawing
@cindex drawing a circle
Draw a circle with a diameter of @var{d} with the leftmost point at the
current position.

@item \D'C @var{d}'
Draw a solid circle with the same parameters as an outlined circle.

@item \D'e @var{dx} @var{dy}'
@cindex drawing an ellipse
@cindex ellipse drawing
Draw an ellipse with a horizontal diameter of @var{dx} and a vertical
diameter of @var{dy} with the leftmost point at the current position.

@item \D'E @var{dx} @var{dy}'
Draw a solid ellipse with the same parameters as an outlined ellipse.

@item \D'a @var{dx1} @var{dy1} @var{dx2} @var{dy2}'
@cindex arc drawing
@cindex drawing an arc
Draw an arc clockwise from the current location through the two
specified locations (@var{dx1},@var{dy1}) and (@var{dx2},@var{dy2}).

@item \D'~ @var{dx1} @var{dy1} @var{dx2} @var{dy2} ...'
@cindex drawing a spline
@cindex spline drawing
Draw a spline from the current location to (@var{dx1},@var{dy1}) and
then to (@var{dx2},@var{dy2}), and so on.

@item \D'f @var{n}'
@cindex gray shading
@cindex shading
@cindex shades for filling objects
Set the shade of gray to be used for filling solid objects to@w{
}@var{n}; @var{n}@w{ }must be an integer between 0 and@w{ }1000, where 0
corresponds solid white and 1000 to solid black, and values in between
correspond to intermediate shades of gray.  This applies only to solid
circles, solid ellipses and solid polygons.  By default, a level of@w{
}1000 will be used.

@item \D'p @var{dx1} @var{dy1} @var{dx2} @var{dy2} ...'
@cindex drawing a polygon
@cindex polygon drawing
Draw a polygon from the current location to (@var{dx1},@var{dy1}) and
then to (@var{dx2},@var{dy2}) and so on.  When the specified data points
are exhausted, a line is drawn back to the starting point.

@c XXX example

@ignore
@example
... box example (yes, again)...
@end example
@end ignore

@item \D'P @var{dx1} @var{dy1} @var{dx2} @var{dy2} ...'
Draw a solid polygon with the same parameters as an outlined polygon.

@c XXX example

@ignore
@example
... shaded box example ...
@end example
@end ignore

@item \D't @var{n}'
@cindex line thickness
@cindex thickness of lines
Set the current line thickness to @var{n} machine units.  A value of
zero selects the smallest available line thickness.  A negative value
makes the line thickness proportional to the current point size (this is
the default behaviour of @code{ditroff}).
@end table

@findex \b
@cindex pile, character
@cindex character pile
The @code{\b} escape will @dfn{pile} a sequence of characters
vertically, and center it vertically on the current line.  This can be
used to build large brackets and braces.

@example
\b'\(lt\(bv\(lk\(bv\(lb'
@end example

@xref{Drawing Functions}.


@c =====================================================================

@node Traps, Diversions, Drawing Requests, Programming Tutorial
@section Traps
@cindex traps

@dfn{Traps} are locations, which, when reached, will call a specified
macro.  These traps can occur at a given location on the page, at a
given location in the current diversion, after a certain number of input
lines or at the end of input.

@menu
* Page Location Traps::         
* Diversion Traps::             
* Input Line Traps::            
* End-of-input Traps::          
@end menu

@c ---------------------------------------------------------------------

@node Page Location Traps, Diversion Traps, Traps, Traps
@subsection Page Location Traps
@cindex page location traps
@cindex traps, page location

@c XXX definition of wh request

@cindex page headers
@cindex page footers
@cindex headers
@cindex footers
Page location traps are frequently used for page headers and footers.
The following is a simple example of this.

@example
.de hd                \" Page header
'sp .5i
.tl 'Title''date'
'sp .3i
..
.de fo                \" Page footer
'sp 1v
.tl ''%''
'bp
..
.wh 0   hd            \" trap at top of the page
.wh -1i fo            \" trap one inch from bottom
@end example

@vindex .t
@cindex distance to next trap
@cindex trap, distance
The number register @code{.t} is the distance to the next trap.

@findex ch
@cindex changing trap location
@cindex trap, changing location
The location of a trap can be changed later on with the @code{ch}
request.  The first argument is the name of the macro to be invoked at
the trap, and the second argument is the new location for the trap.
This is useful for building up footnotes in a diversion to allow more
space at the bottom of the page for them.

@c XXX

@ignore
@example
... (simplified) footnote example ...
@end example
@end ignore

@findex vpt
@findex wh
@vindex .vpt
@cindex vertical position trap enable register
The @code{vpt} request will enable vertical position traps if the
argument is non-zero, disable them otherwise.  Vertical position traps
are traps set by the @code{wh} or @code{dt} requests.  Traps set by the
@code{it} request are not vertical position traps.  The parameter that
controls whether vertical position traps are enabled is global.
Initially vertical position traps are enabled.  The current setting of
this is available in the number register @code{.vpt}.

@vindex .trunc
@findex ne@r{, and the @code{.trunc} register}
The number register @code{.trunc} contains the amount of vertical space
truncated by the most recently sprung vertical position trap, or, if the
trap was sprung by a @code{ne} request, minus the amount of vertical
motion produced by the @code{ne} request.  In other words, at the point
a trap is sprung, it represents the difference of what the vertical
position would have been but for the trap, and what the vertical
position actually is.

@vindex .ne
The number register @code{.ne} contains the amount of space that was
needed in the last @code{ne} request that caused a trap to be sprung.
Useful in conjunction with the @code{.trunc} register.  @xref{Page
Control}, for more information.

@c ---------------------------------------------------------------------

@node Diversion Traps, Input Line Traps, Page Location Traps, Traps
@subsection Diversion Traps
@cindex diversion traps
@cindex traps, diversion

@findex dt
@vindex .t@r{, and diversions}
Traps can also be set @emph{within} a diversion using the @code{dt}
request.  Like @code{wh} the first argument is the location of the trap
and the second argument is the name of the macro to be invoked.  The
number register @code{.t} will still work within diversions.
@xref{Diversions}, for more information.

@c ---------------------------------------------------------------------

@node Input Line Traps, End-of-input Traps, Diversion Traps, Traps
@subsection Input Line Traps
@cindex input line traps
@cindex traps, input line

@findex it
The @code{it} request will set an input line trap.  The format for
calling this is

@example
.it @var{n} @var{name}
@end example

@noindent
where @var{n} is the number of lines of input which may be read before
@dfn{springing} the trap, @var{name} is the macro to be invoked.
Request lines are not counted as input lines.

For example, one possible use is to have a macro which will print the
next @var{n}@w{ }lines in a bold font.

@example
.de B
.it B-end \\$1
.ft B
..
.de B-end
.ft R
..
@end example

@c ---------------------------------------------------------------------

@node End-of-input Traps,  , Input Line Traps, Traps
@subsection End-of-input Traps
@cindex end-of-input traps
@cindex traps, end-of-input

@findex em
The @code{em} request will set a trap at the end of input.  The macro
specified as an argument will be executed after the last line of the
input file has been processed.

For example, if the document had to have a section at the bottom of the
last page for someone to approve it, the @code{em} request could be
used.

@example
.de approval
.ne 5v
.sp |(\\n(.t-6v)
.in +4i
.lc _
.br
Approved:\t\a
.sp
Date:\t\t\a
..
.em approval
@end example


@c =====================================================================

@node Diversions, Environments, Traps, Programming Tutorial
@section Diversions
@cindex diversions

In @code{gtroff} it is possible to @dfn{divert} text into a named
storage area.  Due to the similarity to defining macros it is sometimes
said to be stored in a macro.  This is used for saving text for output
at a later time, which is useful for keeping blocks of text on the same
page, footnotes, tables of contents and indices.

@findex di
@findex da
A diversion is initiated by the @code{di} request.  Like the @code{de}
request, it takes an argument of a macro name to divert subsequent text
into.  The @code{da} macro will append to an existing diversion.

@code{di} (resp.@: @code{da}) without an argument ends the diversion.

@c XXX example

@ignore
@example
... end-note example ...
@end example
@end ignore

@vindex .z
@vindex .d
@vindex nl
@vindex .h
@cindex nested diversions
@cindex diversion, nested
Diversions may be nested.  The number register @code{.z} contains the
name of the current diversion.  The number register @code{.d} contains
the current vertical place in the diversion.  If not in a diversion it
is the same as the register @code{nl}.

@c XXX more info

@code{.h}

@vindex dn
@vindex dl
After completing a diversion, the built-in number registers @code{dn}
and @code{dl} contain the vertical and horizontal size of the diversion.

@example
.\" Center text both horizontally & vertically
.de (c
.br
.nf
.di @@c
..
.de )c
.br
.di
.nr @@s (((\\n(.tu-\\n(dnu)/2u)-1v)
.sp \\n(@@su
.ce 1000
.nf
.@c
.br
.ce 0
.sp \\n(@@su
.br
.fi
.rr @@s
..
@end example

@findex \!
@cindex transparent output
@cindex output, transparent
Requests, macros and escapes are interpreted when read into a diversion.
There are two ways to prevent this; either way will take the given text
and @dfn{transparently} embed it into the diversion.  The first method
is to prefix the line with @code{\!}.  This will cause the entire line
to be transparently inserted into the diversion.  This is useful for
macros which shouldn't be invoked until the diverted text is actually
output.

@c XXX anything is read in copy mode. (what about \! ??)

@findex \?
The other way is to surround the text by the @code{\?} escape, i.e.

@example
\?@var{anything}\?
@end example

@noindent
@var{anything} may not contain newlines; use @code{\!}  to embed
newlines in a diversion.  The escape sequence @code{\?} is also
recognized in copy mode and turned into a single internal code; it is
this code that terminates anything.  Thus the following example will
print@w{ }4.

@example
.nr x 1
.nf
.di d
\?\\?\\\\?\\\\\\\\nx\\\\?\\?\?
.di
.nr x 2
.di e
.d
.di
.nr x 3
.di f
.e
.di
.nr x 4
.f
@end example

@findex asciify
@cindex unformatting diversions
@cindex diversion, unformatting
The @code{asciify} request only exists in order to make certain gross
hacks work with GNU @code{troff}.  It @dfn{unformats} the diversion
specified as an argument in such a way that @acronym{ASCII} characters
that were formatted and diverted will be treated like ordinary input
characters when the diversion is reread.  For example, the following
will set register @code{n} to@w{ }1.

@example
.tr @@.
.di x
@@nr\ n\ 1
.br
.di
.tr @@@@
.asciify x
.x
@end example

@xref{Copy-in Mode}.


@c =====================================================================

@node Environments, I/O, Diversions, Programming Tutorial
@section Environments
@cindex environments

It happens frequently that some text should be printed in a certain
format regardless of what may be in effect at the time, for example, in
a trap invoked macro to print headers and footers.  To solve this
@code{gtroff} has @dfn{environments} in which text is processed.  An
environment contains most of the parameters that control text
processing.  It is possible to switch amongst these environments; by
default @code{gtroff} processes text in environment@w{ }0.  The
following is the information kept in an environment.

@itemize @bullet
@item
font parameters (size, family, style, character height and slant, space
and sentence space size)

@item
page parameters (line length, title length, vertical spacing,
line spacing, indentation, line numbering, hyphenation data)

@item
fill and adjust mode

@item
tab stops, tab and leader characters, escape character, no-break and
hyphen indicators, margin character data

@item
partially collected lines
@end itemize

These environments may be given arbitrary names (see @ref{Identifiers},
for more info).  Old versions of @code{troff} only had environments
named @samp{0}, @samp{1} and@w{ }@samp{2}.

@findex ev
@vindex .ev
@cindex switch environments
@cindex current environment number/name register
The @code{ev} request will switch to another environment.  The single
argument is the name of the environment to switch to.  With no argument
@code{gtroff} will switch back to the previous environment.  There is no
limit on the number of named environments; they will be created the
first time that they are referenced.  The @code{.ev} register contains
the name or number of the current environment.  This is a string-valued
register.

Note that a call to @code{ev} (with argument) will push the previously
active environment onto a stack.  If, say, environments @samp{foo},
@samp{bar}, and @samp{zap} are called (in that order), the first
@code{ev} request without parameter will switch back to environment
@samp{bar} (which will be popped off the stack), and a second call will
switch back to environment @samp{foo}.

@c XXX example

@ignore
@example
... page break macro, revised ...
@end example
@end ignore

Here is another example:

@example
.ev footnote-env
.fam N
.ps 6
.vs 8
.ll -.5i
.ev
...
.ev footnote-env
\(dg Note the large, friendly letters.
.ev
@end example

@findex evc
@cindex copy environment
To copy an environment into the current one, use the @code{evc} request,
which takes the name of the environment to copy from as an argument.


@c =====================================================================

@node I/O, Postprocessor Access, Environments, Programming Tutorial
@section I/O
@cindex i/o
@cindex input and output requests
@cindex requests for input and output
@cindex output and input requests

@findex so
@cindex including a file
@cindex file inclusion
The @code{so} request will read in the file given as an argument and
include it in place of the @code{so} request.  This is quite useful for
large documents, i.e.@: keeping each chapter in a separate file.
@xref{gsoelim}, for more information.

@findex mso
The @code{mso} request is the same as the @code{so} request except that
the file is searched for in the same directories as
@file{tmac.@var{name}} is searched for when the @option{-m@var{name}}
option is specified.

@findex cf
@cindex transparent output
@cindex output, transparent
The @code{cf} and @code{trf} requests are to include a file.  It will
transparently output the contents of file filename.  Each line is output
as it were preceded by @code{\!}; however, the lines are not subject to
copy mode interpretation.  If the file does not end with a newline, then
a newline will be added.  For example, to define a macro@w{ }@code{x}
containing the contents of file@w{ }@file{f}, use

@example
.di x
.trf f
.di
@end example

The request @w{@code{.cf @var{filename}}}, when used in a diversion,
will embed in the diversion an object which, when reread, will cause the
contents of @var{filename} to be transparently copied through to the
output.  In @acronym{UNIX} @code{troff}, the contents of @var{filename}
is immediately copied through to the output regardless of whether there
is a current diversion; this behaviour is so anomalous that it must be
considered a bug.  This request causes a line break.

@findex trf
With @code{trf}, unlike @code{cf}, the file cannot contain characters
such as NUL that are not valid @code{gtroff} input characters
(@pxref{Identifiers}).  This request causes a line break.

@findex nx
The @code{nx} request will force @code{gtroff} to continue processing of
the file specified as an argument.

@findex rd
The @code{rd} request will read from standard input, and include what is
read as though it were part of the input file.  Text is read until a
blank line is encountered.

@cindex form letters
@cindex letters, form
Using these two requests it is easy to set up form letters.  The form
letter template is constructed like this:

@example
.ce
\*(td
.sp 2
.nf
.rd
.sp
.rd
.fi
Body of letter.
.bp
.nx repeat.let
@end example

@findex ex
@noindent
When this is run, the following file should be redirected in.  Note that
requests included in this file are executed as though they were part of
the form letter.  The last block of input is the @code{ex} requests
which tells groff to stop processing.  If this was not there, groff
would not know when to stop.

@example
Trent A. Fisher
708 NW 19th Av., #202
Portland, OR  97209

Dear Trent,

Len Adollar
4315 Sierra Vista
San Diego, CA  92103

Dear Mr. Adollar,

.ex
@end example

@findex pi
@code{pi}

@c XXX documentation

@findex sy
The @code{sy} request will allow arbitrary system commands to be
executed from within a @code{gtroff} document.  The output is not saved
anyplace, so it is up to the user to do so.

@c XXX add info about safer and unsafe mode

For example, the following example will introduce the current time
into a document:

@cindex time, current
@cindex current time
@pindex perl
@example
.sy perl -e 'printf ".nr H %d\\n.nr M %d\\n.nr S %d\\n",\
	     (localtime(time))[2,1,0]' > /tmp/x\n[$$]
.so /tmp/x\n[$$]
.sy rm /tmp/x\n[$$]
\nH:\nM:\nS
@end example

@noindent
Note that this works by having the @code{perl} script (run by @code{sy})
print out the @code{nr} requests which will set the number registers
@samp{H}, @samp{M} and @samp{S}, and then reads those commands in with
the @code{so} request.

@vindex systat
@cindex @code{system()} return value register
The @code{systat} number register contains the return value of the
@code{system()} function executed by the last @code{sy} request.

@findex open
The @code{open} request will open a file (specified as the second
argument) for writing and associate the stream (specified as the first
argument) with it.

@findex opena
The @code{opena} is like @code{open}, but if the file exists, append to
it instead of truncating it.

@findex write
@cindex copy-in mode, and @code{write} requests
@cindex mode, copy-in, and @code{write} requests
The @code{write} request will write to the file associated with the
stream specified by the first argument.  The stream must previously have
been the subject of an open request.  The remainder of the line is
interpreted as the @code{ds} request reads its second argument: A
leading @samp{"} will be stripped, and it will be read in copy-in mode.

@findex close
The @code{close} request will close the stream specified by the first
argument; stream will no longer be an acceptable argument to the
@code{write} request.

@c XXX example

@ignore
@example
... example of open write &c...
@end example
@end ignore

@findex \V
The @code{\V} escape will interpolate the contents of the specified
environment variable, as returned by the function @code{getenv}.  The
argument to @code{\V} is specified as an identifier, i.e.@:
@samp{\V@var{x}}, @samp{\V(@var{xx}} or @samp{\V[@var{xxx}]}.  @code{\V}
is interpreted in copy-in mode.


@c =====================================================================

@node Postprocessor Access, Miscellaneous, I/O, Programming Tutorial
@section Postprocessor Access
@cindex postprocessor access
@cindex access of postprocessor

There are two escapes which will allow information to be directly given
to the postprocessor.  This is particularly useful for embedding
@sc{PostScript} into the final document.

@findex \X
The @code{\X} escape will embed its argument into the @code{gtroff}
output preceded with @w{@samp{x X}}.

@findex \Y
The @code{\Y} escape is called with an identifier (i.e.@:
@code{\Y@var{x}}, @code{\Y(@var{xx}} or @code{\Y[@var{xxx}]}).  This is
approximately equivalent to @samp{\X'\*[@var{xxx}]'}.  However, the
contents of the string or macro @var{xxx} are not interpreted; also it
is permitted for @var{xxx} to have been defined as a macro and thus
contain newlines (it is not permitted for the argument to @code{\X} to
contain newlines).  The inclusion of newlines requires an extension to
the @acronym{UNIX} @code{troff} output format, and will confuse drivers
that do not know about this extension.

@xref{Output Devices}.


@c =====================================================================

@node Miscellaneous, Debugging, Postprocessor Access, Programming Tutorial
@section Miscellaneous
@cindex miscellaneous

This section documents parts of @code{gtroff} which cannot (yet) be
categorized elsewhere in this manual.

@findex nm
@cindex line numbers
@cindex numbers, line
Line numbers can be printed in the left margin using the @code{nm}
request.  The first argument is the line number of the @emph{next}
output line; this defaults to@w{ }1.  The second argument indicates on
which lines numbers will be printed, i.e.@: 5 means put line numbers on
every 5@w{ }lines; this defaults to@w{ }1.  The third argument is the
space to be left between the number and the text; this defaults to@w{
}1.  The fourth argument is the indentation of the line numbers.
Without arguments, line numbers are turned off.

@c XXX xref ln register

@findex nn
The @code{nn} request will temporarily turn off line numbering.  The
first argument is the number of lines not to be numbered; this defaults
to@w{ }1.

@c XXX (does this disable incrementing or display?)

@c XXX example

@ignore
@example
... line numbering example ...
@end example
@end ignore

@findex mc
@cindex margin characters
@cindex characters for margins
Margin characters can be automatically printed to the right of the text
with the @code{mc} request.  The first argument is the character to be
printed, and the second argument is the distance away from the main body
text.  With no arguments the margin characters are turned off.  If this
occurs before a break, no margin character will be printed.

@pindex nrchbar
@pindex changebar
This is quite useful for indicating text that has changed, and, in fact,
there are programs available for doing this (they are called
@code{nrchbar} and @code{changebar} and can be found in any
@samp{comp.sources.unix} archive.

@c XXX example

@ignore
@example
... margin char example ...
@end example
@end ignore

@findex lf
@pindex soelim
@cindex multi-file documents
@cindex documents, multi-file
The primary reason for the existence of @code{lf} is to make debugging
documents which are split into many files, which are then put together
with @code{soelim} and other preprocessors.  The first argument is the
name of the file and the second argument is the input line number in
that file.  This way @code{gtroff} can produce error messages which are
intelligible to the user.

@c XXX example

@ignore
@example
... example of soelim'ed doc ...
@end example
@end ignore


@c =====================================================================

@node Debugging, Implementation Differences, Miscellaneous, Programming Tutorial
@section Debugging
@cindex debugging

@code{gtroff} is not easy to debug, but there are some useful features
and strategies for debugging.

@itemize @bullet
@item
@findex tm
The @code{tm} request will send output to the standard error stream;
this is very useful for printing debugging output.

@item
When doing something involved it is useful to leave the debugging
statements in the code and have them turned on by a command line flag.

@example
.if \n(DB .tm debugging output
@end example

@noindent
To activate these statements say

@example
groff -rDB=1 file
@end example

@item
@findex ab
@cindex aborting
The @code{ab} request is similar to the @code{tm} request, except that
it will cause @code{gtroff} to stop processing.  With no argument it
will print @samp{User Abort}.

@item
@findex ex@r{, use in debugging}
@cindex exiting
The @code{ex} request will also cause @code{gtroff} to stop processing
if encountered at the topmost level; see also @ref{I/O}.

@item
If it is known in advance that there will be many errors and no useful
output, @code{gtroff} can be forced to suppress formatted output with
the @option{-z} flag.

@item
@findex pm
@cindex dumping symbol table
@cindex symbol table, dumping
The @code{pm} request will dump out the entire symbol table.

@item
@findex pnr
@cindex dumping number registers
@cindex number registers, dumping
The @code{pnr} request will print the names and contents of all
currently defined number registers on stderr.

@item
@findex ptr
@cindex dumping traps
@cindex traps, dumping
The @code{ptr} request will print the names and positions of all traps
(not including input line traps and diversion traps) on stderr.  Empty
slots in the page trap list are printed as well, because they can affect
the priority of subsequently planted traps.

@item
@findex fl
@cindex flush output
@cindex output, flush
@cindex interactive use of @code{gtroff}
@cindex @code{gtroff}, interactive use
The @code{fl} request instructs @code{gtroff} to flush its output
immediately.  The intention is that this be used when using
@code{gtroff} interactively.  There is little other use for it.  This
request causes a line break.

@item
@findex backtrace
@cindex backtrace of input stack
@cindex input stack, backtrace
The @code{backtrace} request will print a backtrace of the input stack
to the standard error stream.

@item
@cindex warnings
@code{gtroff} has command line options for printing out more warnings
(@option{-w}) and for printing backtraces (@option{-b}) when a warning
or an error occurs.  The most verbose level of warnings is @option{-ww}.

@item
@findex warn
@vindex .warn
@cindex level of warnings
@cindex warnings, level
The @code{warn} request controls the level of warnings checked for.  The
only argument is the sum of the numbers associated with each warning
that is to be enabled; all other warnings will be disabled.  The number
associated with each warning is listed below.  For example,
@w{@code{.warn 0}} will disable all warnings, and @w{@code{.warn 1}}
will disable all warnings except that about missing characters.  If an
argument is not given, all warnings will be enabled.  The number
register @code{.warn} contains the current warning level.
@end itemize

@c ---------------------------------------------------------------------

@menu
* Warnings::                    
@end menu

@node Warnings,  , Debugging, Debugging
@subsection Warnings
@cindex warnings

The warnings that can be given to @code{gtroff} are divided into the
following categories.  The name associated with each warning is used by
the @option{-w} and @option{-W} options; the number is used by the
@code{warn} request and by the @code{.warn} register.

@table @samp
@item char
@itemx 1
Non-existent characters.  This is enabled by default.

@item number
@itemx 2
Invalid numeric expressions.  This is enabled by default.
@xref{Expressions}.

@item break
@itemx 4
@cindex fill mode
@cindex mode, fill
In fill mode, lines which could not be broken so that their length was
less than the line length.  This is enabled by default.

@item delim
@itemx 8
Missing or mismatched closing delimiters.

@item el
@itemx 16
@findex ie
@findex el
Use of the @code{el} request with no matching @code{ie} request.
@xref{if-else}.

@item scale
@itemx 32
Meaningless scaling indicators.

@item range
@itemx 64
Out of range arguments.

@item syntax
@itemx 128
Dubious syntax in numeric expressions.

@item di
@itemx 256
@findex di@r{, debugging}
@findex da@r{, debugging}
Use of @code{di} or @code{da} without an argument when there is no
current diversion.

@item mac
@itemx 512
@findex de
@c XXX more findex entries
Use of undefined strings, macros and diversions.  When an undefined
string, macro or diversion is used, that string is automatically defined
as empty.  So, in most cases, at most one warning will be given for each
name.

@item  reg
@itemx 1024
@findex nr
@c XXX more findex entries
Use of undefined number registers.  When an undefined number register is
used, that register is automatically defined to have a value of@w{ }0.
A definition is automatically made with a value of@w{ }0.  So, in most
cases, at most one warning will be given for use of a particular name.

@item  tab
@itemx 2048
Use of a tab character where a number was expected.

@item  right-brace
@itemx 4096
@findex \@}@r{, debugging}
Use of @code{\@}} where a number was expected.

@item  missing
@itemx 8192
Requests that are missing non-optional arguments.

@item  input
@itemx 16384
Illegal input characters.

@item  escape
@itemx 32768
Unrecognized escape sequences.  When an unrecognized escape sequence is
encountered, the escape character is ignored.

@item  space
@itemx 65536
@cindex compatibility mode
Missing space between a request or macro and its argument.  This warning
will be given when an undefined name longer than two characters is
encountered, and the first two characters of the name make a defined
name.  The request or macro will not be invoked.  When this warning is
given, no macro is automatically defined.  This is enabled by default.
This warning will never occur in compatibility mode.

@item  font
@itemx 131072
Non-existent fonts.  This is enabled by default.

@item all
All warnings except @samp{di}, @samp{mac} and @samp{reg}.  It is
intended that this covers all warnings that are useful with traditional
macro packages.

@item w
All warnings.
@end table


@c =====================================================================

@node Implementation Differences, Summary, Debugging, Programming Tutorial
@section Implementation Differences
@cindex implementation differences
@cindex differences in implementation
@cindex incompatibilities with Unix @code{troff}
@cindex compatibility mode
@cindex mode, compatibility

GNU @code{troff} has a number of features which cause incompatibilities
with documents written with old versions of @code{troff}.

@cindex long names
@cindex names, long
Long names cause some incompatibilities.  @acronym{UNIX} @code{troff}
will interpret

@example
.dsabcd
@end example

@findex \*@r{, incompatibilities with Unix @code{troff}}
@findex \n@r{, incompatibilities with Unix @code{troff}}
@findex cp
@vindex .C
@noindent
as defining a string @samp{ab} with contents @samp{cd}.  Normally, GNU
@code{troff} will interpret this as a call of a macro named
@code{dsabcd}.  Also @acronym{UNIX} @code{troff} will interpret
@code{\*[} or @code{\n[} as references to a string or number register
called @samp{[}.  In GNU @code{troff}, however, this will normally be
interpreted as the start of a long name.  In compatibility mode GNU
@code{troff} will interpret these things in the traditional way.  In
compatibility mode, however, long names are not recognized.
Compatibility mode can be turned on with the @option{-C} command line
option, and turned on or off with the @code{cp} request.  The number
register @code{.C} is@w{ }1 if compatibility mode is on, 0@w{
}otherwise.

@findex \A
@findex \|
@findex \^
@findex \&
@findex \@}
@findex \@{
@findex \@key{SP}
@findex \'
@findex \`
@findex \-
@findex \_
@findex \!
@findex \%
@findex \c
GNU @code{troff} does not allow the use of the escape sequences
@code{\|}, @code{\^}, @code{\&}, @code{\@}}, @code{\@{},
@code{\@key{SP}}, @code{\'}, @code{\`}, @code{\-}, @code{\_}, @code{\!},
@code{\%}, and @code{\c} in names of strings, macros, diversions, number
registers, fonts or environments; @acronym{UNIX} @code{troff} does.  The
@code{\A} escape sequence (@pxref{Identifiers}) may be helpful in
avoiding use of these escape sequences in names.

@cindex fractional point sizes
@cindex point sizes, fractional
@findex ps@r{, incompatibilities with Unix @code{troff}}
Fractional point sizes cause one noteworthy incompatibility.  In
@acronym{UNIX} @code{troff} the @code{ps} request ignores scale
indicators and thus

@example
.ps 10u
@end example

@noindent
will set the point size to 10@w{ }points, whereas in GNU @code{troff} it
will set the point size to 10@w{ }scaled points.  @xref{Fractional Type
Sizes}, for more information.

@findex bd@r{, incompatibilities with Unix @code{troff}}
@findex cs@r{, incompatibilities with Unix @code{troff}}
@findex tkf@r{, incompatibilities with Unix @code{troff}}
@findex tr@r{, incompatibilities with Unix @code{troff}}
@findex fp@r{, incompatibilities with Unix @code{troff}}
@cindex input and output characters, compatibility with Unix
@cindex output characters, compatibility with Unix
@cindex characters, input and output, compatibility with Unix
In GNU @code{troff} there is a fundamental difference between
unformatted, input characters, and formatted, output characters.
Everything that affects how an output character will be output is stored
with the character; once an output character has been constructed it is
unaffected by any subsequent requests that are executed, including
@code{bd}, @code{cs}, @code{tkf}, @code{tr}, or @code{fp} requests.
Normally output characters are constructed from input characters at the
moment immediately before the character is added to the current output
line.  Macros, diversions and strings are all, in fact, the same type of
object; they contain lists of input characters and output characters in
any combination.  An output character does not behave like an input
character for the purposes of macro processing; it does not inherit any
of the special properties that the input character from which it was
constructed might have had.  For example,

@example
.di x
\\\\
.br
.di
.x
@end example

@findex \e@r{, incompatibilities with Unix @code{troff}}
@findex \!@r{, incompatibilities with Unix @code{troff}}
@findex \?@r{, incompatibilities with Unix @code{troff}}
@cindex transparent output, incompatibilities with Unix @code{troff}
@cindex output, transparent, incompatibilities with Unix @code{troff}
@noindent
will print @samp{\\} in GNU @code{troff}; each pair of input backslashes
is turned into one output backslash and the resulting output backslashes
are not interpreted as escape characters when they are reread.
@acronym{UNIX} @code{troff} would interpret them as escape characters
when they were reread and would end up printing one @samp{\}.  The
correct way to obtain a printable backslash is to use the @code{\e}
escape sequence: This will always print a single instance of the current
escape character, regardless of whether or not it is used in a
diversion; it will also work in both GNU @code{troff} and @acronym{UNIX}
@code{troff}.  To store, for some reason, an escape sequence in a
diversion that will be interpreted when the diversion is reread, either
use the traditional @code{\!} transparent output facility, or, if this
is unsuitable, the new @code{\?} escape sequence.

@xref{Diversions}, for more information.


@c =====================================================================

@node Summary,  , Implementation Differences, Programming Tutorial
@section Summary
@cindex summary

@c XXX documentation



@c =====================================================================
@c =====================================================================

@node Preprocessors, Output Devices, Programming Tutorial, Top
@chapter Preprocessors
@cindex preprocessors

This chapter describes all preprocessors that come with @code{groff} or
which are freely available.

@menu
* geqn::                        
* gtbl::                        
* gpic::                        
* ggrn::                        
* grap::                        
* grefer::                      
* gsoelim::                     
@end menu


@c =====================================================================

@node geqn, gtbl, Preprocessors, Preprocessors
@section @code{geqn}
@cindex @code{eqn}
@cindex @code{geqn}

@c XXX

@menu
* Invoking geqn::               
@end menu

@c ---------------------------------------------------------------------

@node Invoking geqn,  , geqn, geqn
@subsection Invoking @code{geqn}
@cindex invoking @code{geqn}
@cindex @code{geqn}, invoking

@c XXX


@c =====================================================================

@node gtbl, gpic, geqn, Preprocessors
@section @code{gtbl}
@cindex @code{tbl}
@cindex @code{gtbl}

@c XXX

@menu
* Invoking gtbl::               
@end menu

@c ---------------------------------------------------------------------

@node Invoking gtbl,  , gtbl, gtbl
@subsection Invoking @code{gtbl}
@cindex invoking @code{gtbl}
@cindex @code{gtbl}, invoking

@c XXX


@c =====================================================================

@node gpic, ggrn, gtbl, Preprocessors
@section @code{gpic}
@cindex @code{pic}
@cindex @code{gpic}

@c XXX

@menu
* Invoking gpic::               
@end menu

@c ---------------------------------------------------------------------

@node Invoking gpic,  , gpic, gpic
@subsection Invoking @code{gpic}
@cindex invoking @code{gpic}
@cindex @code{gpic}, invoking

@c XXX


@c =====================================================================

@node ggrn, grap, gpic, Preprocessors
@section @code{ggrn}
@cindex @code{grn}
@cindex @code{ggrn}

@c XXX

@menu
* Invoking ggrn::               
@end menu

@c ---------------------------------------------------------------------

@node Invoking ggrn,  , ggrn, ggrn
@subsection Invoking @code{ggrn}
@cindex invoking @code{ggrn}
@cindex @code{ggrn}, invoking

@c XXX


@c =====================================================================

@node grap, grefer, ggrn, Preprocessors
@section @code{grap}
@cindex @code{grap}

A free implementation of @code{grap}, written by Ted Faber,
is available as an extra package from the following address:

@display
@url{http://www.lunabase.org/~faber/Vault/software/grap/}
@end display


@c =====================================================================

@node grefer, gsoelim, grap, Preprocessors
@section @code{grefer}
@cindex @code{refer}
@cindex @code{grefer}

@c XXX

@menu
* Invoking grefer::             
@end menu

@c ---------------------------------------------------------------------

@node Invoking grefer,  , grefer, grefer
@subsection Invoking @code{grefer}
@cindex invoking @code{grefer}
@cindex @code{grefer}, invoking

@c XXX


@c =====================================================================

@node gsoelim,  , grefer, Preprocessors
@section @code{gsoelim}
@cindex @code{soelim}
@cindex @code{gsoelim}

@c XXX

@menu
* Invoking gsoelim::            
@end menu

@c ---------------------------------------------------------------------

@node Invoking gsoelim,  , gsoelim, gsoelim
@subsection Invoking @code{gsoelim}
@cindex invoking @code{gsoelim}
@cindex @code{gsoelim}, invoking

@c XXX



@c =====================================================================
@c =====================================================================

@node Output Devices, File formats, Preprocessors, Top
@chapter Output Devices
@cindex output devices
@cindex devices for output

@c XXX

@menu
* Special Characters::          
* grotty::                      
* grops::                       
* grodvi::                      
* grolj4::                      
* grolbp::                      
* grohtml::                     
* gxditview::                   
@end menu


@c =====================================================================

@node Special Characters, grotty, Output Devices, Output Devices
@section Special Characters
@cindex special characters
@cindex characters, special

@c XXX

@xref{Font Files}.


@c =====================================================================

@node grotty, grops, Special Characters, Output Devices
@section @code{grotty}
@cindex @code{grotty}

@c XXX

@menu
* Invoking grotty::             
@end menu

@c ---------------------------------------------------------------------

@node Invoking grotty,  , grotty, grotty
@subsection Invoking @code{grotty}
@cindex invoking @code{grotty}
@cindex @code{grotty}, invoking

@c XXX


@c =====================================================================

@node grops, grodvi, grotty, Output Devices
@section @code{grops}
@cindex @code{grops}

@c XXX

@menu
* Invoking grops::              
* Embedding PostScript::        
@end menu

@c ---------------------------------------------------------------------

@node Invoking grops, Embedding PostScript, grops, grops
@subsection Invoking @code{grops}
@cindex invoking @code{grops}
@cindex @code{grops}, invoking

@c XXX

@c ---------------------------------------------------------------------

@node Embedding PostScript,  , Invoking grops, grops
@subsection Embedding @sc{PostScript}
@cindex embedding postscript
@cindex postscript, embedding

@c XXX


@c =====================================================================

@node grodvi, grolj4, grops, Output Devices
@section @code{grodvi}
@cindex @code{grodvi}

@c XXX

@menu
* Invoking grodvi::             
@end menu

@c ---------------------------------------------------------------------

@node Invoking grodvi,  , grodvi, grodvi
@subsection Invoking @code{grodvi}
@cindex invoking @code{grodvi}
@cindex @code{grodvi}, invoking

@c XXX


@c =====================================================================

@node grolj4, grolbp, grodvi, Output Devices
@section @code{grolj4}
@cindex @code{grolj4}

@c XXX

@menu
* Invoking grolj4::             
@end menu

@c ---------------------------------------------------------------------

@node Invoking grolj4,  , grolj4, grolj4
@subsection Invoking @code{grolj4}
@cindex invoking @code{grolj4}
@cindex @code{grolj4}, invoking

@c XXX


@c =====================================================================

@node grolbp, grohtml, grolj4, Output Devices
@section @code{grolbp}
@cindex @code{grolbp}

@c XXX

@menu
* Invoking grolbp::             
@end menu

@c ---------------------------------------------------------------------

@node Invoking grolbp,  , grolbp, grolbp
@subsection Invoking @code{grolbp}
@cindex invoking @code{grolbp}
@cindex @code{grolbp}, invoking

@c XXX


@c =====================================================================

@node grohtml, gxditview, grolbp, Output Devices
@section @code{grohtml}
@cindex @code{grohtml}

@c XXX

@menu
* Invoking grohtml::            
@end menu

@c ---------------------------------------------------------------------

@node Invoking grohtml,  , grohtml, grohtml
@subsection Invoking @code{grohtml}
@cindex invoking @code{grohtml}
@cindex @code{grohtml}, invoking

@c XXX


@c =====================================================================

@node gxditview,  , grohtml, Output Devices
@section @code{gxditview}
@cindex @code{gxditview}

@c XXX

@menu
* Invoking gxditview::          
@end menu

@c ---------------------------------------------------------------------

@node Invoking gxditview,  , gxditview, gxditview
@subsection Invoking @code{gxditview}
@cindex invoking @code{gxditview}
@cindex @code{gxditview}, invoking

@c XXX
@c X11's xditview



@c =====================================================================
@c =====================================================================

@node File formats, Installation, Output Devices, Top
@chapter File formats
@cindex file formats
@cindex formats, file

@c XXX

@menu
* gtroff Output::               
* Font Files::                  
@end menu


@c =====================================================================

@node gtroff Output, Font Files, File formats, File formats
@section @code{gtroff} Output
@cindex @code{gtroff} output
@cindex output, @code{gtroff}

This section describes the format output of GNU @code{troff}.  The
output format used by GNU @code{troff} is very similar to that used by
@acronym{UNIX} device-independent @code{troff} (@code{ditroff}).

@menu
* Output Format::               
* Device Control::              
* Drawing Functions::           
* Line Continuation::           
@end menu

@c ---------------------------------------------------------------------

@node Output Format, Device Control, gtroff Output, gtroff Output
@subsection Output Format
@cindex output format
@cindex format of output

@cindex 8-bit input
@cindex input, 8-bit
The output format is text based, as opposed to a binary format (like
@TeX{} DVI).  The output format is @w{8-bit} clean, thus single
characters can have the eighth bit set, as can the names of fonts and
special characters.

The output format consists of single command characters with attached
parameters which are separated from subsequent text by whitespace or a
newline.

The names of characters and fonts can be of arbitrary length; drivers
should not assume that they will be only two characters long (as
@code{ditroff} does).

When a character is to be printed, that character will always be in the
current font.  Unlike @code{ditroff}, it is not necessary for drivers to
search special fonts to find a character.

@table @code
@item H@var{n}
@c XXX

@item V@var{n}
@c XXX

@item h@var{n}
@c XXX

@item v@var{n}
@c XXX

@item c@var{n}
@c XXX

@item C@var{n}
@c XXX

@item @var{nn}@var{c}
@c XXX

@item t@var{xxx}
@var{xxx} is any sequence of characters terminated by a space or a
newline; the first character should be printed at the current position,
the the current horizontal position should be increased by the width of
the first character, and so on for each character.  The width of the
character is that given in the font file, appropriately scaled for the
current point size, and rounded so that it is a multiple of the
horizontal resolution.  Special characters cannot be printed using this
command.

@kindex tcommand
@pindex DESC@r{, and @code{tcommand}}
This command is only allowed if the @samp{tcommand} line is present in
the @file{DESC} file.

@item u@var{n} @var{xxx}
This is same as the @samp{t} command except that after printing each
character, the current horizontal position is increased by the sum of
the width of that character and@w{ }@var{n}.

This command is only allowed if the @samp{tcommand} line is present in
the @file{DESC} file.

@item n@var{a}@var{b}
@c XXX

@item p@var{n}
@c XXX

@item s@var{n}
@kindex sizescale
@pindex DESC@r{, and @code{sizescale}}
The argument to the @samp{s} command is in scaled points (units of
points/@var{n}, where @var{n} is the argument to the @samp{sizescale}
command in the @file{DESC} file).

@item f@var{n}
@item x @dots{} \n
Device control.
@c XXX more info

@item D@var{c} @var{x}@dots{}\n
@c XXX
@end table

@c ---------------------------------------------------------------------

@node Device Control, Drawing Functions, Output Format, gtroff Output
@subsection Device Control
@cindex device control
@cindex control of devices

The @samp{x} command is normally followed by a letter or word indicating
the function to perform, followed by white space separated arguments.

The first argument can be abbreviated to the first letter.

@table @code
@item x init
@c XXX

@item x T
@c XXX

@item x res @var{n} @var{h} @var{v}
@c XXX

@item x H
@c XXX more info
The argument to the @w{@samp{x Height}} command is also in scaled
points.
@end table

The first three output commands are guaranteed to be:

@example
x T device
x res n h v
x init
@end example

@noindent
For example, the input

@example
crunchy \fH\s+2frog\s0\fP!?
@end example

@noindent
will produce

@c XXX example

@ignore
@example
... sample output here ...
@end example
@end ignore

@c ---------------------------------------------------------------------

@node Drawing Functions, Line Continuation, Device Control, gtroff Output
@subsection Drawing Functions
@cindex drawing functions
@cindex functions for drawing

@pindex gpic
The @samp{D} drawing command has been extended.  These extensions will
only be used by GNU @code{pic} if the @option{-x} option is given.

@xref{Drawing Requests}.

@table @code
@c XXX ...
@item Df @var{n}
Set the shade of gray to be used for filling solid objects to@w{
}@var{n}; @var{n}@w{ }must be an integer between 0 and@w{ }1000, where 0
corresponds solid white and 1000 to solid black, and values in between
correspond to intermediate shades of gray.  This applies only to solid
circles, solid ellipses and solid polygons.  By default, a level of@w{
}1000 will be used.  Whatever color a solid object has, it should
completely obscure everything beneath it.  A value greater than@w{ }1000
or less than@w{ }0 can also be used: this means fill with the shade of
gray that is currently being used for lines and text.  Normally this
will be black, but some drivers may provide a way of changing this.

@item DC @var{d}
Draw a solid circle with a diameter of@w{ }@var{d} with the leftmost
point at the current position.

@item DE @var{dx} @var{dy}
Draw a solid ellipse with a horizontal diameter of@w{ }@var{dx} and a
vertical diameter of@w{ }@var{dy} with the leftmost point at the current
position.

@item Dp @var{dx1} @var{dy1} @var{dx2} @var{dy2} @dots{} @var{dxn} @var{dyn}
Draw a polygon with.  The first vertex is at the current position, the
second vertex at an offset (@var{dx1},@var{dy1}) from the current
position, the second vertex at an offset (@var{dx2},@var{dy2}) from the
first vertex, and so on up to the @var{n}-th vertex.  At the moment, GNU
@code{pic} only uses this command to generate triangles and rectangles.

@item DP @var{dx1} @var{dy1} @var{dx2} @var{dy2} @dots{} @var{dxn} @var{dyn}
Like @code{Dp} but draw a solid rather than outlined polygon.

@item Dt @var{n}
@cindex line thickness
@cindex thickness of lines
Set the current line thickness to @var{n}@w{ }machine units.
Traditionally, @acronym{UNIX} @code{troff} drivers use a line thickness
proportional to the current point size; drivers should continue to do
this if no @code{Dt} command has been given, or if a @code{Dt} command
has been given with a negative value of@w{ }@var{n}.  A zero value of@w{
}@var{n} selects the smallest available line thickness.
@end table

@findex \D
A difficulty arises in how the current position should be changed after
the execution of these commands.  This is not of great importance since
the code generated by GNU @code{pic} does not depend on this.  Given a
drawing command of the form

@example
\D'@var{c} @var{x1} @var{y1} @var{x2} @var{y2} @dots{} @var{xn} @var{yn}'
@end example

@findex \w
@vindex st
@findex sb
@noindent
where @var{c} is not one of @samp{c}, @samp{e}, @samp{l}, @samp{a} or
@samp{~}, @acronym{UNIX} @code{troff} will treat each of the x@w{ }value
as a horizontal quantity, and each of the y@w{ }values as a vertical
quantity and will assume that the width of the drawn object is sum if
all x@w{ }values, and that the height is the sum of all y@w{ }values.
(The assumption about the height can be seen by examining the @code{st}
and @code{sb} registers after using such a @code{D}@w{ }command in a
@code{\w} escape sequence.)  This rule also holds for all the original
drawing commands with the exception of @code{De}.  For the sake of
compatibility GNU @code{troff} also follows this rule, even though it
produces an ugly result in the case of the @code{Df}, @code{Dt}, and, to
a lesser extent, @code{DE}@w{ }commands.  Thus after executing a
@code{D}@w{ }command of the form

@example
D@var{c} @var{x1} @var{y1} @var{x2} @var{y2} @dots{} @var{xn} @var{yn}
@end example

@noindent
the current position should be increased horizontally by the sum of all
x@w{ }values and vertically by the sum of all y@w{ }values.

@c ---------------------------------------------------------------------

@node Line Continuation,  , Drawing Functions, gtroff Output
@subsection Line Continuation
@cindex line continuation in output commands
@cindex output commands, line continuation

There is a continuation convention which permits the argument to the
@w{@samp{x X}} command to contain newlines: When outputting the argument
to the @w{@samp{x X}} command, GNU @code{troff} will follow each newline
in the argument with a @samp{+} character (as usual, it will terminate
the entire argument with a newline); thus if the line after the line
containing the @w{@samp{x X}} command starts with @samp{+}, then the
newline ending the line containing the @w{@samp{x X}} command should be
treated as part of the argument to the @w{@samp{x X}} command, the
@samp{+} should be ignored, and the part of the line following the
@samp{+} should be treated like the part of the line following the
@w{@samp{x X}} command.


@c =====================================================================

@node Font Files,  , gtroff Output, File formats
@section Font Files
@cindex font files
@cindex files, font

The @code{gtroff} font format is roughly a superset of the
@code{ditroff} font format.  Unlike the @code{ditroff} font format,
there is no associated binary format; all files are text files.  The
font files for device @var{name} are stored in a directory
@file{dev@var{name}}.  There are two types of file: a device description
file called @file{DESC} and for each font@w{ }@var{f} a font file
called@w{ }@file{@var{f}}.

@menu
* DESC file format::            
* Font file format::            
@end menu

@c ---------------------------------------------------------------------

@node DESC file format, Font file format, Font Files, Font Files
@subsection @file{DESC} file format
@cindex @file{DESC} file format
@cindex font description file format
@cindex format of font description file
@pindex DESC@r{ file format}

The @file{DESC} file can contain the following types of line:

@table @code
@item res @var{n}
@kindex res
There are @var{n} machine units per inch.

@item hor @var{n}
@kindex hor
The horizontal resolution is @var{n} machine units.

@item vert @var{n}
@kindex vert
The vertical resolution is @var{n} machine units.

@item sizescale @var{n}
@kindex sizescale
The scale factor for point sizes.  By default this has a value of@w{ }1.
One scaled point is equal to one point/@var{n}.  The arguments to the
@code{unitwidth} and @code{sizes} commands are given in scaled points.
@xref{Fractional Type Sizes}, for more information.

@item unitwidth @var{n}
@kindex unitwidth
Quantities in the font files are given in machine units for fonts whose
point size is @var{n}@w{ }scaled points.

@item tcommand
@kindex tcommand
This means that the postprocessor can handle the @samp{t} and @samp{u}
output commands.

@item sizes @var{s1} @var{s2} @dots{} @var{sn} 0
@kindex sizes
This means that the device has fonts at @var{s1}, @var{s2}, @dots{}
@var{sn} scaled points.  The list of sizes must be terminated by a@w{
}0.  Each @var{si} can also be a range of sizes @var{m}-@var{n}.  The
list can extend over more than one line.

@item styles @var{S1} @var{S2} @dots{} @var{Sm}
@kindex styles
The first @var{m}@w{ }font positions will be associated with styles
@var{S1} @dots{} @var{Sm}.

@item fonts @var{n} @var{F1} @var{F2} @var{F3} @dots{} @var{Fn}
@kindex fonts
Fonts @var{F1} @dots{} @var{Fn} will be mounted in the font positions
@var{m}+1, @dots{}, @var{m}+@var{n} where @var{m} is the number of
styles.  This command may extend over more than one line.  A font name
of@var{ }0 will cause no font to be mounted on the corresponding font
position.

@item family @var{fam}
@kindex family
The default font family is @var{fam}.

@item charset
@kindex charset
This line and everything following in the file are ignored.  It is
allowed for the sake of backwards compatibility.
@end table

The @code{res}, @code{unitwidth}, @code{fonts} and @code{sizes} lines
are mandatory.  Other commands are ignored by @code{gtroff} but may be
used by postprocessors to store arbitrary information about the device
in the @file{DESC} file.

@c XXX add other commands resp. xrefs to output devices
@c XXX add obsolete commands

@c ---------------------------------------------------------------------

@node Font file format,  , DESC file format, Font Files
@subsection Font file format
@cindex font file format
@cindex format of font files

A font file has two sections.  The first section is a sequence of lines
each containing a sequence of blank delimited words; the first word in
the line is a key, and subsequent words give a value for that key.

@table @code
@item name @var{f}
@kindex name
The name of the font is@w{ }@var{f}.

@item spacewidth @var{n}
@kindex spacewidth
The normal width of a space is@w{ }@var{n}.

@item slant @var{n}
@kindex slant
The characters of the font have a slant of @var{n}@w{ }degrees.
(Positive means forward.)

@item ligatures @var{lig1} @var{lig2} @dots{} @var{lign} [0]
@kindex ligatures
Characters @var{lig1}, @var{lig2}, @dots{}, @var{lign} are ligatures;
possible ligatures are @samp{ff}, @samp{fi}, @samp{fl}, @samp{ffi} and
@samp{ffl}.  For backwards compatibility, the list of ligatures may be
terminated with a@w{ }0.  The list of ligatures may not extend over more
than one line.

@item special
@kindex special
The font is special; this means that when a character is requested that
is not present in the current font, it will be searched for in any
special fonts that are mounted.
@end table

Other commands are ignored by @code{gtroff} but may be used by
postprocessors to store arbitrary information about the font in the font
file.

@cindex comments in font files
@cindex font files, comments
@kindex #
The first section can contain comments which start with the @samp{#}
character and extend to the end of a line.

The second section contains one or two subsections.  It must contain a
@code{charset} subsection and it may also contain a @code{kernpairs}
subsection.  These subsections can appear in any order.  Each
subsection starts with a word on a line by itself.

@kindex charset
The word @code{charset} starts the character set subsection.  The
@code{charset} line is followed by a sequence of lines.  Each line gives
information for one character.  A line comprises a number of fields
separated by blanks or tabs.  The format is

@c XXX fix it for new HTML additions

@example
@var{name} @var{metrics} @var{type} @var{code} @var{comment}
@end example

@cindex 8-bit input
@cindex input, 8-bit
@findex \N
@kindex ---
@noindent
@var{name} identifies the character: If @var{name} is a single
character@w{ }@var{c} then it corresponds to the @code{gtroff} input
character @var{c}; if it is of the form @samp{\@var{c}} where @var{c} is
a single character, then it corresponds to the @code{gtroff} input
character@w{ }\@var{c}; otherwise it corresponds to the groff input
character @samp{\[@var{name}]}.  (If it is exactly two characters
@var{xx} it can be entered as @samp{\(@var{xx}}.)  @code{gtroff}
supports 8-bit characters; however some utilities have difficulties with
eight-bit characters.  For this reason, there is a convention that the
name @samp{char@var{n}} is equivalent to the single character whose code
is@w{ }@var{n}.  For example, @samp{char163} would be equivalent to the
character with code@w{ }163 which is the pounds sterling sign in @w{ISO
Latin-1} character set.  The name @samp{---} is special and indicates
that the character is unnamed; such characters can only be used by means
of the @code{\N} escape sequence in @code{gtroff}.

@c XXX input encodings vs. output encodings

The @var{type} field gives the character type:

@table @code
@item 1
the character has an descender, for example, `p';

@item 2
the character has an ascender, for example, `b';

@item 3
the character has both an ascender and a descender, for example, `('.
@end table

The @var{code} field gives the code which the postprocessor uses to
print the character.  The character can also be input to @code{gtroff}
using this code by means of the @code{\N} escape sequence.  The code can
be any integer.  If it starts with @samp{0} it will be interpreted as
octal; if it starts with @samp{0x} or @samp{0X} it will be interpreted as
hexadecimal.

Anything on the line after the @var{code} field will be ignored.

The @var{metrics} field has the form:

@example
@var{width}[,@var{height}[,@var{depth}[,@var{italic_correction}
  [,@var{left_italic_correction}[,@var{subscript_correction}]]]]]
@end example

@noindent
There must not be any spaces between these subfields (it has been split
here into two lines for better legibility only).  Missing subfields are
assumed to be@w{ }0.  The subfields are all decimal integers.  Since
there is no associated binary format, these values are not required to
fit into a variable of type @samp{char} as they are in @code{ditroff}.
The @var{width} subfield gives the width of the character.  The
@var{height} subfield gives the height of the character (upwards is
positive); if a character does not extend above the baseline, it should
be given a zero height, rather than a negative height.  The @var{depth}
subfield gives the depth of the character, that is, the distance below
the lowest point below the baseline to which the character extends
(downwards is positive); if a character does not extend below above the
baseline, it should be given a zero depth, rather than a negative depth.
The @var{italic_correction} subfield gives the amount of space that
should be added after the character when it is immediately to be
followed by a character from a Roman font.  The
@var{left_italic_correction} subfield gives the amount of space that
should be added before the character when it is immediately to be
preceded by a character from a Roman font.  The
@var{subscript_correction} gives the amount of space that should be
added after a character before adding a subscript.  This should be less
than the italic correction.

A line in the @code{charset} section can also have the format

@example
@var{name} "
@end example

@noindent
This indicates that @var{name} is just another name for the character
mentioned in the preceding line.

@kindex kernpairs
The word @code{kernpairs} starts the kernpairs section.  This contains a
sequence of lines of the form:

@example
@var{c1} @var{c2} @var{n}
@end example

This means that when character @var{c1} appears next to character
@var{c2} the space between them should be increased by@w{ }@var{n}.
Most entries in kernpairs section will have a negative value for@w{
}@var{n}.



@c =====================================================================
@c =====================================================================

@node Installation, Request and Escape Index, File formats, Top
@chapter Installation
@cindex installation

@c XXX



@c =====================================================================
@c =====================================================================

@node Request and Escape Index, Operator Index, Installation, Top
@chapter Request and Escape Index

In this index, escapes are listed with a leading backslash (@samp{\}) to
distinguish them from requests which appear without the leading control
character (normally either @samp{.} or @samp{'}).

@printindex fn



@c =====================================================================
@c =====================================================================

@node Operator Index, Register Index, Request and Escape Index, Top
@chapter Operator Index

@printindex op



@c =====================================================================
@c =====================================================================

@node Register Index, Macro and String Index, Operator Index, Top
@chapter Register Index

@printindex vr



@c =====================================================================
@c =====================================================================

@node Macro and String Index, Glyph Name Index, Register Index, Top
@chapter Macro and String Index

In this index, strings are listed with the calling escape sequence
(@samp{\*}) to distinguish them from macros which appear without the
leading control character (normally either @samp{.} or @samp{'}).

@printindex ma



@c =====================================================================
@c =====================================================================

@node Glyph Name Index, Font File Keyword Index, Macro and String Index, Top
@chapter Glyph Name Index

A glyph name @code{xx} consisting of exactly two characters can be
accessed as @samp{\(xx}.  Glyph names @code{xxx} of any length can be
accessed as @samp{\[xxx]}.

@printindex gl



@c =====================================================================
@c =====================================================================

@node Font File Keyword Index, Program and File Index, Glyph Name Index, Top
@chapter Font File Keyword Index

@printindex ky



@c =====================================================================
@c =====================================================================

@node Program and File Index, Concept Index, Font File Keyword Index, Top
@chapter Program  and File Index

@printindex pg



@c =====================================================================
@c =====================================================================

@node Concept Index,  , Program and File Index, Top
@chapter Concept Index

@printindex cp



@summarycontents
@contents
@bye
