.TH curs_addchstr 3 ""
.SH NAME
\fBaddchstr\fR, \fBaddchnstr\fR, \fBwaddchstr\fR,
\fBwaddchnstr\fR, \fBmvaddchstr\fR, \fBmvaddchnstr\fR, \fBmvwaddchstr\fR,
\fBmvwaddchnstr\fR - add string of characters (and attributes) to a \fBncurses\fR window
.SH SYNOPSIS
\fB#include <ncurses.h>\fR

\fBint addchstr(chtype *chstr);\fR
.br
\fBint addchnstr(chtype *chstr, int n);\fR
.br
\fBint waddchstr(WINDOW *win, chtype *chstr);\fR
.br
\fBint waddchnstr(WINDOW *win, chtype *chstr, int n);\fR
.br
\fBint mvaddchstr(int y, int x, chtype *chstr);\fR
.br
\fBint mvaddchnstr(int y, int x, chtype *chstr, int n);\fR
.br
\fBint mvwaddchstr(WINDOW *win, int y, int x, chtype *chstr);\fR
.br
\fBint mvwaddchnstr(WINDOW *win, int y, int x, chtype *chstr, int n);\fR
.SH DESCRIPTION
These routines copy \fIchstr\fR into the window image structure at and after
the current cursor position.  The four routines with \fIn\fR as the last
argument copy at most \fIn\fR elements, but no more than will fit on the line.
If \fBn\fR=\fB-1\fR then the whole string is copied, to the maximum number of
characters that will fit on the line.

The window cursor is \fINOT\fR advanced, and these routines work faster than
\fBwaddnstr\fR.  On the other hand, care must be taken when using them because
they don't perform any kind of checking (such as for the newline character),
they don't advance the current cursor position, and they truncate the string if
it crosses the right margin, rather then wrapping it around to the new line.
.SH RETURN VALUES
All these routines return the integer \fBERR\fR upon failure and an integer
value other than \fBERR\fR upon successful completion, unless
otherwise noted in the preceding routine descriptions.
.SH NOTES
Note that all routines except \fBwaddchnstr\fR may be macros.
.SH SEE ALSO
\fBncurses\fR(3).
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
