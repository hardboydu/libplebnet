.\" Copyright (c) 1997 Søren Schmidt
.\" All rights reserved.
.\" 
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer,
.\"    in this position and unchanged.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software withough specific prior written permission.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" $Id: vgl.3,v 1.3 1997/10/22 23:12:27 jraynard Exp $

.Dd August 13, 1997
.Dt VGL 3
.Os FreeBSD 3
.Sh NAME
.Nm vgl
.Nd Video Graphics Library functions
.Sh SYNOPSIS
.Fd #include <vgl.h>

.Sh DESCRIPTION
Libvgl is a library that enables the programmer access to the graphics
modes supported by the console driver (syscons). The library takes care of
programming the actual video hardware, and provides a number of simple
functions to do various graphic operations. There is also support for a
mouse via the standard mouse system in FreeBSD, see
.Fn moused
, including the ability to transparently have a mouse pointer superimposed on
the graphic image currently being worked on. 
The library takes care of screen switching by storing the current image in
memory before switching to another virtual console, and restoring when the
user switches back. This allows several graphic applications at once, but
on different virtual consoles.

Below is a short description of the various functions:

.Sh AUTHORS
.An Søren Schmidt Aq sos@FreeBSD.org

.Sh FUNCTIONS

.Ft int 
.Fn VGLInit "int mode"

Initialize the library and set up the graphic mode
.Em mode .


.Ft void 
.Fn VGLEnd "void"

Terminate graphic mode, and restore the screenmode that was active before
.Fn VGLInit
was called.


.Ft void 
.Fn VGLCheckSwitch "void"

If the program goes into longer periods of processing without doing
any graphics output, calling this function occasionally will allow 
the system to switch screens.


.Ft int 
.Fn VGLTextSetFontFile "char *filename"

Instruct the char/string functions to use the font in file
.Em filename
instead of the builtin font.


.Ft int 
.Fn VGLMouseInit "int mode"

Initialize the mouse. The optional on-screen mouse pointer is shown if the
argument is 
.Em VGL_MOUSESHOW .


.Ft void 
.Fn VGLMouseMode "int mode"

Either shows the mouse pointer if the argument is
.Em VGL_MOUSESHOW
, or hides the mouse pointer if the argument is
.Em VGL_MOUSEHIDE .


.Ft int 
.Fn VGLMouseStatus "int *x" "int *y" "char *buttons"

Returns the current mouse pointer coordinates and button state in
.Em x, y
, buttons. The return value reflects if the mouse pointer 
is currently shown on screen or not.


.Ft void 
.Fn VGLMouseSetImage "VGLBitmap *AndMask" "VGLBitmap *OrMask"

With this function it is possible to change the image of the mouse pointer
on screen.


.Ft void 
.Fn VGLMouseSetStdImage "void"

This function restores the mouse pointer to the standard arrow.


.Ft void 
.Fn VGLLine "VGLBitmap *object" "int x1" "int y1" "int x2" "int y2" "byte color"

Draw a line from
.Em x1, y1
to
.Em x2, y2
in color
.Em color .


.Ft void 
.Fn VGLBox "VGLBitmap *object" "int x1" "int y1" "int x2" "int y2" "byte color"

Draw a box with upper left hand corner at
.Em x1, y1
and lower right hand corner at
.Em x2, y2
in color
.Em color .


.Ft void 
.Fn VGLFilledBox "VGLBitmap *object" "int x1" "int y1" "int x2" "int y2" "byte color"

Draw a filled (solid) box with upper left hand corner at
.Em x1, y1
and lower right hand corner at
.Em x2, y2
in color
.Em color .


.Ft void 
.Fn VGLEllipse "VGLBitmap *object" "int xc" "int yc" "int a" "int b" "byte color"

Draw an ellipse centered at 
.Em xc, yc
make it 
.Em a
pixels wide, and 
.Em b
pixels high in color
.Em color .


.Ft void 
.Fn VGLFilledEllipse "VGLBitmap *object" "int xc" "int yc" "int a" "int b" "byte color"

Draw a filled (solid) ellipse centered at 
.Em xc, yc
make it 
.Em a
pixels wide, and 
.Em b
pixels high in color
.Em color .


.Ft int 
.Fn VGLBitmapCopy "VGLBitmap *src" "int srcx" "int srcy" "VGLBitmap *dst" "int dstx" "int dsty" "int width" "int hight"

Copy a rectangle of pixels from bitmap
.Em src
upper left hand corner at 
.Em srcx, srcy
to bitmap
.Em dst
at 
.Em dstx, dsty
of the size
.Em width, height .


.Ft void 
.Fn VGLBitmapPutChar "VGLBitmap *Object" "int x" "int y" "byte ch" "byte fgcol" "byte bgcol" "int fill" "int dir"

Write the character
.Em ch
at position
.Em x, y
in foreground color 
.Em fgcol.
If 
.Em fill
is != 0, use the color
.Em bgcol
as background otherwise the background is transparent.
The character is drawn in the direction specified by the argument
.Em dir .


.Ft void 
.Fn VGLBitmapString "VGLBitmap *Object" "int x" "int y" "char *str" "byte fgcol" "byte bgcol" "int fill" "int dir"

Write the string
.Em str
at position
.Em x, y
in foreground color 
.Em fgcol.
If 
.Em fill
is != 0, use the color
.Em bgcol
as background otherwise the background is transparent.
The string is drawn in the direction specified by the argument
.Em dir .

.Ft void 
.Fn VGLClear "VGLBitmap *object" "byte color"

Clears the entire bitmap to color
.Em color .


.Ft void 
.Fn VGLSetPalette "byte *red" "byte *green" "byte *blue"

This function sets the palette used, the arguments
.Em red, green, blue
should point to byte arrays of 256 positions each.


.Ft void 
.Fn VGLSetPaletteIndex "byte color" "byte red" "byte green" "byte blue"

Set the palette index 
.Em color
to the specified RGB value.


.Ft void 
.Fn VGLSetBorder "byte color"

Set the border color to color
.Em color .


.Ft void 
.Fn VGLBlankDisplay "int blank"

Blank the display if the argment
.Em blank
!= 0. This can be done to shut off the screen during display updates that
the user should first see when it's done.


.Sh HISTORY
The 
.Nm
library appeared in FreeBSD 3.0
