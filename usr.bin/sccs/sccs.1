.\" Copyright (c) 1983, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)sccs.1	8.1 (Berkeley) 6/6/93
.\" $FreeBSD$
.\"
.Dd June 6, 1993
.Dt SCCS 1
.Os
.Sh NAME
.Nm sccs
.Nd front end for the
.Tn SCCS
subsystem
.Sh SYNOPSIS
.Nm
.Op Fl r
.Op Fl d Ar path
.Op Fl p Ar path
.Ar command
.Op Ar flags
.Op Ar
.Sh DESCRIPTION
The
.Nm
utility is a front end to the
.Tn SCCS
programs
that
helps them mesh more cleanly
with
the rest of
.Ux .
It
also includes the capability to run
.Dq set-user-ID
to another user
to
provide additional protection.
.Pp
Basically,
.Nm
runs the command with the specified
.Ar flags
and
.Ar args .
Each argument is normally modified to be prepended with
.Pa SCCS/s. .
.Pp
Flags to be interpreted by the
.Nm
program must be before the
.Ar command
argument.
Flags to be passed to the actual
.Tn SCCS
program must come after the
.Ar command
argument.
These flags are specific to the command and
are discussed in the documentation for that command.
.Pp
Besides the usual
.Tn SCCS
commands,
several
.Dq pseudo-commands
can be issued.
These are:
.Bl -tag -width ".Ic deledit"
.It Ic edit
Equivalent
to
.Nm get Fl e .
.It Ic delget
Perform a delta on the named files and
then get new versions.
The new versions will have ID keywords expanded, and
will not be editable.
The
.Fl m , p , r , s ,
and
.Fl y
flags will be passed to
.Nm delta ,
and the
.Fl b, c , e , i , k , l , s ,
.\" anybody who has a bad xterm which is almost anyone
and
.Fl x
flags will be passed to
.Nm get .
.It Ic deledit
Equivalent
to
.Ic delget
except that the
.Nm get
phase includes the
.Fl e
flag.
This
option is useful for making a
.Em checkpoint
of your current editing phase.
The same flags will be passed to
.Nm delta
as described above, and
all the flags listed for
.Nm get
above except
.Fl e
and
.Fl k
are
passed to
.Ic edit .
.It Ic create
Creates
an
.Tn SCCS
file,
taking
the initial contents from the file of the same name.
Any
flags to
.Nm admin
are accepted.
If the creation is successful,
the files are renamed with a comma on the front.
These should be removed when you are convinced that the
.Tn SCCS
files
have been created successfully.
.It Ic fix
Must
be followed by a
.Fl r
flag.
This command essentially removes the named delta, but
leaves you with a copy of the delta
with the changes that were in it.
It is useful for fixing small compiler bugs, etc.
Since it does not leave audit trails, it should be used carefully.
.It Ic clean
This routine removes everything from the current directory
that can be recreated from
.Tn SCCS
files.
It will not remove any files being edited.
If the
.Fl b
flag is given, branches are ignored in the determination of
whether they are being edited; this
is dangerous if you are keeping the branches in the
same directory.
.It Ic unedit
This
is the opposite of an
.Ic edit
or a
.Nm get Fl e .
It should be used with extreme caution, since
any changes you made since the
.Nm get
will be irretrievably lost.
.It Ic info
Gives a listing of all files being edited.
If the
.Fl b
flag
is given, branches (i.e., SID's
with two or fewer components)
are ignored.
If the
.Fl u
flag is given (with an optional argument) then
only files being edited by you (or the named user) are listed.
.It Ic check
Like
.Ic info
except that nothing is printed if nothing is being edited, and
a non-zero exit status is returned if anything is being edited.
The intent is to have this included in an
.Cm install
entry in a makefile to insure that everything is included into the
.Tn SCCS
file before a version is installed.
.It Ic tell
Gives a newline-separated list of the files being edited
on the standard output.
Takes the
.Fl b
and
.Fl u
flags like
.Ic info
and
.Ic check .
.It Ic diffs
Gives a
.Xr diff 1
listing between the current version of the
program(s) you have out for editing and the versions in
.Tn SCCS
format.
The
.Fl r , c , i , x ,
and
.Fl t
flags are passed to
.Nm get ;
the
.Fl l , s , e , f , h ,
and
.Fl b
options are passed to
.Xr diff 1 .
The
.Fl C
flag is passed to
.Xr diff 1
as
.Fl c .
.It Ic print
This command prints out verbose information
about the named files.
.Pp
.It Fl r
Runs
.Nm
as the real user rather than as whatever effective user
.Nm
is
.Dq set-user-ID
to.
.It Fl d
Specifies a root directory for the
.Tn SCCS
files.
The default is the current directory.
If environment variable
.Ev PROJECT
is set,
it will be used to determine the
.Fl d
flag.
.It Fl p
Defines the pathname of the directory in which the
.Tn SCCS
files will be found;
.Pa SCCS
is the default.
The
.Fl p
flag
differs from the
.Fl d
flag
in that the
.Fl d
argument is prepended to the entire pathname and the
.Fl p
argument is inserted before the final component of the pathname.
For example,
.Dq Li "sccs -d/x -py get a/b"
will convert to
.Dq Li "get /x/a/y/s.b" .
The intent here is to create aliases such as
.Dq Li "alias syssccs sccs -d/usr/src"
which
will be used as
.Dq Li "syssccs get cmd/who.c" .
.El
.Pp
Certain
commands (such as
.Nm admin )
cannot be run
.Dq set-user-ID
by all users, since this would allow anyone to change the authorizations.
These commands are always run as the real user.
.Sh EXAMPLES
To get a file for editing,
edit it,
and produce a new delta:
.Bd -literal -offset indent
sccs get -e file.c
ex file.c
sccs delta file.c
.Ed
.Pp
To get a file from another directory:
.Pp
.Dl "sccs -p/usr/src/sccs/s. get cc.c"
.Pp
or
.Pp
.Dl "sccs get /usr/src/sccs/s.cc.c"
.Pp
To make a delta of a large number of files
in the current directory:
.Pp
.Dl "sccs delta *.c"
.Pp
To get a list of files being edited that are not on branches:
.Pp
.Dl "sccs info -b"
.Pp
To delta everything being edited by you:
.Pp
.Dl "sccs delta `sccs tell -u`"
.Pp
In a makefile, to get source files
from an
.Tn SCCS
file if it does not already exist:
.Bd -literal -offset indent
SRCS = <list of source files>
$(SRCS):
	sccs get $(REL) $@
.Ed
.Sh ENVIRONMENT
.Bl -tag -width ".Ev PROJECT"
.It Ev PROJECT
The
.Ev PROJECT
environment variable is checked by the
.Fl d
flag.
If it begins with a slash, it is taken directly; otherwise,
the home directory of a user of that name is
examined for a subdirectory
.Pa src
or
.Pa source .
If such a directory is found, it is used.
.El
.Sh SEE ALSO
.Xr what 1 ,
.Xr admin SCCS ,
.Xr chghist SCCS ,
.Xr comb SCCS ,
.Xr delta SCCS ,
.Xr get SCCS ,
.Xr help SCCS ,
.Xr prt SCCS ,
.Xr rmdel SCCS ,
.Xr sccsdiff SCCS
.Rs
.%A Eric Allman
.%T "An Introduction to the Source Code Control System"
.Re
.Sh HISTORY
The
.Nm
command
appeared in
.Bx 4.3 .
.Sh BUGS
It should be able to take directory arguments on pseudo-commands
like the
.Tn SCCS
commands do.
